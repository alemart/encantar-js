/*!
 * MARTINS.js version 0.2.0
 * GPU-accelerated Augmented Reality for the web
 * Copyright 2022-2024 Alexandre Martins <alemartf(at)gmail.com> (https://github.com/alemart)
 * https://github.com/alemart/martins-js
 *
 * @license LGPL-3.0-or-later
 * Date: 2024-06-28T19:56:32.620Z
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Martins=t():e.Martins=t()}(self,(()=>(()=>{var e={774:e=>{
/*!
 * Speedy Vision version 0.9.1
 * GPU-accelerated Computer Vision for JavaScript
 * Copyright 2020-2024 Alexandre Martins <alemartf(at)gmail.com> (https://github.com/alemart)
 * https://github.com/alemart/speedy-vision
 *
 * @license Apache-2.0
 * Date: 2024-06-28T15:13:44.513Z
 */
var t;self,t=()=>(()=>{var e={5637:(e,t,n)=>{"use strict";n.d(t,{w:()=>c});var i=n(416),s=n(1567),o=n(2191),r=n(5619);let a="raf",A="default";class c extends i.Q{static get powerPreference(){return s.c.powerPreference}static set powerPreference(e){s.c.powerPreference=e}static get gpuPollingMode(){return a}static set gpuPollingMode(e){if("raf"!==e&&"asap"!==e)throw new r.qw(`Invalid GPU polling mode: "${e}"`);a=e}static get logging(){return A}static set logging(e){if("default"!==e&&"none"!==e&&"diagnostic"!==e)throw new r.qw(`Invalid logging mode: "${e}"`);"diagnostic"===e&&o.A.log("%c DIAGNOSTIC MODE ","background:red;color:white;font-size:36pt;font-weight:bold"),A=e}}},4292:(e,t,n)=>{"use strict";n.d(t,{r:()=>a});var i=n(4247),s=n(2191),o=n(5619);const r=Object.freeze({float32:Float32Array});class a{constructor(e,t,n){s.A.assert(e>0&&t>0),s.A.assert(n===a.DEFAULT_DTYPE),this._rows=0|e,this._columns=0|t,this._dtype=n}get rows(){return this._rows}get columns(){return this._columns}get dtype(){return this._dtype}static get DEFAULT_DTYPE(){return"float32"}static get BUFFER_TYPE(){return r}plus(e){return new u(this,e)}minus(e){return new f(this,e)}times(e){return"number"==typeof e?new g(this,e):new I(this,e)}transpose(){return new h(this)}inverse(){return new p(this)}compMult(e){return new m(this,e)}ldiv(e){return new _(this,e)}toString(){return`SpeedyMatrixExpr(rows=${this.rows}, columns=${this.columns})`}_evaluate(e,t){throw new o.aQ}}const{SpeedyMatrix:A}=n(3286);class c extends a{constructor(e,t,n){super(e,t,n),this._tempMatrix=A.Zeros(this.rows,this.columns,this.dtype)}}class l extends c{constructor(e,t,n){super(e,t,n.dtype),this._operand=n}_evaluate(e,t){const n=this._operand._evaluate(e,t),s=this._tempMatrix,o=i.U.allocateMat32(e,t,s),r=i.U.allocateMat32(e,t,n);return i.U.copyToMat32(e,t,r,n),this._compute(e,t,o,r),i.U.copyFromMat32(e,t,o,s),i.U.deallocateMat32(e,t,r),i.U.deallocateMat32(e,t,o),s}_compute(e,t,n,i){throw new o.aQ}}class d extends c{constructor(e,t,n,i){s.A.assert(n.dtype===i.dtype),super(e,t,n.dtype),this._left=n,this._right=i}_evaluate(e,t){const n=this._left._evaluate(e,t),s=this._right._evaluate(e,t),o=this._tempMatrix,r=i.U.allocateMat32(e,t,o),a=i.U.allocateMat32(e,t,n),A=i.U.allocateMat32(e,t,s);return i.U.copyToMat32(e,t,a,n),i.U.copyToMat32(e,t,A,s),this._compute(e,t,r,a,A),i.U.copyFromMat32(e,t,r,o),i.U.deallocateMat32(e,t,A),i.U.deallocateMat32(e,t,a),i.U.deallocateMat32(e,t,r),o}_compute(e,t,n,i,s){throw new o.aQ}}class h extends l{constructor(e){super(e.columns,e.rows,e)}_compute(e,t,n,i){e.exports.Mat32_transpose(n,i)}}class p extends l{constructor(e){s.A.assert(e.rows===e.columns),super(e.rows,e.columns,e),this._size=e.rows}_compute(e,t,n,i){switch(this._size){case 0:break;case 1:e.exports.Mat32_inverse1(n,i);break;case 2:e.exports.Mat32_inverse2(n,i);break;case 3:e.exports.Mat32_inverse3(n,i);break;default:e.exports.Mat32_qr_inverse(n,i)}}}class g extends l{constructor(e,t){super(e.rows,e.columns,e),this._scalar=+t}_compute(e,t,n,i){e.exports.Mat32_scale(n,i,this._scalar)}}class u extends d{constructor(e,t){s.A.assert(e.rows===t.rows&&e.columns===t.columns),super(e.rows,e.columns,e,t)}_compute(e,t,n,i,s){e.exports.Mat32_add(n,i,s)}}class f extends d{constructor(e,t){s.A.assert(e.rows===t.rows&&e.columns===t.columns),super(e.rows,e.columns,e,t)}_compute(e,t,n,i,s){e.exports.Mat32_subtract(n,i,s)}}class I extends d{constructor(e,t){s.A.assert(e.columns===t.rows),super(e.rows,t.columns,e,t)}_compute(e,t,n,i,s){e.exports.Mat32_multiply(n,i,s)}}class m extends d{constructor(e,t){s.A.assert(e.rows===t.rows&&e.columns===t.columns),super(t.rows,t.columns,e,t)}_compute(e,t,n,i,s){e.exports.Mat32_compmult(n,i,s)}}class _ extends d{constructor(e,t){const n=e.rows,i=e.columns;s.A.assert(n>=i&&t.rows===n&&1===t.columns),super(i,1,e,t)}_compute(e,t,n,i,s){e.exports.Mat32_qr_ols(n,i,s,2)}}},4247:(e,t,n)=>{"use strict";n.d(t,{U:()=>h});var i=n(8902),s=n(5619),o=n(2191),r=n(1814);const a=n(3575);let A=null,c=null;const l={as:{object:d=new WebAssembly.Memory({initial:16,maximum:256}),uint8:new Uint8Array(d.buffer),int32:new Int32Array(d.buffer),uint32:new Uint32Array(d.buffer),float32:new Float32Array(d.buffer),float64:new Float64Array(d.buffer)}};var d;class h{static ready(){return new i.i(((e,t)=>{h._ready(e,t)}))}static get handle(){if(!A||!c)throw new s.NO("Can't get WASM handle: routines not yet loaded");return{wasm:A,memory:l,module:c}}static imports(e){const t=new p(e);return Object.getOwnPropertyNames(p.prototype).filter((e=>"function"==typeof t[e]&&"constructor"!==e)).reduce(((e,n)=>(e[n]=t[n],e)),Object.create(null))}static allocateMat32(e,t,n){const i=e.exports.malloc(n.data.byteLength);return e.exports.Mat32_create(n.rows,n.columns,n.step0,n.step1,n._data.length,i)}static deallocateMat32(e,t,n){const i=e.exports.Mat32_data(n);return e.exports.free(n),e.exports.free(i),0}static copyToMat32(e,t,n,i){o.A.assert(i.data.byteLength===e.exports.Mat32_dataSize(n));const s=e.exports.Mat32_data(n);return t.as.float32.set(i.data,s/Float32Array.BYTES_PER_ELEMENT),n}static copyFromMat32(e,t,n,i){o.A.assert(i.data.byteLength===e.exports.Mat32_dataSize(n));const s=e.exports.Mat32_data(n)/Float32Array.BYTES_PER_ELEMENT;for(let e=i.data.length-1;e>=0;e--)i.data[e]=t.as.float32[s+e];return n}static _ready(e,t,n=1e3){null!==A&&null!==c?e({wasm:A,memory:l,module:c}):n<=0?t(new s.MU("Can't load WASM routines")):setTimeout(h._ready,0,e,t,n-1)}}class p{constructor(e){return Object.getOwnPropertyNames(this.constructor.prototype).filter((e=>"function"==typeof this[e])).filter((e=>"constructor"!==e)).forEach((e=>{this[e]=this[e].bind(this)})),this.memory=e,this.cstring=new g(e),Object.freeze(this)}print(e){o.A.log(this.cstring.get(e))}fatal(e){throw new s.NO(this.cstring.get(e))}bytefill(e,t,n){this.memory.as.uint8.fill(e,t,n)}copyWithin(e,t,n){this.memory.as.uint8.copyWithin(e,t,n)}}class g{constructor(e){this._decoder=new TextDecoder("utf-8"),this._memory=e}get(e){const t=this._memory.as.uint8,n=this._memory.as.uint8.byteLength;let i=e;for(;i<n&&0!==t[i];)++i;return this._decoder.decode(t.subarray(e,i))}}!function(e){if(!r.LITTLE_ENDIAN)throw new s.EM("Can't run WebAssembly code: not in a little-endian machine!");i.i.resolve(a).then((e=>(e=>Uint8Array.from(atob(e),(e=>e.charCodeAt(0))))(e))).then((t=>WebAssembly.instantiate(t,{env:{memory:e.as.object,...h.imports(e)}}))).then((e=>{A=e.instance,c=e.module,e.instance.exports.srand(.001*Date.now()&4294967295),o.A.log("The WebAssembly routines have been loaded!")})).catch((e=>{throw new s.NO(`Can't load the WebAssembly routines: ${e}`,e)}))}(l)},3286:(e,t,n)=>{"use strict";n.r(t),n.d(t,{SpeedyMatrix:()=>a});var i=n(4292),s=n(4247),o=n(8902),r=n(2191);class a extends i.r{constructor(e,t,n,s,o){super(e,t,i.r.DEFAULT_DTYPE),r.A.assert(o.constructor===i.r.BUFFER_TYPE[this.dtype]),r.A.assert(n>0&&s>=n),r.A.assert(o.length+e*t===0||o.length===1+n*(e-1)+s*(t-1)),this._step0=0|n,this._step1=0|s,this._data=o}static Create(e,t,n,s=i.r.DEFAULT_DTYPE){return r.A.assert(e*t>0,"Can't create a matrix without a shape"),r.A.assert(e*t===n.length,`Can't create matrix: expected ${e*t} entries, but found ${n.length}`),r.A.assert(Object.prototype.hasOwnProperty.call(i.r.BUFFER_TYPE,s),`Invalid dtype: "${s}"`),new a(e,t,1,e,Reflect.construct(i.r.BUFFER_TYPE[s],[n]))}static Zeros(e,t=e,n=i.r.DEFAULT_DTYPE){return r.A.assert(e*t>0,"Can't create a matrix without a shape"),r.A.assert(Object.prototype.hasOwnProperty.call(i.r.BUFFER_TYPE,n),`Invalid dtype: "${n}"`),new a(e,t,1,e,Reflect.construct(i.r.BUFFER_TYPE[n],[e*t]))}static Ones(e,t=e,n=i.r.DEFAULT_DTYPE){return r.A.assert(e*t>0,"Can't create a matrix without a shape"),r.A.assert(Object.prototype.hasOwnProperty.call(i.r.BUFFER_TYPE,n),`Invalid dtype: "${n}"`),new a(e,t,1,e,Reflect.construct(i.r.BUFFER_TYPE[n],[e*t]).fill(1))}static Eye(e,t=e,n=i.r.DEFAULT_DTYPE){r.A.assert(e*t>0,"Can't create a matrix without a shape"),r.A.assert(Object.prototype.hasOwnProperty.call(i.r.BUFFER_TYPE,n),`Invalid dtype: "${n}"`);const s=Reflect.construct(i.r.BUFFER_TYPE[n],[e*t]);for(let n=Math.min(e,t)-1;n>=0;n--)s[n*e+n]=1;return new a(e,t,1,e,s)}static From(e){return a.Zeros(e.rows,e.columns,e.dtype).setToSync(e)}static ready(){return s.U.ready().then((e=>{}))}get data(){return this._data}get step0(){return this._step0}get step1(){return this._step1}block(e,t,n,i){r.A.assert(e<=t&&n<=i,`Invalid indices: [${e}:${t},${n}:${i}]`),e=Math.max(e,0),t=Math.min(t,this._rows-1),n=Math.max(n,0);const s=t-e+1,o=(i=Math.min(i,this._columns-1))-n+1,A=this._step0,c=this._step1,l=e*A+n*c,d=1+t*A+i*c;return new a(s,o,A,c,this._data.subarray(l,d))}row(e){return this.block(e,e,0,this._columns-1)}column(e){return this.block(0,this._rows-1,e,e)}diagonal(){const e=Math.min(this._rows,this._columns),t=e,n=this._step0+this._step1,i=1+(e-1)*n;return new a(t,1,n,n,this._data.subarray(0,i))}at(e,t){return e>=0&&e<this._rows&&t>=0&&t<this._columns?this._data[this._step0*e+this._step1*t]:Number.NaN}read(){const e=new Array(this._rows*this._columns),t=this._step0,n=this._step1;let i=0;for(let s=0;s<this._columns;s++)for(let o=0;o<this._rows;o++)e[i++]=this._data[o*t+s*n];return e}toString(){const e=this.rows,t=this.columns,n=this.read(),i=new Array(e);for(let s=0;s<e;s++){i[s]=new Array(t);for(let o=0;o<t;o++)i[s][o]=n[o*e+s]}const s=e=>e.toFixed(5);return`SpeedyMatrix(rows=${e}, columns=${t}, data=[\n${i.map((e=>"    "+e.map(s).join(", "))).join(",\n")}\n])`}setTo(e){return s.U.ready().then((t=>this.setToSync(e)))}setToSync(e){const{wasm:t,memory:n}=s.U.handle,i=e._evaluate(t,n);r.A.assert(this._rows===i._rows&&this._columns===i._columns&&this.dtype===i.dtype,`Can't set the values of a ${this.rows} x ${this.columns} ${this.dtype} matrix to those of a ${i.rows} x ${i.columns} ${i.dtype} matrix`);const o=this._step0,a=this._step1,A=i._step0,c=i._step1;if(o===A&&a===c&&this._data.length===i._data.length)this._data.set(i._data);else for(let e=this._columns-1;e>=0;e--)for(let t=this._rows-1;t>=0;t--)this._data[t*o+e*a]=i._data[t*A+e*c];return this}fill(e){return this.fillSync(e),o.i.resolve(this)}fillSync(e){if(e=+e,this._rows*this._columns===this._data.length)return this._data.fill(e),this;for(let t=0;t<this._columns;t++)for(let n=0;n<this._rows;n++)this._data[n*this._step0+t*this._step1]=e;return this}_evaluate(e,t){return this}}},416:(e,t,n)=>{"use strict";n.d(t,{Q:()=>s});var i=n(5619);class s{constructor(){throw new i.aQ("Namespaces can't be instantiated")}}},8902:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});const i="undefined"!=typeof queueMicrotask&&queueMicrotask||"undefined"!=typeof process&&process.nextTick||(e=>Promise.resolve().then((()=>e())));class s{constructor(e){this._state=0,this._value=void 0,this._onFulfillment=null,this._onRejection=null,this._children=0,this[0]=this,this._parent=void 0,this._flags=0,this._fulfill=this._fulfill.bind(this),this._reject=this._reject.bind(this),this._resolve=this._resolve.bind(this),this._broadcastIfAsync=this._broadcastIfAsync.bind(this),e(this._fulfill,this._reject)}then(e,t=null){const n=new s(this._nop);return n._onFulfillment="function"==typeof e&&e,n._onRejection="function"==typeof t&&t,n._parent=this,this[this._children++]=n,this._flags&=-2,this._notify(),n}catch(e){return this.then(null,e)}finally(e){const t=t=>(e(),t);return this.then(t,t)}turbocharge(){let e=this;for(this._flags|=1;void 0!==e._parent;)e=e._parent,e._flags|=1;return e._notify(),this}toString(){switch(this._state){case 0:return"SpeedyPromise { <pending> }";case 1:return`SpeedyPromise { <fulfilled> ${this._value} }`;case 2:return`SpeedyPromise { <rejected> ${this._value} }`;default:return""}}get[Symbol.toStringTag](){return"SpeedyPromise"}static resolve(e){const t=new s(this._snop);return"object"==typeof e&&null!==e&&"then"in e||"function"==typeof e&&"then"in e?t._resolve(e):(t._value=e,t._state=1),t}static reject(e){const t=new s(this._snop);return t._value=e,t._state=2,t}static all(e){return new s(((t,n)=>{const i=[];for(const t of e)i.push(t);const o=i.length;if(0==o)return void t([]);let r=o;const a=new Array(o),A=e=>n=>{a[e]=n,0==--r&&t(a)};for(let e=0;e<o;e++){const t=i[e];t.__proto__===s.prototype||t.__proto__===Promise.prototype?t.then(A(e),n):s.resolve(t).then(A(e),n)}}))}static race(e){return new s(((t,n)=>{const i=[];for(const t of e)i.push(t);const o=i.length;for(let e=0;e<o;e++){const o=i[e];o.__proto__===s.prototype||o.__proto__===Promise.prototype?o.then(t,n):s.resolve(o).then(t,n)}}))}_fulfill(e){this._setState(1,e)}_reject(e){this._setState(2,e)}_setState(e,t){0==this._state&&(this._state=e,this._value=t,this._notify())}_notify(){0!=this._state&&(1&this._flags?this._broadcast():i(this._broadcastIfAsync))}_broadcastIfAsync(){1&this._flags||this._broadcast()}_broadcast(){const e=this._children,t=this._state;if(1===t)for(let t=0;t<e;t++){const e=this[t],n=e._onFulfillment;try{n?n!==e._nop&&(e._resolve(n(this._value)),e._onFulfillment=e._nop):e._fulfill(this._value)}catch(t){e._reject(t)}}else if(2===t)for(let t=0;t<e;t++){const e=this[t],n=e._onRejection;try{n?n!==e._nop&&(e._resolve(n(this._value)),e._onRejection=e._nop):e._reject(this._value)}catch(t){e._reject(t)}}}_resolve(e){if("object"!=typeof e&&"function"!=typeof e||null===e)this._fulfill(e);else{if(e===this)throw new TypeError;if(e.__proto__!==s.prototype&&e.__proto__!==Promise.prototype)try{const t=e.then;if("function"==typeof t){let n=this._resolve,i=this._reject;try{t.call(e,(e=>{n(e),n=i=this._nop}),(e=>{i(e),n=i=this._nop}))}catch(e){n!==this._nop&&i!==this._nop&&this._reject(e)}}else this._fulfill(e)}catch(e){this._reject(e)}else e.then(this._resolve,this._reject)}}_nop(){}static _snop(){}}},3112:(e,t,n)=>{"use strict";n.d(t,{gx:()=>b,bf:()=>B});var i=n(1567),s=n(2191),o=n(6467),r=n(5619);const a=n(1814),A=Object.keys(a).filter((e=>"number"==typeof a[e])).reduce(((e,t)=>(e[t]=a[t],e)),{}),c=Object.freeze({...A,FS_USE_CUSTOM_PRECISION:0,FS_OUTPUT_TYPE:0,PIXELCOMPONENT_RED:o.kQ.RED,PIXELCOMPONENT_GREEN:o.kQ.GREEN,PIXELCOMPONENT_BLUE:o.kQ.BLUE,PIXELCOMPONENT_ALPHA:o.kQ.ALPHA}),l=[/\/\*(.|\s)*?\*\//g,/\/\/.*$/gm],d=/^\s*@\s*include\s+"(.*?)"/gm,h=/@(\w+)@/g,p=[/@\s*unroll\s+?for\s*\(\s*(int|)\s*(?<counter>\w+)\s*=\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*(<=?)\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*\+\+()\s*\)\s*\{\s*([\s\S]+?)\s*\}/g,/@\s*unroll\s+?for\s*\(\s*(int|)\s*(?<counter>\w+)\s*=\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*(<=?)\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*\+=\s*(-?\d+)\s*\)\s*\{\s*([\s\S]+?)\s*\}/g];class g{static generateGLSL(e,t,n=null,o=null){const r=[],a=function(e){s.A.assert(i.c.isInitialized());const t=new Map,n=Object.assign(Object.create(null),c,(o=s.A.platformString(),r=i.c.instance.renderer,Object.freeze({APPLE:0|/(Mac|iOS|iPhone|iPad|iPod)/i.test(o),APPLE_GPU:0|/Apple/.test(r),INTEL_GRAPHICS:0|/Intel.*Graphics/.test(r)})));var o,r;for(const e in n)t.set(e,n[e]);for(const[n,i]of e)t.set(n,i);return t}(e),A=function(e,t,n=null,i=null){const s=[];null!==n&&s.push(n);for(const[t,n]of e)s.push(`#define ${t} ${Number(n)}`);return s.push(t),null!==i&&s.push(i),s.join("\n")}(e,t,n,o);return function(e,t){const n=f.bind(t),i=p.length;for(let t=0;t<i;t++)e=e.replace(p[t],n);return e}(A.replace(l[0],"").replace(l[1],"").replace(h,((e,t)=>String(a.has(t)?Number(a.get(t)):(r.push(`Undefined constant ${t}`),0)))).replace(d,((t,n)=>g.generateGLSL(e,u(n)))),e)+r.map((e=>`\n#error ${e}\n`)).join("")}}function u(e){if(String(e).match(/^[a-zA-Z0-9_-]+\.glsl$/))return n(5235)("./"+e);throw new r.kG(`Shader preprocessor: can't read file "${e}"`)}function f(e,t,n,i,o,a,A,c){const l=this,d=Number.isFinite(+i)||l.has(i),h=Number.isFinite(+a)||l.has(a);if(!d||!h){if(l.size>0)throw new r.mB(`Can't unroll loop: unknown limits (start=${i}, end=${a}). Code:\n\n${e}`);return e}let p=l.has(i)?l.get(i):parseInt(i),g=l.has(a)?l.get(a):parseInt(a),u=0==A.length?1:parseInt(A);s.A.assert(p<=g&&u>0);let f=null!==c.match(/\bbreak\s*;/)?"switch(1) { default:\n":"{\n";f+=`${t} ${n};\n`,g+="<="==o?1:0;for(let e=p;e<g;e+=u)f+=`{\n${n} = ${e};\n${c}\n}\n`;return f+="}\n",f}const I=Object.freeze({position:"a_position",texCoord:"a_texCoord"}),m=Object.freeze({position:0,texCoord:1}),_=`#version 300 es\nprecision highp float;\nprecision highp int;\n\nlayout (location=${m.position}) in vec2 ${I.position};\nlayout (location=${m.texCoord}) in vec2 ${I.texCoord};\nout highp vec2 texCoord;\nuniform highp vec2 texSize;\n\n#define vsinit() gl_Position = vec4(${I.position}, 0.0f, 1.0f); texCoord = ${I.texCoord};\n\n\n`,y="#define vsmain() ;",x=Symbol();class C{constructor(e,t,n,i,s){if(e!==x)throw new r.Er;this._arguments=[...t],this._defines=new Map(n),this._fragmentSource=g.generateGLSL(this._defines,i,'#version 300 es\n\n#if @FS_USE_CUSTOM_PRECISION@ == 0\nprecision mediump float; // ~float16\nprecision mediump sampler2D;\nprecision highp int; // int32\n#endif\n\n#if @FS_OUTPUT_TYPE@ == 0\n#define OUT_TYPE mediump vec4\n#elif @FS_OUTPUT_TYPE@ == 1\n#define OUT_TYPE mediump ivec4\n#elif @FS_OUTPUT_TYPE@ == 2\n#define OUT_TYPE mediump uvec4\n#else\n#error Unknown FS_OUTPUT_TYPE\n#endif\n\nout OUT_TYPE color;\nin highp vec2 texCoord;\nuniform highp vec2 texSize;\n\n@include "global.glsl"\n\n'),this._vertexSource=g.generateGLSL(this._defines,s,_,"\n\nvoid main() { vsinit(); vsmain(); }\n"),this._uniforms=this._autodetectUniforms(this._fragmentSource+"\n"+this._vertexSource),this._validateArguments(this._arguments,this._uniforms)}get fragmentSource(){return this._fragmentSource}get vertexSource(){return this._vertexSource}get attributes(){return I}get locationOfAttributes(){return m}get arguments(){return[].concat(this._arguments)}get uniforms(){return Array.from(this._uniforms.keys())}uniformType(e){if(!this._uniforms.has(e))throw new r.qw(`Unrecognized uniform variable: "${e}"`);return this._uniforms.get(e)}definedConstant(e){if(!this._defines.has(e))throw new r.qw(`Unrecognized externally defined constant: "${e}"`);return this._defines.get(e)}_autodetectUniforms(e){const t=e,n=/^\s*uniform\s+(highp\s+|mediump\s+|lowp\s+)?(\w+)\s+([^;]+)/gm,i=new Map;let s;for(;null!==(s=n.exec(t));){const e=s[2],t=s[3].split(",").map((e=>e.trim())).filter((e=>e));for(const n of t)if(n.endsWith("]")){if(!(s=n.match(/(\w+)\s*\[\s*(\d+)\s*\]$/)))throw new r.mB(`Unspecified array length for uniform "${n}" in the shader`);const[t,o]=[s[1],Number(s[2])];for(let n=0;n<o;n++)i.set(`${t}[${n}]`,e)}else{if(i.has(n)&&i.get(n)!==e)throw new r.Er(`Redefinition of uniform "${n}" in the shader`);i.set(n,e)}}return i}_validateArguments(e,t){for(const n of e)if(!t.has(n)&&!t.has(n+"[0]"))throw new r.qw(`Argument "${n}" has not been declared in the shader`)}}class E extends C{constructor(e,t,n,i,s=y){super(e,t,n,i,s),this._fsUnprocessedSource=String(i),this._vsUnprocessedSource=String(s)}}class S extends C{constructor(e,t,i,s,o=""){if(!String(s).match(/^[a-zA-Z0-9_\-/]+\.glsl$/))throw new r.kG(`Can't import fragment shader at "${s}"`);if(""!=o&&!String(o).match(/^[a-zA-Z0-9_\-/]+\.vs\.glsl$/))throw new r.kG(`Can't import vertex shader at "${o}"`);super(e,t,i,n(4606)("./"+String(s)),""!=o?n(4606)("./"+String(o)):y),this._fsFilepath=String(s),this._vsFilepath=String(o)}}class P{constructor(e){if(e!==x)throw new r.Er;this._arguments=[],this._defines=new Map}withArguments(...e){if(this._arguments.length>0)throw new r.Er("Redefinition of shader arguments");for(let t=0;t<e.length;t++)this._arguments.push(String(e[t]));return this}withDefines(e){if(this._defines.size>0)throw new r.Er("Redefinition of externally defined constants of a shader");const t=Object.keys(e);for(const n of t){const t=Number(e[n]);this._defines.set(n,t)}return this}build(){throw new r.aQ}}class v extends P{constructor(e,t,n){super(e),this._fsSource=String(t),this._vsSource=void 0!==n?String(n):void 0}build(){return new E(x,this._arguments,this._defines,this._fsSource,this._vsSource)}}class w extends P{constructor(e,t,n){super(e),this._fsFilepath=String(t),this._vsFilepath=void 0!==n?String(n):void 0}build(){return new S(x,this._arguments,this._defines,this._fsFilepath,this._vsFilepath)}}function B(e,t=void 0){return new w(x,e,t)}function b(e,t=void 0){return new v(x,e,t)}},5282:(e,t,n)=>{"use strict";n.r(t),n.d(t,{conv2D:()=>r,convX:()=>a,convY:()=>A});var i=n(3112),s=n(2191),o=n(5619);function r(e,t=1){const n=new Float32Array(e.map((e=>+e*+t))),r=0|Math.sqrt(n.length),a=r>>1;if(r<1||r%2==0)throw new o.qw(`Can't perform a 2D convolution with an invalid kSize of ${r}`);if(r*r!=n.length)throw new o.qw(`Invalid 2D convolution kernel of ${n.length} elements (expected: square)`);const A=a<=7?"pixelAtShortOffset":"pixelAtLongOffset",c=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 result = vec4(0.0f);\n\n        ${l=(e,t,n)=>`\n        result += ${A}(image, ivec2(${0|-n}, ${0|-t})) * float(${+e});\n    `,s.A.cartesian(s.A.symmetricRange(a),s.A.symmetricRange(a)).map((e=>l(n[(e[0]+a)*r+(e[1]+a)],e[0],e[1]))).join("\n")}\n\n        color = vec4(result.rgb, alpha);\n    }\n    `;var l;return(0,i.gx)(c).withArguments("image")}function a(e,t=1){return c("x",e,t)}function A(e,t=1){return c("y",e,t)}function c(e,t,n=1){const r=new Float32Array(t.map((e=>+e*+n))),a=r.length,A=a>>1;if(a<1||a%2==0)throw new o.qw(`Can't perform a 1D convolution with an invalid kSize of ${a}`);if("x"!=e&&"y"!=e)throw new o.qw(`Can't perform 1D convolution: invalid axis "${e}"`);const c=A<=7?"pixelAtShortOffset":"pixelAtLongOffset",l=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 pixel = vec4(0.0f);\n\n        ${d=(t,n)=>"x"==e?`\n        pixel += ${c}(image, ivec2(${0|-n}, 0)) * float(${+t});\n    `:`\n        pixel += ${c}(image, ivec2(0, ${0|-n})) * float(${+t});\n    `,s.A.symmetricRange(A).reduce(((e,t)=>e+d(r[t+A],t)),"")}\n\n        color = vec4(pixel.rgb, alpha);\n    }\n    `;var d;return(0,i.gx)(l).withArguments("image")}},5235:(e,t,n)=>{var i={"./colors.glsl":8609,"./filters.glsl":4672,"./fixed-point.glsl":9778,"./float16.glsl":8710,"./global.glsl":2434,"./int32.glsl":439,"./keypoint-descriptors.glsl":8545,"./keypoint-matches.glsl":6762,"./keypoints.glsl":7639,"./math.glsl":431,"./platform.glsl":6822,"./pyramids.glsl":2728,"./subpixel.glsl":6823};function s(e){var t=o(e);return n(t)}function o(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}s.keys=function(){return Object.keys(i)},s.resolve=o,e.exports=s,s.id=5235},4606:(e,t,n)=>{var i={"./filters/convolution":5282,"./filters/convolution.js":5282,"./filters/convolution1d.glsl":8211,"./filters/convolution2d.glsl":7360,"./filters/fast-median.glsl":8191,"./filters/nightvision.glsl":4438,"./filters/normalize-image.glsl":5867,"./filters/rgb2grey.glsl":9252,"./include/colors.glsl":8609,"./include/filters.glsl":4672,"./include/fixed-point.glsl":9778,"./include/float16.glsl":8710,"./include/global.glsl":2434,"./include/int32.glsl":439,"./include/keypoint-descriptors.glsl":8545,"./include/keypoint-matches.glsl":6762,"./include/keypoints.glsl":7639,"./include/math.glsl":431,"./include/platform.glsl":6822,"./include/pyramids.glsl":2728,"./include/subpixel.glsl":6823,"./keypoints/allocate-descriptors.glsl":1341,"./keypoints/allocate-extra.glsl":7833,"./keypoints/apply-homography.glsl":2352,"./keypoints/bf-knn.glsl":7541,"./keypoints/clip-border.glsl":4868,"./keypoints/clip.glsl":5591,"./keypoints/distance-filter.glsl":191,"./keypoints/encode-keypoint-long-offsets.glsl":5467,"./keypoints/encode-keypoint-offsets.glsl":336,"./keypoints/encode-keypoint-positions.glsl":8968,"./keypoints/encode-keypoint-properties.glsl":1733,"./keypoints/encode-keypoints.glsl":9674,"./keypoints/encode-null-keypoints.glsl":2090,"./keypoints/fast.glsl":1855,"./keypoints/fast.vs.glsl":4824,"./keypoints/hamming-distance-filter.glsl":2381,"./keypoints/harris-cutoff.glsl":6060,"./keypoints/harris.glsl":9974,"./keypoints/knn-init.glsl":3047,"./keypoints/knn-transfer.glsl":3266,"./keypoints/laplacian.glsl":8018,"./keypoints/lk.glsl":3168,"./keypoints/lookup-of-locations.glsl":3890,"./keypoints/lookup-of-locations.vs.glsl":8647,"./keypoints/lsh-knn.glsl":4776,"./keypoints/mix-keypoints.glsl":2648,"./keypoints/nonmax-scale.glsl":8825,"./keypoints/nonmax-space.glsl":5693,"./keypoints/nonmax-suppression.glsl":9280,"./keypoints/orb-descriptor.glsl":9108,"./keypoints/orb-orientation.glsl":7137,"./keypoints/refine-scale.glsl":9739,"./keypoints/score-findmax.glsl":8231,"./keypoints/shuffle.glsl":2518,"./keypoints/sort-keypoints.glsl":8096,"./keypoints/subpixel-refinement.glsl":5795,"./keypoints/transfer-flow.glsl":3169,"./keypoints/transfer-orientation.glsl":1337,"./keypoints/transfer-to-extra.glsl":6187,"./keypoints/upload-keypoints.glsl":477,"./pyramids/downsample2.glsl":4050,"./pyramids/upsample2.glsl":5545,"./transforms/additive-mix.glsl":7113,"./transforms/resize.glsl":1202,"./transforms/warp-perspective.glsl":7971,"./utils/copy-components.glsl":6122,"./utils/copy-raster.glsl":371,"./utils/copy.glsl":7307,"./utils/fill-components.glsl":8614,"./utils/fill.glsl":6271,"./utils/flip-y.vs.glsl":3016,"./utils/scan-minmax2d.glsl":3630,"./utils/sobel-derivatives.glsl":8508,"./utils/sobel-derivatives.vs.glsl":8073};function s(e){var t=o(e);return n(t)}function o(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}s.keys=function(){return Object.keys(i)},s.resolve=o,e.exports=s,s.id=4606},1567:(e,t,n)=>{"use strict";n.d(t,{c:()=>d});var i=n(2191),s=n(5637),o=n(4109),r=n(8902),a=n(5619);const A=Symbol();let c=null,l="default";class d extends o.c{constructor(e){i.A.assert(e===A),super(),this._reinitializeOnContextLoss=!0,this._canvas=this._createCanvas(this._reinitialize.bind(this)),this._gl=this._createContext(this._canvas),this._vendor="",this._renderer="",this._readDriverInfo(),"diagnostic"===s.w.logging&&this._logDriverInfo()}static get instance(){return c||(c=new d(A))}get gl(){return this._gl}get canvas(){return this._canvas}get renderer(){return this._renderer}get vendor(){return this._vendor}_createCanvas(e){const t=i.A.createCanvas(16,16);return t.addEventListener("webglcontextlost",(t=>{i.A.warning("Lost WebGL2 context"),setTimeout(e,0),t.preventDefault()}),!1),t}_createContext(e){if(i.A.log(`Creating a ${l} WebGL2 rendering context...`),"undefined"==typeof WebGL2RenderingContext)throw new a.EM("This application requires WebGL2. Please use a different browser.");const t=e.getContext("webgl2",{premultipliedAlpha:!1,preserveDrawingBuffer:!1,powerPreference:l,alpha:!0,antialias:!1,depth:!1,stencil:!1,desynchronized:!0});if(!t)throw new a.EM("Can't create a WebGL2 Rendering Context. Try a different browser!");return t}_reinitialize(){this._reinitializeOnContextLoss&&(i.A.warning("Reinitializing WebGL2..."),this._canvas.remove(),this._canvas=this._createCanvas(this._reinitialize.bind(this)),this._gl=this._createContext(this._canvas),this._readDriverInfo(),this._notify())}_readDriverInfo(){const e=this._gl;let t=null;navigator.userAgent.includes("Firefox")?(this._vendor="",this._renderer=e.getParameter(e.RENDERER)):null!=(t=e.getExtension("WEBGL_debug_renderer_info"))?(this._vendor=e.getParameter(t.UNMASKED_VENDOR_WEBGL),this._renderer=e.getParameter(t.UNMASKED_RENDERER_WEBGL)):(this._vendor="",this._renderer="")}_logDriverInfo(){i.A.log("Platform: "+i.A.platformString()),i.A.log("GL vendor: "+this.vendor),i.A.log("GL renderer: "+this.renderer)}loseContext(){const e=this._gl,t=e.getExtension("WEBGL_lose_context");if(!t)throw new a.EM("WEBGL_lose_context extension is unavailable");return e.isContextLost()||(this._reinitializeOnContextLoss=!1,t.loseContext()),t}loseAndRestoreContext(e=1){const t=1e3*Math.max(e,0),n=this.loseContext();return new r.i((e=>{setTimeout((()=>{this._reinitializeOnContextLoss=!0,this._reinitialize(),setTimeout((()=>e(n)),0)}),t)}))}static get powerPreference(){return l}static set powerPreference(e){if("default"!==e&&"low-power"!==e&&"high-performance"!==e)throw new a.qw(`Invalid powerPreference: "${e}"`);null!=c&&l===e||(l=e,null!=c&&c.loseAndRestoreContext())}static isInitialized(){return null!=c}}},5619:(e,t,n)=>{"use strict";n.d(t,{EM:()=>s,Er:()=>A,FJ:()=>d,MU:()=>h,NO:()=>f,Uk:()=>u,aQ:()=>r,kG:()=>l,l:()=>c,mB:()=>p,pf:()=>g,qw:()=>a,wB:()=>o,xB:()=>i});class i extends Error{constructor(e,t=null){super([e,t?t.toString():"[speedy-vision.js]"].join("\n-> ")),this._cause=t}get name(){return this.constructor.name}set name(e){}get cause(){return this._cause}}class s extends i{constructor(e="",t=null){super(`Unsupported operation. ${e}`,t)}}class o extends i{constructor(e="",t=null){super(`WebGL error. ${e}`,t)}static from(e){const t=e.getError(),n=["NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL"].find((n=>e[n]==t))||"Unknown";return new o(n)}}class r extends i{constructor(e="",t=null){super(`Can't call abstract method. ${e}`,t)}}class a extends i{constructor(e="",t=null){super(`Illegal argument. ${e}`,t)}}class A extends i{constructor(e="",t=null){super(`Illegal operation. ${e}`,t)}}class c extends i{constructor(e="",t=null){super(`Out of memory. ${e}`,t)}}class l extends i{constructor(e="",t=null){super(`File not found. ${e}`,t)}}class d extends i{constructor(e="",t=null){super(`Resource not loaded. ${e}`,t)}}class h extends i{constructor(e="",t=null){super(`Timeout error. ${e}`,t)}}class p extends i{constructor(e="",t=null){super(`Parse error. ${e}`,t)}}class g extends i{constructor(e="",t=null){super(`Assertion failed. ${e}`,t)}}class u extends i{constructor(e="",t=null){super(`Access denied. ${e}`,t)}}class f extends i{constructor(e="",t=null){super(`WebAssembly error. ${e}`,t)}}},1814:(e,t,n)=>{"use strict";n.r(t),n.d(t,{DEFAULT_ENCODER_CAPACITY:()=>h,FIX_BITS:()=>r,FIX_RESOLUTION:()=>a,LITTLE_ENDIAN:()=>_,LOG2_MAX_DESCRIPTOR_SIZE:()=>p,LOG2_PYRAMID_MAX_SCALE:()=>s,MATCH_INDEX_BITS:()=>u,MATCH_INDEX_MASK:()=>f,MATCH_MAX_DISTANCE:()=>m,MATCH_MAX_INDEX:()=>I,MAX_DESCRIPTOR_SIZE:()=>g,MAX_ENCODER_CAPACITY:()=>d,MAX_TEXTURE_LENGTH:()=>A,MIN_ENCODER_LENGTH:()=>l,MIN_KEYPOINT_SIZE:()=>c,PYRAMID_MAX_LEVELS:()=>i,PYRAMID_MAX_SCALE:()=>o});const i=8,s=0,o=1<<s,r=3,a=1<<r,A=(1<<16-r)-1,c=8,l=2,d=8192,h=2048,p=6,g=1<<p,u=32-(p+3),f=(1<<u)-1,I=(1<<u)-1,m=(1<<32-u)-1,_=51966===new Uint16Array(new Uint8Array([254,202]).buffer)[0]},4109:(e,t,n)=>{"use strict";n.d(t,{c:()=>i});class i{constructor(){this._subscribers=[],this._thisptr=[],this._args=[]}subscribe(e,t,...n){this._subscribers.push(e),this._thisptr.push(t),this._args.push(n)}unsubscribe(e,t){for(let n=this._subscribers.length-1;n>=0;n--)if(this._subscribers[n]===e&&this._thisptr[n]===t){this._subscribers.splice(n,1),this._thisptr.splice(n,1),this._args.splice(n,1);break}}_notify(){for(let e=0;e<this._subscribers.length;e++)this._subscribers[e].apply(this._thisptr[e],this._args[e])}}},6467:(e,t,n)=>{"use strict";n.d(t,{f5:()=>s,kQ:()=>o,kg:()=>r,zu:()=>i});const i=Object.freeze({Image:Symbol("Image"),Video:Symbol("Video"),Canvas:Symbol("Canvas"),OffscreenCanvas:Symbol("OffscreenCanvas"),Bitmap:Symbol("Bitmap"),Data:Symbol("Data")}),s=Object.freeze({RGBA:Symbol("RGBA"),GREY:Symbol("GREY")}),o=Object.freeze({RED:1,GREEN:2,BLUE:4,ALPHA:8,ALL:15}),r=Object.freeze({[o.RED]:0,[o.GREEN]:1,[o.BLUE]:2,[o.ALPHA]:3})},2191:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});var i=n(5619),s=n(8902),o=n(5637);class r{static warning(e,...t){"none"!==o.w.logging&&console.warn("[speedy-vision] "+e,...t)}static log(e,...t){"none"!==o.w.logging&&console.log("[speedy-vision] "+e,...t)}static assert(e,t=""){if(!e)throw new i.pf(t)}static functionArguments(e){const t=e.toString(),n=t.startsWith("function")?"function\\s.*\\(([^)]*)\\)":t.startsWith("(")?"\\(([^)]*)\\).*=>":"([^=]+).*=>",s=new RegExp(n).exec(t);if(null!==s)return s[1].replace(/\/\*.*?\*\//g,"").split(",").map((e=>e.replace(/=.*$/,"").trim())).filter((e=>e));throw new i.mB(`Can't detect function arguments of ${t}`)}static getAllPropertyDescriptors(e){if(e){const t=Object.getPrototypeOf(e);return{...r.getAllPropertyDescriptors(t),...Object.getOwnPropertyDescriptors(e)}}return Object.create(null)}static createCanvas(e,t){const n=document.createElement("canvas");return n.width=e,n.height=t,n}static gaussianKernel(e,t=0,n=!0){if(0==t&&(t=0|Math.ceil(5*e),t+=1-t%2),(t|=0)<1||t%2==0)throw new i.qw(`Invalid kernel size given to gaussianKernel: ${t} x 1`);if(e<=0)throw new i.qw(`Invalid sigma given to gaussianKernel: ${e}`);const s=new Array(t),o=t>>1,r=1.4142135623730951*+e,a=.3275911,A=.254829592,c=-.284496736,l=1.421413741,d=-1.453152027,h=1.061405429;let p=0;for(let e=0;e<t;e++){let t=(e-o+.5)/r,n=(e-o-.5)/r,i=1,g=1;t<0&&(i=-1,t=-t),n<0&&(g=-1,n=-n);const u=1/(1+a*t),f=1/(1+a*n),I=((((h*f+d)*f+l)*f+c)*f+A)*f,m=(i*(1-((((h*u+d)*u+l)*u+c)*u+A)*u*Math.exp(-t*t))-g*(1-I*Math.exp(-n*n)))/(2*r);s[e]=m,p+=m}if(n)for(let e=0;e<t;e++)s[e]/=p;return s}static kernel2d(e,t=e){const n=e.length;r.assert(e.length==e.length),r.assert(n>=1&&n%2==1);let i=new Array(n*n),s=0;for(let o=0;o<n;o++)for(let r=0;r<n;r++)i[s++]=e[r]*t[o];return i}static cartesian(e,t){return[].concat(...e.map((e=>t.map((t=>[e,t])))))}static symmetricRange(e){if((e|=0)<0)throw new i.qw("Expected a non-negative integer as input");return[...Array(2*e+1).keys()].map((t=>t-e))}static range(e){if((e|=0)<=0)throw new i.qw("Expected a positive integer as input");return[...Array(e).keys()]}static shuffle(e){const t=e.length,n=t-1;for(let i=0;i<n;i++){const n=i+(Math.random()*(t-i)|0);if(i!==n){const t=e[i];e[i]=e[n],e[n]=t}}return e}static flatten(e){const t=[];for(let n=0,i=e.length;n<i;n++){const i=e[n];if(Array.isArray(i))for(let e=0,n=i.length;e<n;e++)t.push(i[e]);else t.push(i)}return t}static decodeFloat16(e){const t=(32767&e)>>10,n=1023&e,i=1-2*((65535&e)>>15);return 0==t?0==n?0*i:i*n*5.960464477539063e-8:31==t?0==n?i*Number.POSITIVE_INFINITY:Number.NaN:i*(t>=15?1<<t-15:1/(1<<15-t))*(1+.0009765625*n)}static requestCameraStream(e={audio:!1,video:!0}){if(r.log("Accessing the webcam..."),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new i.EM("Unsupported browser: no mediaDevices.getUserMedia()");return new s.i(((t,n)=>{navigator.mediaDevices.getUserMedia(e).then((n=>{const i=document.createElement("video");i.onloadedmetadata=()=>{i.play(),r.log(`The camera is on! Resolution: ${i.videoWidth} x ${i.videoHeight}`),t(i)},i.setAttribute("playsinline",""),i.setAttribute("autoplay",""),!1!==e.audio&&void 0!==e.audio||i.setAttribute("muted",""),i.srcObject=n})).catch((t=>{"NotAllowedError"===t.name?n(new i.Uk("Please give access to the camera and reload the page.",t)):"OverconstrainedError"===t.name||"NotFoundError"===t.name?n(new i.EM(`Can't access the webcam with the requested constraints: ${JSON.stringify(e)}.`,t)):n(new i.xB("Can't access the webcam.",t))}))}))}static formatBinaryData(e){const t=new Uint8Array(e);return Array.from(t,(e=>e.toString(16).padStart(2,"0"))).join(" ")}static platformString(){return"object"==typeof navigator.userAgentData?navigator.userAgentData.platform:navigator.platform}}},8211:e=>{e.exports="#if !defined(KERNEL_SIZE) || !defined(AXIS) || (AXIS != 0 && AXIS != 1)\n#error Undefined KERNEL_SIZE / AXIS\n#endif\nuniform sampler2D image;\nuniform float kernel[@KERNEL_SIZE@];\nconst ivec2 axis = ivec2(1-AXIS, AXIS);\n#define S(x,k) result += pixelAtShortOffset(image, ivec2((x),(x)) * axis) * kernel[k]\nvoid main()\n{\nvec4 result = vec4(0.0f);\n#if KERNEL_SIZE == 3\nS(-1, 2);\nS( 0, 1);\nS( 1, 0);\n#elif KERNEL_SIZE == 5\nS(-2, 4);\nS(-1, 3);\nS( 0, 2);\nS( 1, 1);\nS( 2, 0);\n#elif KERNEL_SIZE == 7\nS(-3, 6);\nS(-2, 5);\nS(-1, 4);\nS( 0, 3);\nS( 1, 2);\nS( 2, 1);\nS( 3, 0);\n#elif KERNEL_SIZE == 9\nS(-4, 8);\nS(-3, 7);\nS(-2, 6);\nS(-1, 5);\nS( 0, 4);\nS( 1, 3);\nS( 2, 2);\nS( 3, 1);\nS( 4, 0);\n#elif KERNEL_SIZE == 11\nS(-5, 10);\nS(-4, 9);\nS(-3, 8);\nS(-2, 7);\nS(-1, 6);\nS( 0, 5);\nS( 1, 4);\nS( 2, 3);\nS( 3, 2);\nS( 4, 1);\nS( 5, 0);\n#elif KERNEL_SIZE == 13\nS(-6, 12);\nS(-5, 11);\nS(-4, 10);\nS(-3, 9);\nS(-2, 8);\nS(-1, 7);\nS( 0, 6);\nS( 1, 5);\nS( 2, 4);\nS( 3, 3);\nS( 4, 2);\nS( 5, 1);\nS( 6, 0);\n#elif KERNEL_SIZE == 15\nS(-7, 14);\nS(-6, 13);\nS(-5, 12);\nS(-4, 11);\nS(-3, 10);\nS(-2, 9);\nS(-1, 8);\nS( 0, 7);\nS( 1, 6);\nS( 2, 5);\nS( 3, 4);\nS( 4, 3);\nS( 5, 2);\nS( 6, 1);\nS( 7, 0);\n#else\n#error Invalid parameters\n#endif\ncolor = vec4(result.rgb, 1.0f);\n}"},7360:e=>{e.exports="#ifndef KERNEL_SIZE_SQUARED\n#error Must define KERNEL_SIZE_SQUARED\n#endif\nuniform sampler2D image;\nuniform float kernel[@KERNEL_SIZE_SQUARED@];\n#define S(x,y,k) result += pixelAtShortOffset(image, ivec2((x),(y))) * kernel[k]\nvoid main()\n{\nvec4 result = vec4(0.0f);\n#if KERNEL_SIZE_SQUARED == 9\nS(-1,-1, 8);\nS(-1, 0, 7);\nS(-1, 1, 6);\nS( 0,-1, 5);\nS( 0, 0, 4);\nS( 0, 1, 3);\nS( 1,-1, 2);\nS( 1, 0, 1);\nS( 1, 1, 0);\n#elif KERNEL_SIZE_SQUARED == 25\nS(-2,-2, 24);\nS(-2,-1, 23);\nS(-2, 0, 22);\nS(-2, 1, 21);\nS(-2, 2, 20);\nS(-1,-2, 19);\nS(-1,-1, 18);\nS(-1, 0, 17);\nS(-1, 1, 16);\nS(-1, 2, 15);\nS( 0,-2, 14);\nS( 0,-1, 13);\nS( 0, 0, 12);\nS( 0, 1, 11);\nS( 0, 2, 10);\nS( 1,-2, 9);\nS( 1,-1, 8);\nS( 1, 0, 7);\nS( 1, 1, 6);\nS( 1, 2, 5);\nS( 2,-2, 4);\nS( 2,-1, 3);\nS( 2, 0, 2);\nS( 2, 1, 1);\nS( 2, 2, 0);\n#elif KERNEL_SIZE_SQUARED == 49\nS(-3,-3, 48);\nS(-3,-2, 47);\nS(-3,-1, 46);\nS(-3, 0, 45);\nS(-3, 1, 44);\nS(-3, 2, 43);\nS(-3, 3, 42);\nS(-2,-3, 41);\nS(-2,-2, 40);\nS(-2,-1, 39);\nS(-2, 0, 38);\nS(-2, 1, 37);\nS(-2, 2, 36);\nS(-2, 3, 35);\nS(-1,-3, 34);\nS(-1,-2, 33);\nS(-1,-1, 32);\nS(-1, 0, 31);\nS(-1, 1, 30);\nS(-1, 2, 29);\nS(-1, 3, 28);\nS( 0,-3, 27);\nS( 0,-2, 26);\nS( 0,-1, 25);\nS( 0, 0, 24);\nS( 0, 1, 23);\nS( 0, 2, 22);\nS( 0, 3, 21);\nS( 1,-3, 20);\nS( 1,-2, 19);\nS( 1,-1, 18);\nS( 1, 0, 17);\nS( 1, 1, 16);\nS( 1, 2, 15);\nS( 1, 3, 14);\nS( 2,-3, 13);\nS( 2,-2, 12);\nS( 2,-1, 11);\nS( 2, 0, 10);\nS( 2, 1, 9);\nS( 2, 2, 8);\nS( 2, 3, 7);\nS( 3,-3, 6);\nS( 3,-2, 5);\nS( 3,-1, 4);\nS( 3, 0, 3);\nS( 3, 1, 2);\nS( 3, 2, 1);\nS( 3, 3, 0);\n#else\n#error Invalid KERNEL_SIZE_SQUARED\n#endif\ncolor = vec4(result.rgb, 1.0f);\n}"},8191:e=>{e.exports="uniform sampler2D image;\n#define X(i,j) t = vec2(min(p[i], p[j]), max(p[i], p[j])); p[i] = t.x; p[j] = t.y;\n#define S(i,x,y) p[i] = pixelAtShortOffset(image, ivec2((x),(y))).g\nvoid main()\n{\nfloat median;\nvec2 t;\n#if !defined(KERNEL_SIZE)\n#error Must define KERNEL_SIZE\n#elif KERNEL_SIZE == 3\nfloat p[9];\nS(0,-1,-1);\nS(1, 0,-1);\nS(2, 1,-1);\nS(3,-1, 0);\nS(4, 0, 0);\nS(5, 1, 0);\nS(6,-1, 1);\nS(7, 0, 1);\nS(8, 1, 1);\nX(1,2);X(4,5);X(7,8);X(0,1);X(3,4);X(6,7);X(1,2);X(4,5);X(7,8);X(0,3);X(5,8);X(4,7);X(3,6);X(1,4);X(2,5);X(4,7);X(4,2);X(6,4);X(4,2);\nmedian = p[4];\n#elif KERNEL_SIZE == 5\nfloat p[25];\nS( 0,-2,-2);\nS( 1,-1,-2);\nS( 2, 0,-2);\nS( 3, 1,-2);\nS( 4, 2,-2);\nS( 5,-2,-1);\nS( 6,-1,-1);\nS( 7, 0,-1);\nS( 8, 1,-1);\nS( 9, 2,-1);\nS(10,-2, 0);\nS(11,-1, 0);\nS(12, 0, 0);\nS(13, 1, 0);\nS(14, 2, 0);\nS(15,-2, 1);\nS(16,-1, 1);\nS(17, 0, 1);\nS(18, 1, 1);\nS(19, 2, 1);\nS(20,-2, 2);\nS(21,-1, 2);\nS(22, 0, 2);\nS(23, 1, 2);\nS(24, 2, 2);\nX(0,1);X(3,4);X(2,4);X(2,3);X(6,7);X(5,7);X(5,6);X(9,10);X(8,10);X(8,9);X(12,13);X(11,13);X(11,12);X(15,16);X(14,16);X(14,15);X(18,19);X(17,19);X(17,18);X(21,22);X(20,22);X(20,21);X(23,24);X(2,5);X(3,6);X(0,6);X(0,3);X(4,7);X(1,7);X(1,4);X(11,14);X(8,14);X(8,11);X(12,15);X(9,15);X(9,12);X(13,16);X(10,16);X(10,13);X(20,23);X(17,23);X(17,20);X(21,24);X(18,24);X(18,21);X(19,22);X(8,17);X(9,18);X(0,18);X(0,9);X(10,19);X(1,19);X(1,10);X(11,20);X(2,20);X(2,11);X(12,21);X(3,21);X(3,12);X(13,22);X(4,22);X(4,13);X(14,23);X(5,23);X(5,14);X(15,24);X(6,24);X(6,15);X(7,16);X(7,19);X(13,21);X(15,23);X(7,13);X(7,15);X(1,9);X(3,11);X(5,17);X(11,17);X(9,17);X(4,10);X(6,12);X(7,14);X(4,6);X(4,7);X(12,14);X(10,14);X(6,7);X(10,12);X(6,10);X(6,17);X(12,17);X(7,17);X(7,10);X(12,18);X(7,12);X(10,18);X(12,20);X(10,20);X(10,12);\nmedian = p[12];\n#elif KERNEL_SIZE == 7\nfloat p[49];\nS( 0,-3,-3);\nS( 1,-2,-3);\nS( 2,-1,-3);\nS( 3, 0,-3);\nS( 4, 1,-3);\nS( 5, 2,-3);\nS( 6, 3,-3);\nS( 7,-3,-2);\nS( 8,-2,-2);\nS( 9,-1,-2);\nS(10, 0,-2);\nS(11, 1,-2);\nS(12, 2,-2);\nS(13, 3,-2);\nS(14,-3,-1);\nS(15,-2,-1);\nS(16,-1,-1);\nS(17, 0,-1);\nS(18, 1,-1);\nS(19, 2,-1);\nS(20, 3,-1);\nS(21,-3, 0);\nS(22,-2, 0);\nS(23,-1, 0);\nS(24, 0, 0);\nS(25, 1, 0);\nS(26, 2, 0);\nS(27, 3, 0);\nS(28,-3, 1);\nS(29,-2, 1);\nS(30,-1, 1);\nS(31, 0, 1);\nS(32, 1, 1);\nS(33, 2, 1);\nS(34, 3, 1);\nS(35,-3, 2);\nS(36,-2, 2);\nS(37,-1, 2);\nS(38, 0, 2);\nS(39, 1, 2);\nS(40, 2, 2);\nS(41, 3, 2);\nS(42,-3, 3);\nS(43,-2, 3);\nS(44,-1, 3);\nS(45, 0, 3);\nS(46, 1, 3);\nS(47, 2, 3);\nS(48, 3, 3);\nX(0,1);X(2,3);X(0,2);X(1,3);X(1,2);X(4,5);X(6,7);X(4,6);X(5,7);X(5,6);X(0,4);X(2,6);X(2,4);X(1,5);X(3,7);X(3,5);X(1,2);X(3,4);X(5,6);X(8,9);X(10,11);X(8,10);X(9,11);X(9,10);X(12,13);X(14,15);X(12,14);X(13,15);X(13,14);X(8,12);X(10,14);X(10,12);X(9,13);X(11,15);X(11,13);X(9,10);X(11,12);X(13,14);X(0,8);X(4,12);X(4,8);X(2,10);X(6,14);X(6,10);X(2,4);X(6,8);X(10,12);X(1,9);X(5,13);X(5,9);X(3,11);X(7,15);X(7,11);X(3,5);X(7,9);X(11,13);X(1,2);X(3,4);X(5,6);X(7,8);X(9,10);X(11,12);X(13,14);X(16,17);X(18,19);X(16,18);X(17,19);X(17,18);X(20,21);X(22,23);X(20,22);X(21,23);X(21,22);X(16,20);X(18,22);X(18,20);X(17,21);X(19,23);X(19,21);X(17,18);X(19,20);X(21,22);X(24,25);X(26,27);X(24,26);X(25,27);X(25,26);X(28,29);X(30,31);X(28,30);X(29,31);X(29,30);X(24,28);X(26,30);X(26,28);X(25,29);X(27,31);X(27,29);X(25,26);X(27,28);X(29,30);X(16,24);X(20,28);X(20,24);X(18,26);X(22,30);X(22,26);X(18,20);X(22,24);X(26,28);X(17,25);X(21,29);X(21,25);X(19,27);X(23,31);X(23,27);X(19,21);X(23,25);X(27,29);X(17,18);X(19,20);X(21,22);X(23,24);X(25,26);X(27,28);X(29,30);X(0,16);X(8,24);X(8,16);X(4,20);X(12,28);X(12,20);X(4,8);X(12,16);X(20,24);X(2,18);X(10,26);X(10,18);X(6,22);X(14,30);X(14,22);X(6,10);X(14,18);X(22,26);X(2,4);X(6,8);X(10,12);X(14,16);X(18,20);X(22,24);X(26,28);X(1,17);X(9,25);X(9,17);X(5,21);X(13,29);X(13,21);X(5,9);X(13,17);X(21,25);X(3,19);X(11,27);X(11,19);X(7,23);X(15,31);X(15,23);X(7,11);X(15,19);X(23,27);X(3,5);X(7,9);X(11,13);X(15,17);X(19,21);X(23,25);X(27,29);X(1,2);X(3,4);X(5,6);X(7,8);X(9,10);X(11,12);X(13,14);X(15,16);X(17,18);X(19,20);X(21,22);X(23,24);X(25,26);X(27,28);X(29,30);X(32,33);X(34,35);X(32,34);X(33,35);X(33,34);X(36,37);X(38,39);X(36,38);X(37,39);X(37,38);X(32,36);X(34,38);X(34,36);X(33,37);X(35,39);X(35,37);X(33,34);X(35,36);X(37,38);X(40,41);X(42,43);X(40,42);X(41,43);X(41,42);X(44,45);X(46,47);X(44,46);X(45,47);X(45,46);X(40,44);X(42,46);X(42,44);X(41,45);X(43,47);X(43,45);X(41,42);X(43,44);X(45,46);X(32,40);X(36,44);X(36,40);X(34,42);X(38,46);X(38,42);X(34,36);X(38,40);X(42,44);X(33,41);X(37,45);X(37,41);X(35,43);X(39,47);X(39,43);X(35,37);X(39,41);X(43,45);X(33,34);X(35,36);X(37,38);X(39,40);X(41,42);X(43,44);X(45,46);X(32,48);X(40,48);X(36,40);X(44,48);X(38,42);X(34,36);X(38,40);X(42,44);X(46,48);X(37,41);X(39,43);X(35,37);X(39,41);X(43,45);X(33,34);X(35,36);X(37,38);X(39,40);X(41,42);X(43,44);X(45,46);X(47,48);X(0,32);X(16,48);X(16,32);X(8,40);X(24,40);X(8,16);X(24,32);X(40,48);X(4,36);X(20,36);X(12,44);X(28,44);X(12,20);X(28,36);X(4,8);X(12,16);X(20,24);X(28,32);X(36,40);X(44,48);X(2,34);X(18,34);X(10,42);X(26,42);X(10,18);X(26,34);X(6,38);X(22,38);X(14,46);X(30,46);X(14,22);X(30,38);X(6,10);X(14,18);X(22,26);X(30,34);X(38,42);X(2,4);X(6,8);X(10,12);X(14,16);X(18,20);X(22,24);X(26,28);X(30,32);X(34,36);X(38,40);X(42,44);X(46,48);X(1,33);X(17,33);X(9,41);X(25,41);X(9,17);X(25,33);X(5,37);X(21,37);X(13,45);X(29,45);X(13,21);X(29,37);X(5,9);X(13,17);X(21,25);X(29,33);X(37,41);X(3,35);X(19,35);X(11,43);X(27,43);X(11,19);X(27,35);X(7,39);X(23,39);X(15,47);X(31,47);X(15,23);X(31,39);X(7,11);X(15,19);X(23,27);X(31,35);X(39,43);X(3,5);X(7,9);X(11,13);X(15,17);X(19,21);X(23,25);X(27,29);X(31,33);X(35,37);X(39,41);X(43,45);X(1,2);X(3,4);X(5,6);X(7,8);X(9,10);X(11,12);X(13,14);X(15,16);X(17,18);X(19,20);X(21,22);X(23,24);\nmedian = p[24];\n#else\n#error Unsupported kernel size\n#endif\ncolor = vec4(median, median, median, 1.0f);\n}"},4438:e=>{e.exports="uniform sampler2D image;\nuniform sampler2D illuminationMap;\nuniform float gain;\nuniform float offset;\nuniform float decay;\n#ifndef GREYSCALE\n#error Must define GREYSCALE\n#endif\n#if GREYSCALE == 0\nconst mat3 rgb2yuv = mat3(\n0.299f, -0.14713f, 0.615f,\n0.587f, -0.28886f, -0.51499f,\n0.114f, 0.436f, -0.10001f\n);\nconst mat3 yuv2rgb = mat3(\n1.0f, 1.0f, 1.0f,\n0.0f, -0.39465f, 2.03211f,\n1.13983f, -0.58060f, 0.0f\n);\n#endif\nconst float eps = 0.0001f;\nconst float sqrt2 = 1.4142135623730951f;\nconst float magic = 20.0f;\nconst vec2 center = vec2(0.5f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nvec4 imapPixel = threadPixel(illuminationMap);\nfloat lambda = -sqrt2 * log(max(1.0f - decay, eps));\nfloat dist = length(texCoord - center);\nfloat vgain = gain * exp(-lambda * dist);\nfloat normalizedGain = 2.0f * vgain;\nfloat normalizedOffset = 2.0f * offset - 1.0f;\n#if GREYSCALE != 0\nfloat luma = 1.0 / (1.0 + exp(-normalizedGain * magic * (pixel.g - imapPixel.g)));\nluma = clamp(luma + normalizedOffset, 0.0f, 1.0f);\ncolor = vec4(luma, luma, luma, 1.0f);\n#else\nvec3 yuvPixel = rgb2yuv * pixel.rgb;\nvec3 yuvImapPixel = rgb2yuv * imapPixel.rgb;\nfloat luma = 1.0 / (1.0 + exp(-normalizedGain * magic * (yuvPixel.r - yuvImapPixel.r)));\nluma += normalizedOffset;\nvec3 rgbCorrectedPixel = yuv2rgb * vec3(luma, yuvPixel.gb);\nrgbCorrectedPixel = clamp(rgbCorrectedPixel, 0.0f, 1.0f);\ncolor = vec4(rgbCorrectedPixel, 1.0f);\n#endif\n}"},5867:e=>{e.exports="#ifndef GREYSCALE\n#error Must define GREYSCALE\n#endif\n#if GREYSCALE != 0\nuniform sampler2D minmax2d;\n#else\nuniform sampler2D minmax2dRGB[3];\n#endif\nuniform float minValue;\nuniform float maxValue;\nconst float eps = 1.0f / 255.0f;\nvoid main()\n{\nvec2 minmax = clamp(vec2(minValue, maxValue), 0.0f, 255.0f) / 255.0f;\nvec4 newMin = vec4(minmax.x);\nvec4 newRange = vec4(minmax.y - minmax.x);\nvec4 alpha = vec4(1.0f, newMin.x, newRange.x, 1.0f);\n#if GREYSCALE != 0\nvec4 pixel = threadPixel(minmax2d);\nmat4 channel = mat4(pixel, pixel, pixel, alpha);\n#else\nmat4 channel = mat4(\nthreadPixel(minmax2dRGB[0]),\nthreadPixel(minmax2dRGB[1]),\nthreadPixel(minmax2dRGB[2]),\nalpha\n);\n#endif\nvec4 oldMin = vec4(channel[0].g, channel[1].g, channel[2].g, channel[3].g);\nvec4 oldRange = max(vec4(channel[0].b, channel[1].b, channel[2].b, channel[3].b), eps);\nvec4 oldIntensity = vec4(channel[0].a, channel[1].a, channel[2].a, channel[3].a);\nvec4 newIntensity = (oldIntensity - oldMin) * newRange / oldRange + newMin;\ncolor = newIntensity;\n}"},9252:e=>{e.exports="const vec4 grey = vec4(0.299f, 0.587f, 0.114f, 0.0f);\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat g = dot(pixel, grey);\ncolor = vec4(g, g, g, 1.0f);\n}"},8609:e=>{e.exports="#ifndef _COLORS_GLSL\n#define _COLORS_GLSL\n#define PIXELCOMPONENT_RED   @PIXELCOMPONENT_RED@\n#define PIXELCOMPONENT_GREEN @PIXELCOMPONENT_GREEN@\n#define PIXELCOMPONENT_BLUE  @PIXELCOMPONENT_BLUE@\n#define PIXELCOMPONENT_ALPHA @PIXELCOMPONENT_ALPHA@\n#endif"},4672:e=>{e.exports="#ifndef _FILTERS_GLSL\n#define _FILTERS_GLSL\nfloat laplacian(sampler2D pyramid, vec2 position, float lod)\n{\nfloat pot = exp2(lod);\nivec2 pyrBaseSize = textureSize(pyramid, 0);\nconst vec3 ones = vec3(1.0f);\nconst mat3 kernel = mat3(\n0,-1, 0,\n-1, 4,-1,\n0,-1, 0\n);\n#define LPC(x,y) pyrSubpixelAtExOffset(pyramid, position, lod, pot, ivec2((x),(y)), pyrBaseSize).g\nmat3 neighborhood = mat3(\n0.0f, LPC(0,-1), 0.0f,\nLPC(-1,0), LPC(0,0), LPC(1,0),\n0.0f, LPC(0,1), 0.0f\n);\nmat3 m = matrixCompMult(neighborhood, kernel);\nreturn dot(ones, vec3(\ndot(m[0], ones),\ndot(m[1], ones),\ndot(m[2], ones)\n)) * (1.0f + lod);\n}\n#endif"},9778:e=>{e.exports="#ifndef _FIXEDPOINT_GLSL\n#define _FIXEDPOINT_GLSL\n#define fixed_t int\n#define fixed2_t ivec2\nconst int FIX_BITS = int(@FIX_BITS@);\nconst float FIX_RESOLUTION = float(@FIX_RESOLUTION@);\n#define itofix(x) fixed_t((x) << FIX_BITS)\n#define fixtoi(f) int((x) >> FIX_BITS)\n#define ftofix(x) fixed_t((x) * FIX_RESOLUTION + 0.5f)\n#define fixtof(f) (float(f) / FIX_RESOLUTION)\n#define ivec2tofix(x) fixed2_t((x) << FIX_BITS)\n#define fixtoivec2(f) ivec2((f) >> FIX_BITS)\n#define vec2tofix(v) fixed2_t((v) * FIX_RESOLUTION + vec2(0.5f))\n#define fixtovec2(f) (vec2(f) / FIX_RESOLUTION)\n#endif"},8710:e=>{e.exports="#ifndef _FLOAT16_GLSL\n#define _FLOAT16_GLSL\n#define encodeFloat16(f) (vec2(packf16(f)) / 255.0f)\n#define decodeFloat16(v) unpackf16(uvec2((v) * 255.0f))\n#define encodePairOfFloat16(f) vec4(encodeFloat16((f).x), encodeFloat16((f).y))\n#define decodePairOfFloat16(v) vec2(decodeFloat16((v).rg), decodeFloat16((v).ba))\n#define encodeNullPairOfFloat16() vec4(1.0f)\n#define isNullPairOfFloat16(v) all(equal((v), encodeNullPairOfFloat16()))\n#define encodeDiscardedPairOfFloat16() vec4(0.0f, 1.0f, 0.0f, 1.0f)\n#define isDiscardedPairOfFloat16(v) all(equal((v), encodeDiscardedPairOfFloat16()))\n#define encodeFloat16NaN() vec2(0.5f, 1.0f)\n#define isEncodedFloat16NaN(v) all(equal((v), encodeFloat16NaN()))\nuvec2 packf16( float f)\n{\nuint y = packHalf2x16(vec2(f, 0.0f));\nreturn uvec2(y, y >> 8u) & 0xFFu;\n}\nfloat unpackf16(uvec2 v)\n{\nv &= 0xFFu;\nreturn unpackHalf2x16(v.x | (v.y << 8u)).x;\n}\nbool isEncodedFloat16Zero(vec2 v)\n{\nuvec2 w = uvec2(v * 255.0f);\nreturn 0u == w.x + w.y * (0x80u - w.y);\n}\n#endif"},2434:e=>{e.exports="#ifndef _GLOBAL_GLSL\n#define _GLOBAL_GLSL\n#define threadLocation() ivec2(texCoord * texSize)\n#define outputSize() ivec2(texSize)\n#define threadPixel(img) textureLod((img), texCoord, 0.0f)\n#define pixelAt(img, pos) texelFetch((img), (pos), 0)\n#define pixelAtShortOffset(img, offset) textureLodOffset((img), texCoord, 0.0f, (offset))\n#define pixelAtLongOffset(img, offset) textureLod((img), texCoord + vec2(offset) / texSize, 0.0f)\n#endif"},439:e=>{e.exports='#ifndef _INT32_GLSL\n#define _INT32_GLSL\n@include "platform.glsl"\nuint decodeUint32(vec4 rgba)\n{\nuvec4 v = uvec4(rgba * 255.0f) & 255u;\nreturn v.x | (v.y << 8u) | (v.z << 16u) | (v.w << 24u);\n}\nvec4 encodeUint32(uint value)\n{\n#if defined(APPLE_GPU) || (defined(APPLE) && defined(INTEL_GRAPHICS))\nuvec4 v = uvec4(value, value / 256u, value / 65536u, value / 16777216u) % 256u;\nreturn vec4(v) / 255.0f;\n#else\nuvec4 v = uvec4(value, value >> 8u, value >> 16u, value >> 24u) & 255u;\nreturn vec4(v) / 255.0f;\n#endif\n}\n#endif'},8545:e=>{e.exports="#ifndef _KEYPOINT_DESCRIPTORS_GLSL\n#define _KEYPOINT_DESCRIPTORS_GLSL\n#if !defined(DESCRIPTOR_SIZE)\n#error Must define DESCRIPTOR_SIZE\n#elif !defined(_KEYPOINTS_GLSL)\n#error Must include keypoints.glsl\n#endif\nuint[DESCRIPTOR_SIZE] readKeypointDescriptor(sampler2D encodedKeypoints, int descriptorSize, int extraSize, int encoderLength, KeypointAddress address)\n{\nint descriptorOffset = sizeofEncodedKeypoint(0, extraSize) / 4;\nKeypointAddress descriptorAddress = KeypointAddress(address.base, descriptorOffset);\nuint[DESCRIPTOR_SIZE] descriptor;\nvec4 pixel; uvec4 bytes;\n@unroll\nfor(int i = 0; i < DESCRIPTOR_SIZE; i += 4) {\npixel = readKeypointData(encodedKeypoints, encoderLength, descriptorAddress);\nbytes = uvec4(pixel * 255.0f);\ndescriptor[i]   = bytes.r;\ndescriptor[i+1] = bytes.g;\ndescriptor[i+2] = bytes.b;\ndescriptor[i+3] = bytes.a;\ndescriptorAddress.offset++;\n}\nreturn descriptor;\n}\nuint[DESCRIPTOR_SIZE] readKeypointDescriptorFromDB(sampler2D descriptorDB, int descriptorDBStride, int index)\n{\nuint[DESCRIPTOR_SIZE] descriptor;\nint rasterIndex = index * (DESCRIPTOR_SIZE / 4) * int(index >= 0);\nvec4 pixel; uvec4 bytes; ivec2 pos;\n@unroll\nfor(int i = 0; i < DESCRIPTOR_SIZE; i += 4) {\npos = ivec2(rasterIndex % descriptorDBStride, rasterIndex / descriptorDBStride);\npixel = (index >= 0) ? texelFetch(descriptorDB, pos, 0) : vec4(0.0f);\nbytes = uvec4(pixel * 255.0f);\ndescriptor[i]   = bytes.r;\ndescriptor[i+1] = bytes.g;\ndescriptor[i+2] = bytes.b;\ndescriptor[i+3] = bytes.a;\nrasterIndex++;\n}\nreturn descriptor;\n}\nint distanceBetweenKeypointDescriptors(uint[DESCRIPTOR_SIZE] a, uint[DESCRIPTOR_SIZE] b)\n{\nconst int[256] POPCNT = int[256](0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8);\nuvec4 xor, u, v;\nint dist = 0;\nivec4 bits;\n@unroll\nfor(int i = 0; i < DESCRIPTOR_SIZE; i += 4) {\nu = uvec4(a[i], a[i+1], a[i+2], a[i+3]);\nv = uvec4(b[i], b[i+1], b[i+2], b[i+3]);\nxor = (u ^ v) & 255u;\nbits = ivec4(POPCNT[xor.x], POPCNT[xor.y], POPCNT[xor.z], POPCNT[xor.w]);\ndist += bits.x + bits.y + bits.z + bits.w;\n}\nreturn dist;\n}\n#endif"},6762:e=>{e.exports='#ifndef _KEYPOINT_MATCHES_GLSL\n#define _KEYPOINT_MATCHES_GLSL\n@include "int32.glsl"\nconst int MATCH_INDEX_BITS = int(@MATCH_INDEX_BITS@);\nconst int MATCH_INDEX_MASK = int(@MATCH_INDEX_MASK@);\nconst int MATCH_MAX_INDEX = int(@MATCH_MAX_INDEX@);\nconst int MATCH_MAX_DISTANCE = int(@MATCH_MAX_DISTANCE@);\nstruct KeypointMatch\n{\nint index;\nint dist;\n};\nvec4 encodeKeypointMatch(KeypointMatch candidate)\n{\nuint index = uint(candidate.index) & uint(MATCH_INDEX_MASK);\nuint dist = uint(clamp(candidate.dist, 0, MATCH_MAX_DISTANCE));\nuint u32 = index | (dist << MATCH_INDEX_BITS);\nreturn encodeUint32(u32);\n}\nKeypointMatch decodeKeypointMatch(vec4 rgba)\n{\nuint u32 = decodeUint32(rgba);\nint dist = int(u32 >> MATCH_INDEX_BITS);\nint index = int(u32 & uint(MATCH_INDEX_MASK));\nreturn KeypointMatch(index, dist);\n}\nconst KeypointMatch MATCH_NOT_FOUND = KeypointMatch(MATCH_MAX_INDEX, MATCH_MAX_DISTANCE);\n#endif'},7639:e=>{e.exports='#ifndef _KEYPOINTS_GLSL\n#define _KEYPOINTS_GLSL\n@include "math.glsl"\n@include "fixed-point.glsl"\n@include "float16.glsl"\n@include "pyramids.glsl"\nstruct Keypoint\n{\nvec2 position;\nfloat lod;\nfloat orientation;\nfloat score;\nuint flags;\n};\nstruct KeypointAddress\n{\nint base;\nint offset;\n};\nconst int MIN_KEYPOINT_SIZE = int(@MIN_KEYPOINT_SIZE@);\nconst int MAX_DESCRIPTOR_SIZE = int(@MAX_DESCRIPTOR_SIZE@);\nconst uint KPF_NONE = 0u;\nconst uint KPF_NULL = 1u;\nconst uint KPF_DISCARDED = 2u;\n#define encodeKeypointScore(score) encodeFloat16(score)\n#define decodeKeypointScore(encodedScore) decodeFloat16(encodedScore)\n#define encodeKeypointOrientation(angle) ((angle) * INV_PI_OVER_2 + 0.5f)\n#define decodeKeypointOrientation(value) ((value) * TWO_PI - PI)\n#define encodeNullKeypoint() (vec4(1.0f))\n#define encodeDiscardedKeypoint() (vec4(0.0f))\n#define isNullKeypoint(keypoint) ((((keypoint).flags) & KPF_NULL) != 0u)\n#define isDiscardedKeypoint(keypoint) ((((keypoint).flags) & KPF_DISCARDED) != 0u)\n#define isBadKeypoint(keypoint) ((keypoint).score < 0.0f)\n#define sizeofEncodedKeypoint(descriptorSize, extraSize) (MIN_KEYPOINT_SIZE + (descriptorSize) + (extraSize))\n#define sizeofEncodedKeypointHeader() sizeofEncodedKeypoint(0,0)\n#define findKeypointIndex(address, descriptorSize, extraSize) ((address).base / ((sizeofEncodedKeypoint((descriptorSize), (extraSize))) / 4))\nvec4 readKeypointData(sampler2D encodedKeypoints, int encoderLength, KeypointAddress address)\n{\nint rasterIndex = address.base + address.offset;\nvec4 data = pixelAt(encodedKeypoints, ivec2(rasterIndex % encoderLength, rasterIndex / encoderLength));\nreturn rasterIndex < encoderLength * encoderLength ? data : encodeNullKeypoint();\n}\nKeypointAddress findKeypointAddress(ivec2 thread, int encoderLength, int descriptorSize, int extraSize)\n{\nint threadRaster = thread.y * encoderLength + thread.x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nint keypointIndex = int(threadRaster / pixelsPerKeypoint);\nKeypointAddress address = KeypointAddress(\nkeypointIndex * pixelsPerKeypoint,\nthreadRaster % pixelsPerKeypoint\n);\nreturn address;\n}\nKeypoint decodeKeypoint(sampler2D encodedKeypoints, int encoderLength, KeypointAddress address)\n{\nKeypoint keypoint;\nKeypointAddress positionAddress = KeypointAddress(address.base, 0);\nKeypointAddress propertiesAddress = KeypointAddress(address.base, 1);\nvec4 rawEncodedPosition = readKeypointData(encodedKeypoints, encoderLength, positionAddress);\nivec4 encodedPosition = ivec4(rawEncodedPosition * 255.0f);\nkeypoint.position = fixtovec2(fixed2_t(\nencodedPosition.r | (encodedPosition.g << 8),\nencodedPosition.b | (encodedPosition.a << 8)\n));\nvec4 rawEncodedProperties = readKeypointData(encodedKeypoints, encoderLength, propertiesAddress);\nkeypoint.lod = decodeLod(rawEncodedProperties.r);\nkeypoint.orientation = decodeKeypointOrientation(rawEncodedProperties.g);\nkeypoint.score = decodeKeypointScore(rawEncodedProperties.ba);\nbool isNull = all(equal(rawEncodedPosition, vec4(1)));\nbool isDiscarded = all(equal(rawEncodedPosition + rawEncodedProperties, vec4(0)));\nkeypoint.score = (isNull || isDiscarded) ? -1.0f : keypoint.score;\nkeypoint.flags = KPF_NONE;\nkeypoint.flags |= KPF_NULL * uint(isNull);\nkeypoint.flags |= KPF_DISCARDED * uint(isDiscarded);\nreturn keypoint;\n}\nvec4 encodeKeypointPosition(vec2 position)\n{\nconst vec2 zeros = vec2(0.0f);\nfixed2_t pos = vec2tofix(max(position, zeros));\nfixed2_t lo = pos & 255;\nfixed2_t hi = (pos >> 8) & 255;\nreturn vec4(lo.x, hi.x, lo.y, hi.y) / 255.0f;\n}\n#endif'},431:e=>{e.exports="#ifndef _MATH_GLSL\n#define _MATH_GLSL\n#define TWO_PI          6.28318530718f\n#define PI              3.14159265359f\n#define PI_OVER_2       1.57079632679f\n#define PI_OVER_4       0.78539816339f\n#define INV_PI          0.3183098861837907f\n#define INV_PI_OVER_2   0.15915494309189535f\nconst highp float INFINITY = 1.0f / 0.0f;\nfloat fastAtan(float x)\n{\nfloat w = 1.0f - abs(x);\nreturn (w >= 0.0f) ? ((PI_OVER_4 + 0.273f * w) * x) :\n(sign(x) * PI_OVER_2 - (PI_OVER_4 + 0.273f * (1.0f - abs(1.0f / x))) / x);\n}\nfloat fastAtan2(float y, float x)\n{\nreturn (x == 0.0f) ? PI_OVER_2 * sign(y) : fastAtan(y / x) + float(x < 0.0f) * PI * sign(y);\n}\n#endif"},6822:e=>{e.exports="#ifndef _PLATFORM_GLSL\n#define _PLATFORM_GLSL\n#if @APPLE@\n#define APPLE 1\n#endif\n#if @APPLE_GPU@\n#define APPLE_GPU 1\n#endif\n#if @INTEL_GRAPHICS@\n#define INTEL_GRAPHICS 1\n#endif\n#endif"},2728:e=>{e.exports="#ifndef _PYRAMIDS_GLSL\n#define _PYRAMIDS_GLSL\n#define pyrPixel(pyr, lod) textureLod((pyr), texCoord, (lod))\n#define pyrPixelAtOffset(pyr, lod, pot, offset) textureLod((pyr), texCoord + ((pot) * vec2(offset)) / texSize, (lod))\n#define pyrPixelAt(pyr, pos, lod) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / texSize, (lod))\n#define pyrPixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define pyrSubpixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), ((pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define pyrSubpixelAtExOffset(pyr, pos, lod, pot, offset, pyrBaseSize) textureLod((pyr), (((pos) + vec2(0.5f)) + ((pot) * vec2(offset))) / vec2(pyrBaseSize), (lod))\nconst int PYRAMID_MAX_LEVELS = int(@PYRAMID_MAX_LEVELS@);\nconst float F_PYRAMID_MAX_LEVELS = float(@PYRAMID_MAX_LEVELS@);\nconst float LOG2_PYRAMID_MAX_SCALE = float(@LOG2_PYRAMID_MAX_SCALE@);\n#define encodeLod(lod) ((LOG2_PYRAMID_MAX_SCALE + (lod)) / (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS))\nfloat decodeLod(float encodedLod)\n{\nfloat lod = encodedLod * (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS) - LOG2_PYRAMID_MAX_SCALE;\nreturn lod - lod * step(1.0f, encodedLod);\n}\n#define LOD_EPS 0.0625f\nconst float ENCODED_LOD_EPS = (LOD_EPS / (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS));\n#define isSameLod(lod1, lod2) (abs((lod1) - (lod2)) < LOD_EPS)\n#define isSameEncodedLod(alpha1, alpha2) (abs((alpha1) - (alpha2)) < ENCODED_LOD_EPS)\n#endif"},6823:e=>{e.exports="#ifndef _SUBPIXEL_GLSL\n#define _SUBPIXEL_GLSL\n#define subpixelAt(image, pos) textureLod((image), ((pos) + vec2(0.5f)) / texSize, 0.0f)\nvec4 subpixelAtBI(sampler2D image, vec2 pos)\n{\nvec2 frc = fract(pos);\nvec2 ifrc = vec2(1.0f) - frc;\nvec2 p = (floor(pos) + vec2(0.5f)) / vec2(textureSize(image, 0));\nvec4 pix00 = textureLod(image, p, 0.0f);\nvec4 pix10 = textureLodOffset(image, p, 0.0f, ivec2(1,0));\nvec4 pix01 = textureLodOffset(image, p, 0.0f, ivec2(0,1));\nvec4 pix11 = textureLodOffset(image, p, 0.0f, ivec2(1,1));\nmat4 pix = mat4(pix00, pix10, pix01, pix11);\nvec4 mul = vec4(ifrc.x * ifrc.y, frc.x * ifrc.y, ifrc.x * frc.y, frc.x * frc.y);\nreturn pix * mul;\n}\n#endif"},1341:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D inputEncodedKeypoints;\nuniform int inputDescriptorSize;\nuniform int inputExtraSize;\nuniform int inputEncoderLength;\nuniform int outputDescriptorSize;\nuniform int outputExtraSize;\nuniform int outputEncoderLength;\nconst vec4 EMPTY_DESCRIPTOR = vec4(0.0f);\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, outputEncoderLength, outputDescriptorSize, outputExtraSize);\nint myIndex = findKeypointIndex(myAddress, outputDescriptorSize, outputExtraSize);\nint headerSize = sizeofEncodedKeypointHeader();\nbool isDescriptor = (myAddress.offset >= (headerSize + outputExtraSize) / 4);\nint addressOffset = myAddress.offset;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(inputDescriptorSize, inputExtraSize) / 4;\nKeypointAddress otherAddress = KeypointAddress(myIndex * pixelsPerKeypoint, addressOffset);\ncolor = isDescriptor ? EMPTY_DESCRIPTOR : readKeypointData(inputEncodedKeypoints, inputEncoderLength, otherAddress);\n}'},7833:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D inputEncodedKeypoints;\nuniform int inputDescriptorSize;\nuniform int inputExtraSize;\nuniform int inputEncoderLength;\nuniform int outputDescriptorSize;\nuniform int outputExtraSize;\nuniform int outputEncoderLength;\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, outputEncoderLength, outputDescriptorSize, outputExtraSize);\nint myIndex = findKeypointIndex(myAddress, outputDescriptorSize, outputExtraSize);\nint headerSize = sizeofEncodedKeypointHeader();\nbool isHead = (myAddress.offset < headerSize / 4);\nbool isDescriptor = (myAddress.offset >= (headerSize + outputExtraSize) / 4);\nbool isExtra = (!isHead && !isDescriptor);\nint numberOfExtraPixels = outputExtraSize / 4;\nint addressOffset = myAddress.offset - int(isDescriptor) * numberOfExtraPixels;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(inputDescriptorSize, inputExtraSize) / 4;\nKeypointAddress otherAddress = KeypointAddress(myIndex * pixelsPerKeypoint, addressOffset);\ncolor = isExtra ? vec4(0.0f) : readKeypointData(inputEncodedKeypoints, inputEncoderLength, otherAddress);\n}'},2352:e=>{e.exports='@include "keypoints.glsl"\nuniform mat3 homography;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\ncolor = pixel;\nif(address.offset != 0)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nvec3 pos3 = homography * vec3(keypoint.position, 1.0f);\ncolor = encodeKeypointPosition(pos3.xy / pos3.z);\n}'},7541:e=>{e.exports='@include "keypoints.glsl"\n@include "keypoint-descriptors.glsl"\n@include "keypoint-matches.glsl"\nuniform sampler2D encodedMatches;\nuniform sampler2D encodedFilters;\nuniform int matcherLength;\nuniform sampler2D dbEncodedKeypoints;\nuniform int dbDescriptorSize;\nuniform int dbExtraSize;\nuniform int dbEncoderLength;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int passId;\n#ifndef NUMBER_OF_KEYPOINTS_PER_PASS\n#error Undefined NUMBER_OF_KEYPOINTS_PER_PASS\n#endif\nconst int INFINITE_DISTANCE = MATCH_MAX_DISTANCE + 1;\nvoid main()\n{\nivec2 thread = threadLocation();\nint keypointIndex = thread.x + thread.y * matcherLength;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\ncolor = encodeKeypointMatch(MATCH_NOT_FOUND);\nif(isBadKeypoint(keypoint))\nreturn;\nKeypointMatch bestMatch = decodeKeypointMatch(threadPixel(encodedMatches));\nKeypointMatch filterMatch = decodeKeypointMatch(threadPixel(encodedFilters));\nuint[DESCRIPTOR_SIZE] descriptor = readKeypointDescriptor(encodedKeypoints, descriptorSize, extraSize, encoderLength, address);\nuint[DESCRIPTOR_SIZE] dbDescriptor;\nint dbPixelsPerKeypoint = sizeofEncodedKeypoint(dbDescriptorSize, dbExtraSize) / 4;\nfor(int i = 0; i < NUMBER_OF_KEYPOINTS_PER_PASS; i++) {\nint dbKeypointIndex = passId * NUMBER_OF_KEYPOINTS_PER_PASS + i;\nKeypointAddress dbAddress = KeypointAddress(dbKeypointIndex * dbPixelsPerKeypoint, 0);\nKeypoint dbKeypoint = decodeKeypoint(dbEncodedKeypoints, dbEncoderLength, dbAddress);\ndbDescriptor = readKeypointDescriptor(dbEncodedKeypoints, dbDescriptorSize, dbExtraSize, dbEncoderLength, dbAddress);\nint dist = !isBadKeypoint(dbKeypoint) ? distanceBetweenKeypointDescriptors(descriptor, dbDescriptor) : INFINITE_DISTANCE;\nbestMatch.index = all(bvec2(\ndist < bestMatch.dist || (dist == bestMatch.dist && dbKeypointIndex > bestMatch.index),\ndist > filterMatch.dist || (dist == filterMatch.dist && dbKeypointIndex < filterMatch.index)\n)) ? dbKeypointIndex : bestMatch.index;\nbestMatch.dist = dbKeypointIndex == bestMatch.index ? dist : bestMatch.dist;\n}\ncolor = encodeKeypointMatch(bestMatch);\n}'},4868:e=>{e.exports='@include "keypoints.glsl"\nuniform int imageWidth;\nuniform int imageHeight;\nuniform int borderTop;\nuniform int borderRight;\nuniform int borderBottom;\nuniform int borderLeft;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress addr = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, addr);\nvec2 p = keypoint.position;\nbool withinBorder = any(lessThan(\nvec4(p.x, p.y, -p.x, -p.y),\nvec4(borderLeft, borderTop, borderRight - (imageWidth - 1), borderBottom - (imageHeight - 1))\n));\nvec4 pixel = threadPixel(encodedKeypoints);\nvec4 nullPixel = encodeNullKeypoint();\ncolor = withinBorder ? nullPixel : pixel;\n}'},5591:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int maxKeypoints;\nvoid main()\n{\nivec2 thread = threadLocation();\nint newEncoderLength = outputSize().x;\nKeypointAddress address = findKeypointAddress(thread, newEncoderLength, descriptorSize, extraSize);\nint index = findKeypointIndex(address, descriptorSize, extraSize);\nvec4 pixel = readKeypointData(encodedKeypoints, encoderLength, address);\ncolor = index < maxKeypoints ? pixel : encodeNullKeypoint();\n}'},191:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypointsA;\nuniform int encoderLengthA;\nuniform sampler2D encodedKeypointsB;\nuniform int encoderLengthB;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint index = findKeypointIndex(address, descriptorSize, extraSize);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nvec4 data = readKeypointData(encodedKeypointsA, encoderLengthA, address);\ncolor = data;\nif(address.offset >= sizeofEncodedKeypointHeader() / 4)\nreturn;\nKeypoint keypointA = decodeKeypoint(encodedKeypointsA, encoderLengthA, address);\nKeypoint keypointB = decodeKeypoint(encodedKeypointsB, encoderLengthB, address);\ncolor = encodeNullKeypoint();\nif(isNullKeypoint(keypointA) && isNullKeypoint(keypointB))\nreturn;\ncolor = encodeDiscardedKeypoint();\nif(isDiscardedKeypoint(keypointA) || isDiscardedKeypoint(keypointB))\nreturn;\ncolor = encodeDiscardedKeypoint();\nif(isNullKeypoint(keypointA) || isNullKeypoint(keypointB))\nreturn;\nvec2 delta = keypointA.position - keypointB.position;\nbool shouldKeep = (dot(delta, delta) <= threshold * threshold);\ncolor = shouldKeep ? data : encodeDiscardedKeypoint();\n}'},5467:e=>{e.exports='@include "float16.glsl"\nuniform sampler2D offsetsImage;\nuniform ivec2 imageSize;\n#ifndef MAX_ITERATIONS\n#error Undefined MAX_ITERATIONS\n#endif\n#define decodeSkipOffset(pixel) (int((pixel).g * 255.0f) | (int((pixel).a * 255.0f) << 8))\n#define encodeSkipOffset(offset) (vec2((offset) & 255, (offset) >> 8) / 255.0f)\nvoid main()\n{\nvec4 pixel = threadPixel(offsetsImage);\nivec2 thread = threadLocation();\nint rasterIndex = thread.y * imageSize.x + thread.x;\nint offset = decodeSkipOffset(pixel);\nint totalOffset = offset;\nvec2 encodedScore = pixel.rb;\nivec2 pos = thread; int allow = 1;\n@unroll\nfor(int i = 0; i < MAX_ITERATIONS; i++) {\nallow *= int(pos.y < imageSize.y) * int(isEncodedFloat16Zero(pixel.rb));\nrasterIndex += allow * offset;\npos = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = pixelAt(offsetsImage, pos);\noffset = decodeSkipOffset(pixel);\ntotalOffset += allow * offset;\n}\ntotalOffset = min(totalOffset, 65535);\ncolor.rb = encodedScore;\ncolor.ga = encodeSkipOffset(totalOffset);\n}'},336:e=>{e.exports='@include "float16.glsl"\nuniform sampler2D corners;\nuniform ivec2 imageSize;\nvoid main()\n{\nvec4 pixel = threadPixel(corners);\nivec2 pos = threadLocation();\nvec2 encodedScore = pixel.rb;\nint offset = 0, allow = 1, jumped = 0;\n#define READ(j) ; \\\nallow *= int(pos.y < imageSize.y) * int(isEncodedFloat16Zero(pixel.rb)); \\\noffset += allow; \\\npos.x = (pos.x + 1) % imageSize.x; \\\npos.y += int(pos.x == 0); \\\npixel = (0 != (jumped |= int(pos.x == 0))) ? pixelAtShortOffset(corners, ivec2((j),1)) : pixelAtShortOffset(corners, ivec2((j),0))\nREAD(1); READ(2); READ(3); READ(4); READ(5); READ(6); READ(7);\ncolor.rb = encodedScore;\ncolor.ga = vec2(offset, 0) / 255.0f;\n}'},8968:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D offsetsImage;\nuniform ivec2 imageSize;\nuniform int passId;\nuniform int numPasses;\nuniform int keypointLimit;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#define decodeSkipOffset(pixel) (int((pixel).g * 255.0f) | (int((pixel).a * 255.0f) << 8))\nbool findQthKeypoint(int q, int p, inout ivec2 position, out vec4 pixel)\n{\nint notFirstPass = int(passId > 0);\nposition *= notFirstPass;\np |= -(1 - notFirstPass);\np -= notFirstPass;\nint rasterIndex = position.y * imageSize.x + position.x;\nwhile(position.y < imageSize.y && p != q) {\nposition = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = texelFetch(offsetsImage, position, 0);\np += int(!isEncodedFloat16Zero(pixel.rb));\nrasterIndex += max(1, decodeSkipOffset(pixel));\n}\nreturn (p == q);\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint q = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = vec4(0.0f);\nif(address.offset != 0)\nreturn;\ncolor = threadPixel(encodedKeypoints);\nint numPixels = encoderLength * encoderLength;\nint maxKeypoints = numPixels / pixelsPerKeypoint;\nint maxKeypointsPerPass = maxKeypoints / numPasses + int(maxKeypoints % numPasses != 0);\nint targetPassId = q / maxKeypointsPerPass;\nif(passId != targetPassId)\nreturn;\nint lastIndexFromPrevPass = passId * maxKeypointsPerPass - 1;\nKeypointAddress lastAddressFromPrevPass = KeypointAddress(max(0, lastIndexFromPrevPass) * pixelsPerKeypoint, 0);\nKeypoint lastKeypointFromPrevPass = decodeKeypoint(encodedKeypoints, encoderLength, lastAddressFromPrevPass);\nivec2 position = passId > 0 ? ivec2(lastKeypointFromPrevPass.position) : ivec2(0);\nvec4 pixel;\ncolor = encodeNullKeypoint();\nif(q >= min(maxKeypoints, keypointLimit) || !findQthKeypoint(q, lastIndexFromPrevPass, position, pixel))\nreturn;\ncolor = encodeKeypointPosition(vec2(position));\n}'},1733:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D corners;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(encodedKeypoints);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint q = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = pixel;\nif(address.offset != 1)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nvec4 kpix = pixelAt(corners, ivec2(keypoint.position));\nkeypoint.score = decodeFloat16(kpix.rb);\ncolor.r = kpix.a;\ncolor.g = encodeKeypointOrientation(0.0f);\ncolor.ba = encodeKeypointScore(keypoint.score);\n}'},9674:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D corners;\nuniform mediump usampler2D lookupTable;\nuniform int stride;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int encoderCapacity;\nconst uvec2 NULL_ELEMENT = uvec2(0xFFFFu);\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint index = findKeypointIndex(address, descriptorSize, extraSize);\nivec2 pos = ivec2(index % stride, index / stride);\nuvec4 entry = texelFetch(lookupTable, pos, 0);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nint rasterIndex = address.base + address.offset;\nint numberOfPixels = encoderLength * encoderLength;\nint numberOfValidPixels = numberOfPixels - (numberOfPixels % pixelsPerKeypoint);\nint maxEncoderCapacity = numberOfValidPixels / pixelsPerKeypoint;\ncolor = encodeNullKeypoint();\nif(all(equal(entry.xy, NULL_ELEMENT)) || index >= min(encoderCapacity, maxEncoderCapacity))\nreturn;\ncolor = encodeKeypointPosition(vec2(entry.xy));\nif(address.offset == 0)\nreturn;\ncolor = vec4(0.0f);\nif(address.offset >= sizeofEncodedKeypointHeader() / 4)\nreturn;\nvec4 pixel = texelFetch(corners, ivec2(entry.xy), 0);\nvec2 encodedScore = encodeKeypointScore(decodeFloat16(pixel.rb));\nfloat encodedOrientation = encodeKeypointOrientation(0.0f);\nfloat encodedLod = pixel.a;\ncolor = vec4(encodedLod, encodedOrientation, encodedScore);\n}'},2090:e=>{e.exports='@include "keypoints.glsl"\nvoid main()\n{\ncolor = encodeNullKeypoint();\n}'},1855:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\nuniform sampler2D corners;\nuniform sampler2D pyramid;\nuniform float lod;\nuniform int threshold;\n#define USE_VARYINGS 1\n#if !defined(FAST_TYPE)\n#error Undefined FAST_TYPE\n#elif FAST_TYPE == 916\nin vec2 v_pix0, v_pix1, v_pix2, v_pix3, v_pix4, v_pix5, v_pix6, v_pix7,\nv_pix8, v_pix9, v_pix10,v_pix11,v_pix12,v_pix13,v_pix14,v_pix15;\n#else\n#error Invalid FAST_TYPE\n#endif\n#define PIX(x,y) pyrPixelAtOffset(pyramid, lod, pot, ivec2((x),(y))).g\n#define XIP(v) textureLod(pyramid, (v), lod).g\nvoid main()\n{\nfloat pixel = threadPixel(pyramid).g;\nvec4 prev = threadPixel(corners);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nfloat pot = exp2(lod);\nfloat t = float(clamp(threshold, 0, 255)) / 255.0f;\nfloat ct = pixel + t, c_t = pixel - t;\ncolor = vec4(prev.r, pixel, prev.ba);\n#if FAST_TYPE == 916\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nif(any(lessThan(ivec4(thread, size - thread), margin)))\nreturn;\n#if USE_VARYINGS\nfloat p0 = XIP(v_pix0), p4 = XIP(v_pix4), p8 = XIP(v_pix8), p12 = XIP(v_pix12);\n#else\nfloat p0 = PIX(0,3), p4 = PIX(3,0), p8 = PIX(0,-3), p12 = PIX(-3,0);\n#endif\nbvec4 brighter = bvec4(p0 > ct, p4 > ct, p8 > ct, p12 > ct);\nbvec4 darker = bvec4(p0 < c_t, p4 < c_t, p8 < c_t, p12 < c_t);\nbvec4 bpairs = bvec4(all(brighter.xy), all(brighter.yz), all(brighter.zw), all(brighter.wx));\nbvec4 dpairs = bvec4(all(darker.xy), all(darker.yz), all(darker.zw), all(darker.wx));\nif(!(any(bpairs) || any(dpairs)))\nreturn;\n#if USE_VARYINGS\nfloat p1 = XIP(v_pix1), p2 = XIP(v_pix2), p3 = XIP(v_pix3),\np5 = XIP(v_pix5), p6 = XIP(v_pix6), p7 = XIP(v_pix7),\np9 = XIP(v_pix9), p10 = XIP(v_pix10), p11 = XIP(v_pix11),\np13 = XIP(v_pix13), p14 = XIP(v_pix14), p15 = XIP(v_pix15);\n#else\nfloat p1 = PIX(1,3), p2 = PIX(2,2), p3 = PIX(3,1),\np5 = PIX(3,-1), p6 = PIX(2,-2), p7 = PIX(1,-3),\np9 = PIX(-1,-3), p10 = PIX(-2,-2), p11 = PIX(-3,-1),\np13 = PIX(-3,1), p14 = PIX(-2,2), p15 = PIX(-1,3);\n#endif\nbool A=(p0>ct),B=(p1>ct),C=(p2>ct),D=(p3>ct),E=(p4>ct),F=(p5>ct),G=(p6>ct),H=(p7>ct),I=(p8>ct),J=(p9>ct),K=(p10>ct),L=(p11>ct),M=(p12>ct),N=(p13>ct),O=(p14>ct),P=(p15>ct),a=(p0<c_t),b=(p1<c_t),c=(p2<c_t),d=(p3<c_t),e=(p4<c_t),f=(p5<c_t),g=(p6<c_t),h=(p7<c_t),i=(p8<c_t),j=(p9<c_t),k=(p10<c_t),l=(p11<c_t),m=(p12<c_t),n=(p13<c_t),o=(p14<c_t),p=(p15<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\nif(!isCorner)\nreturn;\nmat4 mp = mat4(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15);\nmat4 mct = mp - mat4(ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct);\nmat4 mc_t = mat4(c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t) - mp;\nconst vec4 zeros = vec4(0.0f), ones = vec4(1.0f);\nvec4 bs = max(mct[0], zeros), ds = max(mc_t[0], zeros);\nbs += max(mct[1], zeros);     ds += max(mc_t[1], zeros);\nbs += max(mct[2], zeros);     ds += max(mc_t[2], zeros);\nbs += max(mct[3], zeros);     ds += max(mc_t[3], zeros);\nfloat thisScore = max(dot(bs, ones), dot(ds, ones)) / 16.0f;\nfloat prevScore = decodeFloat16(prev.rb);\nvec3 thisResult = vec3(encodeFloat16(thisScore), encodeLod(lod));\ncolor.rba = thisScore > prevScore ? thisResult : color.rba;\n#endif\n}'},4824:e=>{e.exports="uniform mediump float lod;\n#if !defined(FAST_TYPE)\n#error Undefined FAST_TYPE\n#elif FAST_TYPE == 916\nout vec2 v_pix0, v_pix1, v_pix2, v_pix3, v_pix4, v_pix5, v_pix6, v_pix7,\nv_pix8, v_pix9, v_pix10,v_pix11,v_pix12,v_pix13,v_pix14,v_pix15;\n#else\n#error Invalid FAST_TYPE\n#endif\n#define PIX(x,y) (texCoord + ((pot) * vec2((x),(y))) / texSize)\nvoid vsmain()\n{\nfloat pot = exp2(lod);\n#if FAST_TYPE == 916\nv_pix0 = PIX(0,3); v_pix1 = PIX(1,3), v_pix2 = PIX(2,2), v_pix3 = PIX(3,1);\nv_pix4 = PIX(3,0); v_pix5 = PIX(3,-1), v_pix6 = PIX(2,-2), v_pix7 = PIX(1,-3);\nv_pix8 = PIX(0,-3); v_pix9 = PIX(-1,-3), v_pix10 = PIX(-2,-2), v_pix11 = PIX(-3,-1);\nv_pix12 = PIX(-3,0); v_pix13 = PIX(-3,1), v_pix14 = PIX(-2,2), v_pix15 = PIX(-1,3);\n#endif\n}"},2381:e=>{e.exports='@include "keypoints.glsl"\n@include "keypoint-descriptors.glsl"\nuniform sampler2D encodedKeypointsA;\nuniform int encoderLengthA;\nuniform sampler2D encodedKeypointsB;\nuniform int encoderLengthB;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint index = findKeypointIndex(address, descriptorSize, extraSize);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nvec4 data = readKeypointData(encodedKeypointsA, encoderLengthA, address);\ncolor = data;\nif(address.offset >= sizeofEncodedKeypointHeader() / 4)\nreturn;\nKeypoint keypointA = decodeKeypoint(encodedKeypointsA, encoderLengthA, address);\nKeypoint keypointB = decodeKeypoint(encodedKeypointsB, encoderLengthB, address);\ncolor = encodeNullKeypoint();\nif(isNullKeypoint(keypointA) && isNullKeypoint(keypointB))\nreturn;\ncolor = encodeDiscardedKeypoint();\nif(isDiscardedKeypoint(keypointA) || isDiscardedKeypoint(keypointB))\nreturn;\ncolor = encodeDiscardedKeypoint();\nif(isNullKeypoint(keypointA) || isNullKeypoint(keypointB))\nreturn;\nuint[DESCRIPTOR_SIZE] descriptorA, descriptorB;\ndescriptorA = readKeypointDescriptor(encodedKeypointsA, descriptorSize, extraSize, encoderLengthA, address);\ndescriptorB = readKeypointDescriptor(encodedKeypointsB, descriptorSize, extraSize, encoderLengthB, address);\nint dist = distanceBetweenKeypointDescriptors(descriptorA, descriptorB);\nbool shouldKeep = (dist <= threshold);\ncolor = shouldKeep ? data : encodeDiscardedKeypoint();\n}'},6060:e=>{e.exports='@include "float16.glsl"\nuniform sampler2D corners;\nuniform sampler2D maxScore;\nuniform float quality;\nvoid main()\n{\nvec4 pixel = threadPixel(corners);\nfloat score = decodeFloat16(pixel.rb);\nfloat maxval = decodeFloat16(threadPixel(maxScore).rb);\nfloat threshold = maxval * clamp(quality, 0.0f, 1.0f);\ncolor = pixel;\ncolor.rb = score >= threshold ? color.rb : encodeFloat16(0.0f);\n}'},9974:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\n@include "filters.glsl"\n#if !defined(WINDOW_SIZE)\n#error Undefined WINDOW_SIZE\n#endif\n#define WINDOW_RADIUS ((WINDOW_SIZE - 1) / 2)\nuniform sampler2D corners;\nuniform sampler2D pyramid;\nuniform sampler2D derivatives;\nuniform float lod;\nuniform float lodStep;\nuniform float gaussian[@WINDOW_SIZE@];\n#define G(x) gaussian[(x) + WINDOW_RADIUS]\n#define W(x,y) (G(x) * G(y))\n#define H(ox,oy) dpix = pixelAtShortOffset(derivatives, ivec2((ox),(oy))); \\\ndf = (1.0f + lod) * decodePairOfFloat16(dpix); \\\nh += vec3(df.x * df.x, df.x * df.y, df.y * df.y) * W((ox),(oy))\nvoid main()\n{\nfloat intensity = 0.0f;\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(corners);\nvec4 dpix = vec4(0.0f);\nvec2 df = vec2(0.0f);\nvec3 h = vec3(0.0f);\ncolor = pixel;\n#if WINDOW_SIZE == 1\nH(0,0);\n#elif WINDOW_SIZE == 3\nH(-1,-1); H(0,-1); H(1,-1);\nH(-1,0); H(0,0); H(1,0);\nH(-1,1); H(0,1); H(1,1);\n#elif WINDOW_SIZE == 5\nH(-2,-2); H(-1,-2); H(0,-2); H(1,-2); H(2,-2);\nH(-2,-1); H(-1,-1); H(0,-1); H(1,-1); H(2,-1);\nH(-2,0); H(-1,0); H(0,0); H(1,0); H(2,0);\nH(-2,1); H(-1,1); H(0,1); H(1,1); H(2,1);\nH(-2,2); H(-1,2); H(0,2); H(1,2); H(2,2);\n#elif WINDOW_SIZE == 7\nH(-3,-3); H(-2,-3); H(-1,-3); H(0,-3); H(1,-3); H(2,-3); H(3,-3);\nH(-3,-2); H(-2,-2); H(-1,-2); H(0,-2); H(1,-2); H(2,-2); H(3,-2);\nH(-3,-1); H(-2,-1); H(-1,-1); H(0,-1); H(1,-1); H(2,-1); H(3,-1);\nH(-3,0); H(-2,0); H(-1,0); H(0,0); H(1,0); H(2,0); H(3,0);\nH(-3,1); H(-2,1); H(-1,1); H(0,1); H(1,1); H(2,1); H(3,1);\nH(-3,2); H(-2,2); H(-1,2); H(0,2); H(1,2); H(2,2); H(3,2);\nH(-3,3); H(-2,3); H(-1,3); H(0,3); H(1,3); H(2,3); H(3,3);\n#else\n#error Invalid WINDOW_SIZE\n#endif\nfloat response = 0.5f * (h.x + h.z - sqrt((h.x - h.z) * (h.x - h.z) + 4.0f * h.y * h.y));\nresponse /= float(WINDOW_SIZE * WINDOW_SIZE);\nfloat lodPlus = min(float(PYRAMID_MAX_LEVELS - 1), lod + lodStep);\nfloat currentScaleStrength = abs(laplacian(pyramid, vec2(thread), lod));\nfloat previousScaleStrength = abs(laplacian(pyramid, vec2(thread), lodPlus));\nfloat previousResponse = decodeFloat16(pixel.rb);\nvec4 result = vec4(encodeFloat16(response), encodeLod(lod), intensity);\ncolor.rbag = (currentScaleStrength >= previousScaleStrength || previousResponse == 0.0f) ? result : pixel.rbag;\n}'},3047:e=>{e.exports='@include "keypoint-matches.glsl"\nvoid main()\n{\n#if ENCODE_FILTERS != 0\nKeypointMatch initial = KeypointMatch(MATCH_MAX_INDEX, 0);\n#else\nKeypointMatch initial = KeypointMatch(MATCH_MAX_INDEX, MATCH_MAX_DISTANCE);\n#endif\ncolor = encodeKeypointMatch(initial);\n}'},3266:e=>{e.exports='@include "keypoint-matches.glsl"\nuniform sampler2D encodedMatches;\nuniform sampler2D encodedKthMatches;\nuniform int numberOfMatchesPerKeypoint;\nuniform int kthMatch;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 matcherSize = textureSize(encodedMatches, 0);\nivec2 kthMatcherSize = textureSize(encodedKthMatches, 0);\nint rasterIndex = thread.y * matcherSize.x + thread.x;\nint matchIndex = rasterIndex / numberOfMatchesPerKeypoint;\nint matchCell = rasterIndex % numberOfMatchesPerKeypoint;\ncolor = threadPixel(encodedMatches);\nif(matchCell != kthMatch)\nreturn;\ncolor = encodeKeypointMatch(MATCH_NOT_FOUND);\nif(matchIndex >= kthMatcherSize.x * kthMatcherSize.y)\nreturn;\nivec2 pos = ivec2(matchIndex % kthMatcherSize.x, matchIndex / kthMatcherSize.x);\ncolor = texelFetch(encodedKthMatches, pos, 0);\n}'},8018:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\n@include "filters.glsl"\nuniform sampler2D corners;\nuniform sampler2D pyramid;\nuniform float lodStep;\nuniform float lodOffset;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(corners);\nfloat lod = decodeLod(pixel.a);\nfloat lodMinus = max(0.0f, lod - lodStep + lodOffset);\nfloat lodPlus = min(float(PYRAMID_MAX_LEVELS - 1), lod + lodStep + lodOffset);\nfloat lapMinus = laplacian(pyramid, vec2(thread), lodMinus);\nfloat lapPlus = abs(lodPlus - lodMinus) < 1e-5 ? lapMinus : laplacian(pyramid, vec2(thread), lodPlus);\ncolor = encodePairOfFloat16(vec2(lapMinus, lapPlus));\n}'},3168:e=>{e.exports='@include "keypoints.glsl"\n@include "float16.glsl"\nuniform sampler2D nextPyramid;\nuniform sampler2D prevPyramid;\nuniform sampler2D encodedFlow;\nuniform sampler2D prevKeypoints;\nuniform int level;\nuniform int depth;\nuniform int numberOfIterations;\nuniform float discardThreshold;\nuniform float epsilon;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#ifndef WINDOW_SIZE\n#error Undefined WINDOW_SIZE\n#endif\n#define NEXT_IMAGE 1\n#define PREV_IMAGE 0\nconst int WINDOW_RADIUS = (WINDOW_SIZE - 1) / 2;\nconst int WINDOW_SIZE_SQUARED = (WINDOW_SIZE) * (WINDOW_SIZE);\nconst int WINDOW_SIZE_PLUS = (WINDOW_SIZE) + 2;\nconst int WINDOW_SIZE_PLUS_SQUARED = WINDOW_SIZE_PLUS * WINDOW_SIZE_PLUS;\nconst int DBL_WINDOW_SIZE_PLUS_SQUARED = 2 * WINDOW_SIZE_PLUS_SQUARED;\nconst int WINDOW_RADIUS_PLUS = (WINDOW_SIZE_PLUS - 1) / 2;\nconst highp float FLT_SCALE = 9.5367431640625e-7;\nconst highp float FLT_EPSILON = 0.00000011920929f;\nint pixelBuffer[DBL_WINDOW_SIZE_PLUS_SQUARED];\n#define prevPixel(index) pixelBuffer[(index)]\n#define nextPixel(index) pixelBuffer[WINDOW_SIZE_PLUS_SQUARED + (index)]\n#define pixelIndex(i, j) (((j) + WINDOW_RADIUS_PLUS) * WINDOW_SIZE_PLUS + ((i) + WINDOW_RADIUS_PLUS))\nivec2 derivBuffer[WINDOW_SIZE_SQUARED];\n#define derivativesAt(x, y) derivBuffer[((y) + WINDOW_RADIUS) * WINDOW_SIZE + ((x) + WINDOW_RADIUS)]\nvoid readWindow(vec2 center, float lod)\n{\nconst int r = WINDOW_RADIUS;\nivec2 pyrBaseSize = textureSize(prevPyramid, 0);\nfloat pot = exp2(lod);\nivec2 offset; int idx;\n#define readPixelsAt(ox, oy) offset = ivec2((ox), (oy)); \\\nidx = pixelIndex(offset.x, offset.y); \\\nnextPixel(idx) = int(255.0f * pyrSubpixelAtExOffset(nextPyramid, center, lod, pot, offset, pyrBaseSize).g); \\\nprevPixel(idx) = int(255.0f * pyrSubpixelAtExOffset(prevPyramid, center, lod, pot, offset, pyrBaseSize).g)\nfor(int j = 0; j < WINDOW_SIZE; j++) {\nfor(int i = 0; i < WINDOW_SIZE; i++) {\nreadPixelsAt(i-r, j-r);\n}\n}\nint r1 = r+1;\nfor(int k = 0; k < WINDOW_SIZE; k++) {\nreadPixelsAt(-r1, k-r);\nreadPixelsAt( r1, k-r);\nreadPixelsAt(k-r,-r1);\nreadPixelsAt(k-r, r1);\n}\nreadPixelsAt(-r1,-r1);\nreadPixelsAt( r1,-r1);\nreadPixelsAt(-r1, r1);\nreadPixelsAt( r1, r1);\n}\nivec2 computeDerivatives(int imageCode, ivec2 offset)\n{\nconst mat3 dx = mat3(\n3, 0, -3,\n10, 0, -10,\n3, 0, -3\n);\nconst mat3 dy = mat3(\n3, 10, 3,\n0, 0, 0,\n-3, -10, -3\n);\nint indexOffset = imageCode * WINDOW_SIZE_PLUS_SQUARED;\nmat3 window = mat3(\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+0, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y+0)],\n0.0f,\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y+0)],\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y+1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+0, offset.y+1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y+1)]\n);\nmat3 fx = matrixCompMult(dx, window);\nmat3 fy = matrixCompMult(dy, window);\nconst vec3 ones = vec3(1.0f);\nreturn ivec2(\ndot(fx[0], ones) + dot(fx[1], ones) + dot(fx[2], ones),\ndot(fy[0], ones) + dot(fy[1], ones) + dot(fy[2], ones)\n);\n}\nint readBufferedPixel(int imageCode, ivec2 offset)\n{\nconst int r = WINDOW_RADIUS;\noffset = clamp(offset, -r, r);\nint indexOffset = imageCode * WINDOW_SIZE_PLUS_SQUARED;\nreturn pixelBuffer[indexOffset + pixelIndex(offset.x, offset.y)];\n}\nint readBufferedSubpixel(int imageCode, vec2 offset)\n{\nivec2 p = ivec2(floor(offset));\nvec2 frc = fract(offset);\nvec2 ifrc = vec2(1.0f) - frc;\nvec4 pix = vec4(\nreadBufferedPixel(imageCode, p),\nreadBufferedPixel(imageCode, p + ivec2(1,0)),\nreadBufferedPixel(imageCode, p + ivec2(0,1)),\nreadBufferedPixel(imageCode, p + ivec2(1,1))\n);\nvec4 sub = vec4(\nifrc.x * ifrc.y,\nfrc.x * ifrc.y,\nifrc.x * frc.y,\nfrc.x * frc.y\n);\nreturn int(0.5f + dot(sub*pix, vec4(1.0f)));\n}\nvec2 computeMismatch(vec2 pyrGuess, vec2 localGuess)\n{\nconst int r = WINDOW_RADIUS;\nint timeDerivative;\nivec2 mismatch = ivec2(0);\nint x, y, _x, _y;\nvec2 d = pyrGuess + localGuess;\n#define innerLoop() \\\nfor(_x = 0; _x < WINDOW_SIZE; _x++) { \\\nx = _x - r; y = _y - r; \\\ntimeDerivative = ( \\\nreadBufferedSubpixel(NEXT_IMAGE, vec2(x, y) + d) - \\\nreadBufferedPixel(PREV_IMAGE, ivec2(x, y)) \\\n); \\\nmismatch += derivativesAt(x, y) * timeDerivative; \\\n}\n@unroll\nfor(_y = 0; _y < WINDOW_SIZE; _y++) {\ninnerLoop();\n}\nreturn vec2(mismatch) * FLT_SCALE;\n}\nbool isInsideImage(vec2 position)\n{\nvec2 imageSize = vec2(textureSize(nextPyramid, 0));\nvec2 border = vec2(WINDOW_SIZE);\nreturn all(bvec4(\ngreaterThanEqual(position, border),\nlessThan(position, imageSize - border)\n));\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedFlow);\nivec2 thread = threadLocation();\nfloat windowArea = float(WINDOW_SIZE * WINDOW_SIZE);\nconst int r = WINDOW_RADIUS;\nint keypointIndex = thread.x + thread.y * outputSize().x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(prevKeypoints, encoderLength, address);\ncolor = encodeNullPairOfFloat16();\nif(isNullKeypoint(keypoint))\nreturn;\ncolor = encodeDiscardedPairOfFloat16();\nif(isBadKeypoint(keypoint))\nreturn;\nvec2 pyrGuess = (level < depth - 1) ? decodePairOfFloat16(pixel) : vec2(0.0f);\npyrGuess *= 2.0f;\nreadWindow(keypoint.position, float(level));\nivec2 derivatives;\nivec3 harris3i = ivec3(0);\nfor(int j = 0; j < WINDOW_SIZE; j++) {\nfor(int i = 0; i < WINDOW_SIZE; i++) {\nderivatives = computeDerivatives(PREV_IMAGE, ivec2(i-r, j-r));\nharris3i += ivec3(\nderivatives.x * derivatives.x,\nderivatives.x * derivatives.y,\nderivatives.y * derivatives.y\n);\nderivativesAt(i-r, j-r) = derivatives;\n}\n}\nhighp vec3 harris = vec3(harris3i) * FLT_SCALE;\nhighp mat2 invHarris = mat2(harris.z, -harris.y, -harris.y, harris.x);\nhighp float det = harris.x * harris.z - harris.y * harris.y;\nhighp float invDet = abs(det) >= FLT_EPSILON ? 1.0f / det : 0.0f;\nhighp float minEigenvalue = 0.5f * ((harris.x + harris.z) - sqrt(\n(harris.x - harris.z) * (harris.x - harris.z) + 4.0f * (harris.y * harris.y)\n));\nint niceNumbers = int(abs(det) >= FLT_EPSILON && minEigenvalue >= discardThreshold * windowArea);\nbool goodKeypoint = (level > 0) || (niceNumbers != 0);\nhighp float eps2 = epsilon * epsilon;\nhighp vec2 mismatch, delta, localGuess = vec2(0.0f);\nfor(int k = 0; k < numberOfIterations; k++) {\nmismatch = niceNumbers != 0 ? computeMismatch(pyrGuess, localGuess) : vec2(0.0f);\ndelta = mismatch * invHarris * invDet;\nniceNumbers *= int(eps2 <= dot(delta, delta));\nlocalGuess += float(niceNumbers) * delta;\n}\nvec2 opticalFlow = pyrGuess + localGuess;\nbool mustDiscard = (level == 0) && any(bvec2(\n!goodKeypoint,\n!isInsideImage(keypoint.position + opticalFlow)\n));\ncolor = !mustDiscard ? encodePairOfFloat16(opticalFlow) : encodeDiscardedPairOfFloat16();\n}'},3890:e=>{e.exports='#if @FS_USE_CUSTOM_PRECISION@\nprecision mediump int;\nprecision mediump float;\n#endif\n#if !defined(STAGE)\n#error Undefined STAGE\n#elif STAGE == 1\n@include "float16.glsl"\nuniform sampler2D corners;\n#elif STAGE < 1\nuniform mediump usampler2D lookupTable;\n#else\n#define SKIP_TEXTURE_READS 1\n#define DENSITY_FACTOR 0.10\nuniform mediump usampler2D lookupTable;\nuniform int blockSize;\nuniform int width;\nuniform int height;\nin vec2 v_topLeft, v_top, v_topRight,\nv_left, v_center, v_right,\nv_bottomLeft, v_bottom, v_bottomRight;\n#endif\nconst uvec2 NULL_ELEMENT = uvec2(0xFFFFu);\nvoid main()\n{\n#if STAGE == 1\nuvec2 outSize = uvec2(outputSize());\nuvec2 thread = uvec2(threadLocation());\nuvec2 size = uvec2(textureSize(corners, 0));\nuint location = thread.y * outSize.x + thread.x;\nivec2 pos = ivec2(location % size.x, location / size.x);\nvec4 pixel = location < size.x * size.y ? texelFetch(corners, pos, 0) : vec4(0.0f);\nbool isCorner = !isEncodedFloat16Zero(pixel.rb);\ncolor = isCorner ? uvec4(uvec2(pos), 1u, 0u) : uvec4(NULL_ELEMENT, 0u, 0u);\n#elif STAGE > 1\nint dblBlockSize = 2 * blockSize;\nivec2 thread = threadLocation();\nivec2 offset = thread % dblBlockSize;\nivec2 delta = thread - offset;\n#if SKIP_TEXTURE_READS\nif(blockSize >= 8) {\nuint sb = texture(lookupTable, texCoord).z;\nfloat p = max((float(sb) / float(blockSize)) / float(blockSize), DENSITY_FACTOR);\nfloat rowthr = float(dblBlockSize) * p + 3.0f * sqrt(p * (1.0f - p));\ncolor = uvec4(NULL_ELEMENT, 4u * sb, 0u);\nif(offset.y >= max(1, int(ceil(rowthr))))\nreturn;\n}\n#endif\n#define deltaCenter ivec2(0,0)\n#define deltaTop ivec2(0,-blockSize)\n#define deltaTopRight ivec2(blockSize,-blockSize)\n#define deltaRight ivec2(blockSize,0)\n#define deltaBottomRight ivec2(blockSize,blockSize)\n#define deltaBottom ivec2(0,blockSize)\n#define deltaBottomLeft ivec2(-blockSize,blockSize)\n#define deltaLeft ivec2(-blockSize,0)\n#define deltaTopLeft ivec2(-blockSize,-blockSize)\nivec2 boundary = ivec2(width - 1, height - 1) / blockSize;\nivec2 bottomRightPos = thread + deltaBottomRight;\nuvec2 valid = uvec2(\nbottomRightPos.x < width  || bottomRightPos.x / blockSize == boundary.x,\nbottomRightPos.y < height || bottomRightPos.y / blockSize == boundary.y\n);\nuvec4 mask[4];\nmask[0] = uvec4(1u, valid.x, valid.y, valid.x * valid.y);\nmask[1] = uvec4(1u, 1u, valid.y, valid.y);\nmask[2] = uvec4(1u, valid.x, 1u, valid.x);\nmask[3] = uvec4(1u);\n#if SKIP_TEXTURE_READS\n#define calcSb(delta) texelFetch(lookupTable, blockSize * ((thread + (delta)) / blockSize), 0).z\nuint center = calcSb(deltaCenter);\nuint top = calcSb(deltaTop);\nuint topRight = calcSb(deltaTopRight);\nuint right = calcSb(deltaRight);\nuint bottomRight = calcSb(deltaBottomRight);\nuint bottom = calcSb(deltaBottom);\nuint bottomLeft = calcSb(deltaBottomLeft);\nuint left = calcSb(deltaLeft);\nuint topLeft = calcSb(deltaTopLeft);\n#else\n#define calcSb(pos) texture(lookupTable, (pos)).z\nuint center = calcSb(v_center);\nuint top = calcSb(v_top);\nuint topRight = calcSb(v_topRight);\nuint right = calcSb(v_right);\nuint bottomRight = calcSb(v_bottomRight);\nuint bottom = calcSb(v_bottom);\nuint bottomLeft = calcSb(v_bottomLeft);\nuint left = calcSb(v_left);\nuint topLeft = calcSb(v_topLeft);\n#endif\nuvec4 sums[4];\nsums[0] = uvec4(center, right, bottom, bottomRight);\nsums[1] = uvec4(left, center, bottomLeft, bottom);\nsums[2] = uvec4(top, topRight, center, right);\nsums[3] = uvec4(topLeft, top, left, center);\nivec2 cmp = ivec2(greaterThanEqual(offset, ivec2(blockSize)));\nint option = 2 * cmp.y + cmp.x;\nuvec4 cdef = sums[option] * mask[option];\nuint c2b = cdef.x, d2b = cdef.y, e2b = cdef.z, f2b = cdef.w;\nuint sb = center;\nuint s2b = c2b + d2b + e2b + f2b;\ns2b = s2b < sb ? 0xFFFFu : min(0xFFFFu, s2b);\nuint w2b = uint(min(dblBlockSize, width - delta.x));\nuvec2 uoffset = uvec2(offset);\nuint ceiling = s2b >= uoffset.x ? (s2b - uoffset.x) / w2b + uint((s2b - uoffset.x) % w2b > 0u) : 0u;\ncolor = uvec4(NULL_ELEMENT, s2b, 0u);\nif(uoffset.y >= ceiling)\nreturn;\nuint i2b = uoffset.y * w2b + uoffset.x;\nuint j2b = i2b >= c2b ? i2b - c2b : 0u;\nuint k2b = j2b >= d2b ? j2b - d2b : 0u;\nuint l2b = k2b >= e2b ? k2b - e2b : 0u;\nuint wl = uint(min(blockSize, width - delta.x));\nuint wr = uint(min(blockSize, width - delta.x - blockSize));\nivec2 magicOffset = (\n(i2b < c2b) ? ivec2(i2b % wl, i2b / wl) : (\n(j2b < d2b) ? ivec2(j2b % wr, j2b / wr) + ivec2(blockSize, 0) : (\n(k2b < e2b) ? ivec2(k2b % wl, k2b / wl) + ivec2(0, blockSize) : (\n(l2b < f2b) ? ivec2(l2b % wr, l2b / wr) + ivec2(blockSize) : ivec2(0)\n))));\nuvec2 a2b = texelFetch(lookupTable, delta + magicOffset, 0).xy;\ncolor = uvec4(a2b, s2b, 0u);\n#else\nuvec4 pix = texture(lookupTable, texCoord);\ncolor = all(equal(pix.xy, NULL_ELEMENT)) ? vec4(0,1,1,1) : vec4(1,0,0,1);\n#endif\n}'},8647:e=>{e.exports="#if !defined(STAGE) || STAGE < 1\n#error Invalid STAGE\n#else\nuniform mediump int blockSize;\nout vec2 v_topLeft, v_top, v_topRight,\nv_left, v_center, v_right,\nv_bottomLeft, v_bottom, v_bottomRight;\nvoid vsmain()\n{\nfloat b = float(blockSize);\n#define V(x,y) (texCoord + (vec2((x),(y)) * b) / texSize)\nv_topLeft = V(-1,-1); v_top = V(0,-1); v_topRight = V(1,-1);\nv_left = V(-1,0); v_center = V(0,0); v_right = V(1,0);\nv_bottomLeft = V(-1,1); v_bottom = V(0,1); v_bottomRight = V(1,1);\n}\n#endif"},4776:e=>{e.exports='@include "keypoints.glsl"\n@include "keypoint-matches.glsl"\n@include "keypoint-descriptors.glsl"\nuniform sampler2D candidates;\nuniform sampler2D filters;\nuniform int matcherLength;\nuniform sampler2D tables;\nuniform sampler2D descriptorDB;\nuniform int tableIndex;\nuniform int bucketCapacity;\nuniform int bucketsPerTable;\nuniform int tablesStride;\nuniform int descriptorDBStride;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#if HASH_SIZE > SEQUENCE_MAXLEN\n#error LSH: invalid HASH_SIZE\n#elif SEQUENCE_COUNT * SEQUENCE_MAXLEN * 4 > 16384\n#error LSH: sequences are too large!\n#elif (SEQUENCE_COUNT * SEQUENCE_MAXLEN) % 4 > 0\n#error LSH: sequences of invalid size!\n#endif\nlayout(std140) uniform LSHSequences\n{\nuvec4 sequences[(SEQUENCE_COUNT * SEQUENCE_MAXLEN) / 4];\n};\n#if HASH_SIZE == 10\nconst int SWAP_COUNT[3] = int[3](1, 11, 56);\nconst int[56] SWAP = int[56](0,1,2,4,8,16,32,64,128,256,512,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768);\n#elif HASH_SIZE == 11\nconst int SWAP_COUNT[3] = int[3](1, 12, 67);\nconst int[67] SWAP = int[67](0,1,2,4,8,16,32,64,128,256,512,1024,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536);\n#elif HASH_SIZE == 12\nconst int SWAP_COUNT[3] = int[3](1, 13, 79);\nconst int[79] SWAP = int[79](0,1,2,4,8,16,32,64,128,256,512,1024,2048,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072);\n#elif HASH_SIZE == 13\nconst int SWAP_COUNT[3] = int[3](1, 14, 92);\nconst int[92] SWAP = int[92](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144);\n#elif HASH_SIZE == 14\nconst int SWAP_COUNT[3] = int[3](1, 15, 106);\nconst int[106] SWAP = int[106](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288);\n#elif HASH_SIZE == 15\nconst int SWAP_COUNT[3] = int[3](1, 16, 121);\nconst int[121] SWAP = int[121](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576);\n#elif HASH_SIZE == 16\nconst int SWAP_COUNT[3] = int[3](1, 17, 137);\nconst int[137] SWAP = int[137](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576,32769,32770,32772,32776,32784,32800,32832,32896,33024,33280,33792,34816,36864,40960,49152);\n#elif HASH_SIZE == 17\nconst int SWAP_COUNT[3] = int[3](1, 18, 154);\nconst int[154] SWAP = int[154](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576,32769,32770,32772,32776,32784,32800,32832,32896,33024,33280,33792,34816,36864,40960,49152,65537,65538,65540,65544,65552,65568,65600,65664,65792,66048,66560,67584,69632,73728,81920,98304);\n#elif HASH_SIZE == 18\nconst int SWAP_COUNT[3] = int[3](1, 19, 172);\nconst int[172] SWAP = int[172](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576,32769,32770,32772,32776,32784,32800,32832,32896,33024,33280,33792,34816,36864,40960,49152,65537,65538,65540,65544,65552,65568,65600,65664,65792,66048,66560,67584,69632,73728,81920,98304,131073,131074,131076,131080,131088,131104,131136,131200,131328,131584,132096,133120,135168,139264,147456,163840,196608);\n#elif HASH_SIZE == 19\nconst int SWAP_COUNT[3] = int[3](1, 20, 191);\nconst int[191] SWAP = int[191](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576,32769,32770,32772,32776,32784,32800,32832,32896,33024,33280,33792,34816,36864,40960,49152,65537,65538,65540,65544,65552,65568,65600,65664,65792,66048,66560,67584,69632,73728,81920,98304,131073,131074,131076,131080,131088,131104,131136,131200,131328,131584,132096,133120,135168,139264,147456,163840,196608,262145,262146,262148,262152,262160,262176,262208,262272,262400,262656,263168,264192,266240,270336,278528,294912,327680,393216);\n#elif HASH_SIZE == 20\nconst int SWAP_COUNT[3] = int[3](1, 21, 211);\nconst int[211] SWAP = int[211](0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,68,72,80,96,129,130,132,136,144,160,192,257,258,260,264,272,288,320,384,513,514,516,520,528,544,576,640,768,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576,32769,32770,32772,32776,32784,32800,32832,32896,33024,33280,33792,34816,36864,40960,49152,65537,65538,65540,65544,65552,65568,65600,65664,65792,66048,66560,67584,69632,73728,81920,98304,131073,131074,131076,131080,131088,131104,131136,131200,131328,131584,132096,133120,135168,139264,147456,163840,196608,262145,262146,262148,262152,262160,262176,262208,262272,262400,262656,263168,264192,266240,270336,278528,294912,327680,393216,524289,524290,524292,524296,524304,524320,524352,524416,524544,524800,525312,526336,528384,532480,540672,557056,589824,655360,786432);\n#else\n#error Invalid HASH_SIZE\n#endif\n#if LEVEL < 0 || LEVEL > 2\n#error Invalid LEVEL\n#endif\nconst uint END_OF_LIST = 0xFFFFFFFFu;\nconst int NUMBER_OF_HASHES = SWAP_COUNT[LEVEL];\nuint sequenceElement(int sequenceIndex, int elementIndex)\n{\nint offset = (SEQUENCE_MAXLEN) * sequenceIndex + elementIndex;\nuvec4 tuple = sequences[offset / 4];\nreturn tuple[offset & 3];\n}\nint descriptorHash(uint[DESCRIPTOR_SIZE] descriptor, int sequenceIndex)\n{\nuint bit, b, m;\nint hash = 0;\n@unroll\nfor(int i = 0; i < HASH_SIZE; i++) {\nbit = sequenceElement(sequenceIndex, i);\nb = bit >> 3u;\nm = 1u << (bit & 7u);\nhash = (hash << 1) | int((descriptor[b] & m) != 0u);\n}\nreturn hash;\n}\n#define readTableData(tables, tablesStride, rasterIndex) decodeUint32(texelFetch((tables), ivec2((rasterIndex) % (tablesStride), (rasterIndex) / (tablesStride)), 0))\nvoid main()\n{\nivec2 thread = threadLocation();\nint keypointIndex = thread.x + thread.y * matcherLength;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\ncolor = encodeKeypointMatch(MATCH_NOT_FOUND);\nif(isBadKeypoint(keypoint))\nreturn;\nKeypointMatch candidate = decodeKeypointMatch(threadPixel(candidates));\nKeypointMatch mfilter = decodeKeypointMatch(threadPixel(filters));\nuint[DESCRIPTOR_SIZE] candidateDescriptor;\nuint[DESCRIPTOR_SIZE] descriptor = readKeypointDescriptor(encodedKeypoints, descriptorSize, extraSize, encoderLength, address);\nint hash0 = descriptorHash(descriptor, tableIndex);\nfor(int h = 0; h < NUMBER_OF_HASHES; h++) {\nint hash = hash0 ^ SWAP[h];\nint tableAddress = tableIndex * bucketsPerTable * bucketCapacity;\nint bucketAddress = tableAddress + hash * bucketCapacity;\nbool validEntry = true;\nfor(int b = 0; b < bucketCapacity; b++) {\nint entryAddress = bucketAddress + b;\nuint entry = validEntry ? readTableData(tables, tablesStride, entryAddress) : END_OF_LIST;\nvalidEntry = (validEntry && entry != END_OF_LIST);\nint candidateIndex = int(entry);\ncandidateDescriptor = readKeypointDescriptorFromDB(descriptorDB, descriptorDBStride, validEntry ? candidateIndex : -1);\nint descriptorDistance = distanceBetweenKeypointDescriptors(descriptor, candidateDescriptor);\nKeypointMatch match = KeypointMatch(candidateIndex, descriptorDistance);\nbool betterThanCandidate = (match.dist < candidate.dist) || (match.dist == candidate.dist && match.index > candidate.index);\nbool worseThanFilter = (match.dist > mfilter.dist) || (match.dist == mfilter.dist && match.index < mfilter.index);\nbool nicerMatch = (validEntry && betterThanCandidate && worseThanFilter);\nivec2 v = nicerMatch ? ivec2(match.index, match.dist) : ivec2(candidate.index, candidate.dist);\ncandidate = KeypointMatch(v.x, v.y);\n}\n}\ncolor = encodeKeypointMatch(candidate);\n}'},2648:e=>{e.exports='@include "keypoints.glsl"\n@include "int32.glsl"\n#if !defined(STAGE)\n#error Undefined STAGE\n#elif STAGE == 1\nuniform sampler2D encodedKeypointsA;\nuniform sampler2D encodedKeypointsB;\nuniform int encoderLengthA;\nuniform int encoderLengthB;\nuniform int encoderCapacityA;\nuniform int encoderCapacityB;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#elif STAGE == 2\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int maxKeypoints;\n#elif STAGE == 3\nuniform sampler2D array;\nuniform int blockSize;\n#elif STAGE == 4\nuniform sampler2D array;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#elif STAGE == 5\nuniform sampler2D array;\n#else\n#error Invalid STAGE\n#endif\n#define NULL_KEYPOINT_INDEX 0xFFFF\nconst highp uint UNIT = 0x10000u;\nvoid main()\n{\n#if STAGE == 1\nivec2 thread = threadLocation();\nKeypointAddress addr = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint keypointIndex = findKeypointIndex(addr, descriptorSize, extraSize);\nint newKeypointIndex = keypointIndex < encoderCapacityA ? keypointIndex : keypointIndex - encoderCapacityA;\ncolor = encodeNullKeypoint();\nif(newKeypointIndex >= max(encoderCapacityA, encoderCapacityB))\nreturn;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\naddr = KeypointAddress(newKeypointIndex * pixelsPerKeypoint, addr.offset);\nvec4 dataA = readKeypointData(encodedKeypointsA, encoderLengthA, addr);\nvec4 dataB = readKeypointData(encodedKeypointsB, encoderLengthB, addr);\ncolor = keypointIndex < encoderCapacityA ? dataA : dataB;\n#elif STAGE == 2\nivec2 thread = threadLocation();\nint keypointIndex = thread.y * outputSize().x + thread.x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress addr = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, addr);\nbool isValid = !isNullKeypoint(keypoint) && keypointIndex < maxKeypoints;\nkeypointIndex = isValid ? keypointIndex : NULL_KEYPOINT_INDEX;\ncolor = encodeUint32(uint(keypointIndex & 0xFFFF) | (isValid ? UNIT : 0u));\n#elif STAGE == 3\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nint arrayLength = size.x * size.y;\nint arrayIndex = thread.y * size.x + thread.x;\nint arrayIndexLeft = arrayIndex - blockSize;\nint arrayIndexRight = arrayIndex + blockSize;\nint mask = int(arrayIndexRight < arrayLength || arrayIndexRight / blockSize == (arrayLength - 1) / blockSize);\narrayIndexLeft = max(0, arrayIndexLeft);\narrayIndexRight = min(arrayLength - 1, arrayIndexRight);\n#define raster2pos(k) ivec2((k) % size.x, (k) / size.x)\nuvec3 entries32 = uvec3(\ndecodeUint32(threadPixel(array)),\ndecodeUint32(texelFetch(array, raster2pos(arrayIndexLeft), 0)),\ndecodeUint32(texelFetch(array, raster2pos(arrayIndexRight), 0))\n);\nivec3 sb = ivec3((entries32 >> 16u) & 0xFFFFu);\nsb.z *= mask;\nint dblBlockSize = 2 * blockSize;\nint offset = arrayIndex % dblBlockSize;\nint s2b = sb.x + (offset < blockSize ? sb.z : sb.y);\nint l2b = offset < blockSize ? sb.x : sb.y;\nuint keypointIndex = entries32.x & 0xFFFFu;\nuint shiftedS2b = uint(s2b) << 16u;\ncolor = encodeUint32(uint(NULL_KEYPOINT_INDEX) | shiftedS2b);\nif(offset >= s2b)\nreturn;\ncolor = encodeUint32(keypointIndex | shiftedS2b);\nif(offset < l2b)\nreturn;\nvec4 entry = texelFetch(array, raster2pos(arrayIndex + blockSize - l2b), 0);\nkeypointIndex = decodeUint32(entry) & 0xFFFFu;\ncolor = encodeUint32(keypointIndex | shiftedS2b);\n#elif STAGE == 4\nivec2 thread = threadLocation();\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress addr = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint keypointIndex = findKeypointIndex(addr, descriptorSize, extraSize);\n#define raster2pos(k) ivec2((k) % size.x, (k) / size.x)\nivec2 size = textureSize(array, 0);\nuint sortedPair = decodeUint32(texelFetch(array, raster2pos(keypointIndex), 0));\nint newKeypointIndex = int(sortedPair & 0xFFFFu);\ncolor = encodeNullKeypoint();\nif(newKeypointIndex == NULL_KEYPOINT_INDEX || keypointIndex >= size.x * size.y)\nreturn;\nKeypointAddress newAddr = KeypointAddress(newKeypointIndex * pixelsPerKeypoint, addr.offset);\ncolor = readKeypointData(encodedKeypoints, encoderLength, newAddr);\n#elif STAGE == 5\nuint val = decodeUint32(threadPixel(array));\ncolor = (val & 0xFFFFu) == uint(NULL_KEYPOINT_INDEX) ? vec4(0,1,1,1) : vec4(1,0,0,1);\n#endif\n}'},8825:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\n@include "filters.glsl"\n#if !defined(USE_LAPLACIAN)\n#error Undefined USE_LAPLACIAN\n#endif\nuniform sampler2D corners;\nuniform sampler2D pyramid;\nuniform float lodStep;\n#if USE_LAPLACIAN\nuniform sampler2D pyrLaplacian;\n#endif\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(corners);\nfloat score = decodeFloat16(pixel.rb);\nfloat myEncodedLod = pixel.a;\nfloat lod = decodeLod(myEncodedLod);\nfloat lodPlus = lod + lodStep;\nfloat lodMinus = lod - lodStep;\nfloat pot = exp2(lod);\nfloat potPlus = exp2(lodPlus);\nfloat potMinus = exp2(lodMinus);\ncolor = pixel;\nif(score == 0.0f)\nreturn;\n#define P(p,u,v) textureLod(corners, texCoord + (p) * vec2((u),(v)) / texSize, 0.0f)\nvec4 pix[18];\n#define D(u,v) P(potMinus,(u),(v))\npix[0] = D(-1,-1); pix[1] = D(0,-1); pix[2] = D(1,-1);\npix[3] = D(-1,0); pix[4] = D(0,0); pix[5] = D(1,0);\npix[6] = D(-1,1); pix[7] = D(0,1); pix[8] = D(1,1);\n#define U(u,v) P(potPlus,(u),(v))\npix[9] = U(-1,-1); pix[10] = U(0,-1); pix[11] = U(1,-1);\npix[12] = U(-1,0); pix[13] = U(0,0); pix[14] = U(1,0);\npix[15] = U(-1,1); pix[16] = U(0,1); pix[17] = U(1,1);\nfloat scores[18];\n#define C(j) decodeFloat16(pix[j].rb)\nscores[0] = C(0); scores[1] = C(1); scores[2] = C(2);\nscores[3] = C(3); scores[4] = C(4); scores[5] = C(5);\nscores[6] = C(6); scores[7] = C(7); scores[8] = C(8);\nscores[9] = C(9); scores[10] = C(10); scores[11] = C(11);\nscores[12] = C(12); scores[13] = C(13); scores[14] = C(14);\nscores[15] = C(15); scores[16] = C(16); scores[17] = C(17);\nfloat lods[18];\n#define E(j) decodeLod(pix[j].a)\nlods[0] = E(0); lods[1] = E(1); lods[2] = E(2);\nlods[3] = E(3); lods[4] = E(4); lods[5] = E(5);\nlods[6] = E(6); lods[7] = E(7); lods[8] = E(8);\nlods[9] = E(9); lods[10] = E(10); lods[11] = E(11);\nlods[12] = E(12); lods[13] = E(13); lods[14] = E(14);\nlods[15] = E(15); lods[16] = E(16); lods[17] = E(17);\n#if USE_LAPLACIAN\n#define L(p,u,v) textureLod(pyrLaplacian, texCoord + (p) * vec2((u),(v)) / texSize, 0.0f)\nmat3 strengths[2];\nstrengths[0] = mat3(\n#define Lm(u,v) abs(decodeFloat16(L(potMinus,(u),(v)).xy))\nLm(-1,-1), Lm(0,-1), Lm(1,-1),\nLm(-1,0), Lm(0,0), Lm(1,0),\nLm(-1,1), Lm(0,1), Lm(1,1)\n);\nstrengths[1] = mat3(\n#define Lp(u,v) abs(decodeFloat16(L(potPlus,(u),(v)).zw))\nLp(-1,-1), Lp(0,-1), Lp(1,-1),\nLp(-1,0), Lp(0,0), Lp(1,0),\nLp(-1,1), Lp(0,1), Lp(1,1)\n);\nfloat myStrength = abs(laplacian(pyramid, vec2(thread), lod));\n#else\n#define L(u,v) (((v)+1)*3 + ((u)+1))\nmat3 strengths[2];\nstrengths[0] = mat3(\n#define Lm(u,v) scores[L((u),(v))]\nLm(-1,-1), Lm(0,-1), Lm(1,-1),\nLm(-1,0), Lm(0,0), Lm(1,0),\nLm(-1,1), Lm(0,1), Lm(1,1)\n);\nstrengths[1] = mat3(\n#define Lp(u,v) scores[9 + L((u),(v))]\nLp(-1,-1), Lp(0,-1), Lp(1,-1),\nLp(-1,0), Lp(0,0), Lp(1,0),\nLp(-1,1), Lp(0,1), Lp(1,1)\n);\nfloat myStrength = score;\n#endif\n#define B(j,lod) float(isSameLod(lods[j], (lod))) * float(scores[j] > 0.0f)\nmat3 nearLod[2];\nnearLod[0] = mat3(\n#define Bm(j) B((j), lodMinus)\nBm(0), Bm(1), Bm(2),\nBm(3), Bm(4), Bm(5),\nBm(6), Bm(7), Bm(8)\n);\nnearLod[1] = mat3(\n#define Bp(j) B((j), lodPlus)\nBp(9), Bp(10), Bp(11),\nBp(12), Bp(13), Bp(14),\nBp(15), Bp(16), Bp(17)\n);\nmat3 upStrengths = matrixCompMult(strengths[1], nearLod[1]);\nmat3 downStrengths = matrixCompMult(strengths[0], nearLod[0]);\nvec3 maxUpStrength3 = max(upStrengths[0], max(upStrengths[1], upStrengths[2]));\nvec3 maxDownStrength3 = max(downStrengths[0], max(downStrengths[1], downStrengths[2]));\nvec3 maxStrength3 = max(maxUpStrength3, maxDownStrength3);\nfloat maxStrength = max(maxStrength3.x, max(maxStrength3.y, maxStrength3.z));\ncolor.rb = encodeFloat16(score * step(maxStrength, myStrength));\n}'},5693:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\nuniform sampler2D corners;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(corners);\nfloat encodedLod = pixel.a;\nfloat score = decodeFloat16(pixel.rb);\nfloat lod = decodeLod(encodedLod);\nfloat pot = exp2(lod);\ncolor = pixel;\nif(score == 0.0f)\nreturn;\n#if 1\nvec2 gridSize = vec2(pot);\nvec2 gridLocation = floor(mod(texCoord * texSize, gridSize));\nvec2 gridDelta = gridLocation / gridSize - vec2(0.5f);\nfloat gridStep = 1.0f / pot;\nconst float adjustment = 1.25f;\ncolor.rb = encodeFloat16(0.0f);\nif(max(abs(gridDelta.x), abs(gridDelta.y)) > adjustment * gridStep)\nreturn;\n#endif\n#define P(x,y) textureLod(corners, texCoord + pot * vec2((x), (y)) / texSize, 0.0f)\nvec4 pix[9];\npix[0] = P(-1,-1); pix[1] = P(0,-1); pix[2] = P(1,-1);\npix[3] = P(-1, 0); pix[4] = pixel;   pix[5] = P(1, 0);\npix[6] = P(-1, 1); pix[7] = P(0, 1); pix[8] = P(1, 1);\n#define S(j) decodeFloat16(pix[j].rb)\nmat3 scores = mat3(\nS(0), S(1), S(2),\nS(3), S(4), S(5),\nS(6), S(7), S(8)\n);\n#define B(j) float(isSameLod(decodeLod(pix[j].a), lod))\nmat3 sameLod = mat3(\nB(0), B(1), B(2),\nB(3), B(4), B(5),\nB(6), B(7), B(8)\n);\nmat3 sameLodScores = matrixCompMult(scores, sameLod);\nvec3 maxScore3 = max(sameLodScores[0], max(sameLodScores[1], sameLodScores[2]));\nfloat maxScore = max(maxScore3.x, max(maxScore3.y, maxScore3.z));\ncolor.rb = encodeFloat16(score * step(maxScore, score));\n}'},9280:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\nuniform sampler2D image;\nuniform float lodStep;\n#if !defined(MULTISCALE)\n#error Must define MULTISCALE\n#elif MULTISCALE != 0\n#define LOD_STEP (lodStep)\n#define USE_MIDDLE_RING\n#else\n#define LOD_STEP (0.0f)\n#endif\n#define PIX(x,y) pixelAtShortOffset(image, ivec2((x),(y)))\n#define L2(v,i) bvec2(isSameEncodedLod(v[i].a, alphaMinus), isSameEncodedLod(v[i].a, alphaPlus))\n#define L3(v,i) bvec3(isSameEncodedLod(v[i].a, alpha), isSameEncodedLod(v[i].a, alphaMinus), isSameEncodedLod(v[i].a, alphaPlus))\n#define S3(v,i) decodeFloat16(v[i].rb) * float(any(L3(v,i)))\n#define S2(v,i) decodeFloat16(v[i].rb) * float(any(L2(v,i)))\n#define P(i) S3(p,i)\n#define Q(i) S2(q,i)\n#define R(i) S2(r,i)\nconst vec4 O = vec4(0.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat lod = decodeLod(pixel.a);\nfloat score = decodeFloat16(pixel.rb);\ncolor = pixel;\nif(score == 0.0f)\nreturn;\nvec4 p[8];\np[0] = PIX(0,1); p[1] = PIX(1,1); p[2] = PIX(1,0); p[3] = PIX(1,-1);\np[4] = PIX(0,-1); p[5] = PIX(-1,-1); p[6] = PIX(-1,0); p[7] = PIX(-1,1);\n#ifdef USE_MIDDLE_RING\nvec4 q[16];\nq[0] = PIX(0,2); q[1] = PIX(1,2); q[2] = PIX(2,2); q[3] = PIX(2,1);\nq[4] = PIX(2,0); q[5] = PIX(2,-1); q[6] = PIX(2,-2); q[7] = PIX(1,-2);\nq[8] = PIX(0,-2); q[9] = PIX(-1,-2); q[10] = PIX(-2,-2); q[11] = PIX(-2,-1);\nq[12] = PIX(-2,0); q[13] = PIX(-2,1); q[14] = PIX(-2,2); q[15] = PIX(-1,2);\n#else\nvec4 q[16];\nq[0] = O; q[1] = O; q[2] = O; q[3] = O;\nq[4] = O; q[5] = O; q[6] = O; q[7] = O;\nq[8] = O; q[9] = O; q[10] = O; q[11] = O;\nq[12] = O; q[13] = O; q[14] = O; q[15] = O;\n#endif\n#ifdef USE_OUTER_RING\nvec4 r[16];\nr[0] = PIX(0,3); r[1] = PIX(1,3); r[2] = PIX(3,1); r[3] = PIX(3,0);\nr[4] = PIX(3,-1); r[5] = PIX(1,-3); r[6] = PIX(0,-3); r[7] = PIX(-1,-3);\nr[8] = PIX(-3,-1); r[9] = PIX(-3,0); r[10] = PIX(-3,1); r[11] = PIX(-1,3);\nr[12] = PIX(0,4); r[13] = PIX(4,0); r[14] = PIX(0,-4); r[15] = PIX(-4,0);\n#else\nvec4 r[16];\nr[0] = O; r[1] = O; r[2] = O; r[3] = O;\nr[4] = O; r[5] = O; r[6] = O; r[7] = O;\nr[8] = O; r[9] = O; r[10] = O; r[11] = O;\nr[12] = O; r[13] = O; r[14] = O; r[15] = O;\n#endif\nfloat alphaPlus = encodeLod(lod + LOD_STEP);\nfloat alphaMinus = encodeLod(lod - LOD_STEP);\nfloat alpha = encodeLod(lod);\nmat3 innerScore = mat3(\nP(0), P(1), P(2), P(3),\nP(4), P(5), P(6), P(7),\n0.0f);\nmat4 middleScore = mat4(\nQ(0), Q(1), Q(2), Q(3),\nQ(4), Q(5), Q(6), Q(7),\nQ(8), Q(9), Q(10), Q(11),\nQ(12), Q(13), Q(14), Q(15)\n);\nmat4 outerScore = mat4(\nR(0), R(1), R(2), R(3),\nR(4), R(5), R(6), R(7),\nR(8), R(9), R(10), R(11),\nR(12), R(13), R(14), R(15)\n);\nvec3 maxInnerScore3 = max(innerScore[0], max(innerScore[1], innerScore[2]));\nvec4 maxMiddleScore4 = max(max(middleScore[0], middleScore[1]), max(middleScore[2], middleScore[3]));\nvec4 maxOuterScore4 = max(max(outerScore[0], outerScore[1]), max(outerScore[2], outerScore[3]));\nfloat maxInnerScore = max(maxInnerScore3.x, max(maxInnerScore3.y, maxInnerScore3.z));\nfloat maxMiddleScore = max(max(maxMiddleScore4.x, maxMiddleScore4.y), max(maxMiddleScore4.z, maxMiddleScore4.w));\nfloat maxOuterScore = max(max(maxOuterScore4.x, maxOuterScore4.y), max(maxOuterScore4.z, maxOuterScore4.w));\nfloat maxScore = max(maxInnerScore, max(maxMiddleScore, maxOuterScore));\nfloat finalScore = step(maxScore, score) * score;\ncolor.rb = encodeFloat16(finalScore);\n}'},9108:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedCorners;\nuniform int encoderLength;\nuniform sampler2D image;\nuniform int extraSize;\nconst int descriptorSize = 32;\n#define P(a,b,c,d) ivec4((a),(b),(c),(d))\nconst ivec4 pat31[256] = ivec4[256](\nP(8,-3,9,5),\nP(4,2,7,-12),\nP(-11,9,-8,2),\nP(7,-12,12,-13),\nP(2,-13,2,12),\nP(1,-7,1,6),\nP(-2,-10,-2,-4),\nP(-13,-13,-11,-8),\nP(-13,-3,-12,-9),\nP(10,4,11,9),\nP(-13,-8,-8,-9),\nP(-11,7,-9,12),\nP(7,7,12,6),\nP(-4,-5,-3,0),\nP(-13,2,-12,-3),\nP(-9,0,-7,5),\nP(12,-6,12,-1),\nP(-3,6,-2,12),\nP(-6,-13,-4,-8),\nP(11,-13,12,-8),\nP(4,7,5,1),\nP(5,-3,10,-3),\nP(3,-7,6,12),\nP(-8,-7,-6,-2),\nP(-2,11,-1,-10),\nP(-13,12,-8,10),\nP(-7,3,-5,-3),\nP(-4,2,-3,7),\nP(-10,-12,-6,11),\nP(5,-12,6,-7),\nP(5,-6,7,-1),\nP(1,0,4,-5),\nP(9,11,11,-13),\nP(4,7,4,12),\nP(2,-1,4,4),\nP(-4,-12,-2,7),\nP(-8,-5,-7,-10),\nP(4,11,9,12),\nP(0,-8,1,-13),\nP(-13,-2,-8,2),\nP(-3,-2,-2,3),\nP(-6,9,-4,-9),\nP(8,12,10,7),\nP(0,9,1,3),\nP(7,-5,11,-10),\nP(-13,-6,-11,0),\nP(10,7,12,1),\nP(-6,-3,-6,12),\nP(10,-9,12,-4),\nP(-13,8,-8,-12),\nP(-13,0,-8,-4),\nP(3,3,7,8),\nP(5,7,10,-7),\nP(-1,7,1,-12),\nP(3,-10,5,6),\nP(2,-4,3,-10),\nP(-13,0,-13,5),\nP(-13,-7,-12,12),\nP(-13,3,-11,8),\nP(-7,12,-4,7),\nP(6,-10,12,8),\nP(-9,-1,-7,-6),\nP(-2,-5,0,12),\nP(-12,5,-7,5),\nP(3,-10,8,-13),\nP(-7,-7,-4,5),\nP(-3,-2,-1,-7),\nP(2,9,5,-11),\nP(-11,-13,-5,-13),\nP(-1,6,0,-1),\nP(5,-3,5,2),\nP(-4,-13,-4,12),\nP(-9,-6,-9,6),\nP(-12,-10,-8,-4),\nP(10,2,12,-3),\nP(7,12,12,12),\nP(-7,-13,-6,5),\nP(-4,9,-3,4),\nP(7,-1,12,2),\nP(-7,6,-5,1),\nP(-13,11,-12,5),\nP(-3,7,-2,-6),\nP(7,-8,12,-7),\nP(-13,-7,-11,-12),\nP(1,-3,12,12),\nP(2,-6,3,0),\nP(-4,3,-2,-13),\nP(-1,-13,1,9),\nP(7,1,8,-6),\nP(1,-1,3,12),\nP(9,1,12,6),\nP(-1,-9,-1,3),\nP(-13,-13,-10,5),\nP(7,7,10,12),\nP(12,-5,12,9),\nP(6,3,7,11),\nP(5,-13,6,10),\nP(2,-12,2,3),\nP(3,8,4,-6),\nP(2,6,12,-13),\nP(9,-12,10,3),\nP(-8,4,-7,9),\nP(-11,12,-4,-6),\nP(1,12,2,-8),\nP(6,-9,7,-4),\nP(2,3,3,-2),\nP(6,3,11,0),\nP(3,-3,8,-8),\nP(7,8,9,3),\nP(-11,-5,-6,-4),\nP(-10,11,-5,10),\nP(-5,-8,-3,12),\nP(-10,5,-9,0),\nP(8,-1,12,-6),\nP(4,-6,6,-11),\nP(-10,12,-8,7),\nP(4,-2,6,7),\nP(-2,0,-2,12),\nP(-5,-8,-5,2),\nP(7,-6,10,12),\nP(-9,-13,-8,-8),\nP(-5,-13,-5,-2),\nP(8,-8,9,-13),\nP(-9,-11,-9,0),\nP(1,-8,1,-2),\nP(7,-4,9,1),\nP(-2,1,-1,-4),\nP(11,-6,12,-11),\nP(-12,-9,-6,4),\nP(3,7,7,12),\nP(5,5,10,8),\nP(0,-4,2,8),\nP(-9,12,-5,-13),\nP(0,7,2,12),\nP(-1,2,1,7),\nP(5,11,7,-9),\nP(3,5,6,-8),\nP(-13,-4,-8,9),\nP(-5,9,-3,-3),\nP(-4,-7,-3,-12),\nP(6,5,8,0),\nP(-7,6,-6,12),\nP(-13,6,-5,-2),\nP(1,-10,3,10),\nP(4,1,8,-4),\nP(-2,-2,2,-13),\nP(2,-12,12,12),\nP(-2,-13,0,-6),\nP(4,1,9,3),\nP(-6,-10,-3,-5),\nP(-3,-13,-1,1),\nP(7,5,12,-11),\nP(4,-2,5,-7),\nP(-13,9,-9,-5),\nP(7,1,8,6),\nP(7,-8,7,6),\nP(-7,-4,-7,1),\nP(-8,11,-7,-8),\nP(-13,6,-12,-8),\nP(2,4,3,9),\nP(10,-5,12,3),\nP(-6,-5,-6,7),\nP(8,-3,9,-8),\nP(2,-12,2,8),\nP(-11,-2,-10,3),\nP(-12,-13,-7,-9),\nP(-11,0,-10,-5),\nP(5,-3,11,8),\nP(-2,-13,-1,12),\nP(-1,-8,0,9),\nP(-13,-11,-12,-5),\nP(-10,-2,-10,11),\nP(-3,9,-2,-13),\nP(2,-3,3,2),\nP(-9,-13,-4,0),\nP(-4,6,-3,-10),\nP(-4,12,-2,-7),\nP(-6,-11,-4,9),\nP(6,-3,6,11),\nP(-13,11,-5,5),\nP(11,11,12,6),\nP(7,-5,12,-2),\nP(-1,12,0,7),\nP(-4,-8,-3,-2),\nP(-7,1,-6,7),\nP(-13,-12,-8,-13),\nP(-7,-2,-6,-8),\nP(-8,5,-6,-9),\nP(-5,-1,-4,5),\nP(-13,7,-8,10),\nP(1,5,5,-13),\nP(1,0,10,-13),\nP(9,12,10,-1),\nP(5,-8,10,-9),\nP(-1,11,1,-13),\nP(-9,-3,-6,2),\nP(-1,-10,1,12),\nP(-13,1,-8,-10),\nP(8,-11,10,-6),\nP(2,-13,3,-6),\nP(7,-13,12,-9),\nP(-10,-10,-5,-7),\nP(-10,-8,-8,-13),\nP(4,-6,8,5),\nP(3,12,8,-13),\nP(-4,2,-3,-3),\nP(5,-13,10,-12),\nP(4,-13,5,-1),\nP(-9,9,-4,3),\nP(0,3,3,-9),\nP(-12,1,-6,1),\nP(3,2,4,-8),\nP(-10,-10,-10,9),\nP(8,-13,12,12),\nP(-8,-12,-6,-5),\nP(2,2,3,7),\nP(10,6,11,-8),\nP(6,8,8,-12),\nP(-7,10,-6,5),\nP(-3,-9,-3,9),\nP(-1,-13,-1,5),\nP(-3,-7,-3,4),\nP(-8,-2,-8,3),\nP(4,2,12,12),\nP(2,-5,3,11),\nP(6,-9,11,-13),\nP(3,-1,7,12),\nP(11,-1,12,4),\nP(-3,0,-3,6),\nP(4,-11,4,12),\nP(2,-4,2,1),\nP(-10,-6,-8,1),\nP(-13,7,-11,1),\nP(-13,12,-11,-13),\nP(6,0,11,-13),\nP(0,-1,1,4),\nP(-13,3,-9,-2),\nP(-9,8,-6,-3),\nP(-13,-6,-8,-2),\nP(5,-9,8,10),\nP(2,7,3,-9),\nP(-1,-6,-1,-1),\nP(9,5,11,-2),\nP(11,-3,12,-8),\nP(3,0,3,5),\nP(-1,4,0,10),\nP(3,-6,4,5),\nP(-13,0,-10,5),\nP(5,8,12,11),\nP(8,9,9,-6),\nP(7,-4,8,-12),\nP(-10,4,-10,9),\nP(7,3,12,4),\nP(9,-7,10,-2),\nP(7,0,12,-2),\nP(-1,-6,0,-11)\n);\nvoid getPair(int index, mat2 rot, out vec2 p, out vec2 q)\n{\nivec4 data = pat31[index];\nvec2 op = vec2(data.xy);\nvec2 oq = vec2(data.zw);\np = rot * op;\nq = rot * oq;\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedCorners);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint descriptorCell = address.offset - sizeofEncodedKeypoint(0, extraSize) / 4;\ncolor = pixel;\nif(descriptorCell < 0)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedCorners, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nfloat degreesOrientation = round(360.0f + degrees(keypoint.orientation));\nfloat orientation = radians(degreesOrientation - mod(degreesOrientation, 12.0f));\nfloat kcos = cos(orientation);\nfloat ksin = sin(orientation);\nmat2 rot = mat2(kcos, ksin, -ksin, kcos);\nfloat pot = exp2(keypoint.lod);\nint patternStart = 32 * descriptorCell;\nuint test[4] = uint[4](0u, 0u, 0u, 0u);\nfor(int t = 0; t < 4; t++) {\nuint bits = 0u;\nvec2 p, q;\nvec4 a, b;\nint i = t * 8;\n@unroll\nfor(int j = 0; j < 8; j++) {\ngetPair(patternStart + i + j, rot, p, q);\na = texelFetch(image, ivec2(round(keypoint.position + pot * p)), 0);\nb = texelFetch(image, ivec2(round(keypoint.position + pot * q)), 0);\nbits |= uint(a.g < b.g) << j;\n}\ntest[t] = bits;\n}\ncolor = vec4(test[0], test[1], test[2], test[3]) / 255.0f;\n}'},7137:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D image;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#define P(x,y) ivec2((x),(y))\nconst int diskPointCount[16] = int[16](0, 4, 12, 28, 48, 80, 112, 148, 196, 252, 316, 376, 440, 528, 612, 708);\nconst ivec2 diskPoint[708] = ivec2[708](\nP(0,-1),P(-1,0),P(1,0),P(0,1),\nP(-1,-1),P(1,-1),P(-1,1),P(1,1),P(0,-2),P(-2,0),P(2,0),P(0,2),\nP(-1,-2),P(1,-2),P(-2,-1),P(2,-1),P(-2,1),P(2,1),P(-1,2),P(1,2),P(-2,-2),P(2,-2),P(-2,2),P(2,2),P(0,-3),P(-3,0),P(3,0),P(0,3),\nP(-1,-3),P(1,-3),P(-3,-1),P(3,-1),P(-3,1),P(3,1),P(-1,3),P(1,3),P(-2,-3),P(2,-3),P(-3,-2),P(3,-2),P(-3,2),P(3,2),P(-2,3),P(2,3),P(0,-4),P(-4,0),P(4,0),P(0,4),\nP(-1,-4),P(1,-4),P(-4,-1),P(4,-1),P(-4,1),P(4,1),P(-1,4),P(1,4),P(-3,-3),P(3,-3),P(-3,3),P(3,3),P(-2,-4),P(2,-4),P(-4,-2),P(4,-2),P(-4,2),P(4,2),P(-2,4),P(2,4),P(0,-5),P(-3,-4),P(3,-4),P(-4,-3),P(4,-3),P(-5,0),P(5,0),P(-4,3),P(4,3),P(-3,4),P(3,4),P(0,5),\nP(-1,-5),P(1,-5),P(-5,-1),P(5,-1),P(-5,1),P(5,1),P(-1,5),P(1,5),P(-2,-5),P(2,-5),P(-5,-2),P(5,-2),P(-5,2),P(5,2),P(-2,5),P(2,5),P(-4,-4),P(4,-4),P(-4,4),P(4,4),P(-3,-5),P(3,-5),P(-5,-3),P(5,-3),P(-5,3),P(5,3),P(-3,5),P(3,5),P(0,-6),P(-6,0),P(6,0),P(0,6),\nP(-1,-6),P(1,-6),P(-6,-1),P(6,-1),P(-6,1),P(6,1),P(-1,6),P(1,6),P(-2,-6),P(2,-6),P(-6,-2),P(6,-2),P(-6,2),P(6,2),P(-2,6),P(2,6),P(-4,-5),P(4,-5),P(-5,-4),P(5,-4),P(-5,4),P(5,4),P(-4,5),P(4,5),P(-3,-6),P(3,-6),P(-6,-3),P(6,-3),P(-6,3),P(6,3),P(-3,6),P(3,6),P(0,-7),P(-7,0),P(7,0),P(0,7),\nP(-1,-7),P(1,-7),P(-5,-5),P(5,-5),P(-7,-1),P(7,-1),P(-7,1),P(7,1),P(-5,5),P(5,5),P(-1,7),P(1,7),P(-4,-6),P(4,-6),P(-6,-4),P(6,-4),P(-6,4),P(6,4),P(-4,6),P(4,6),P(-2,-7),P(2,-7),P(-7,-2),P(7,-2),P(-7,2),P(7,2),P(-2,7),P(2,7),P(-3,-7),P(3,-7),P(-7,-3),P(7,-3),P(-7,3),P(7,3),P(-3,7),P(3,7),P(-5,-6),P(5,-6),P(-6,-5),P(6,-5),P(-6,5),P(6,5),P(-5,6),P(5,6),P(0,-8),P(-8,0),P(8,0),P(0,8),\nP(-1,-8),P(1,-8),P(-4,-7),P(4,-7),P(-7,-4),P(7,-4),P(-8,-1),P(8,-1),P(-8,1),P(8,1),P(-7,4),P(7,4),P(-4,7),P(4,7),P(-1,8),P(1,8),P(-2,-8),P(2,-8),P(-8,-2),P(8,-2),P(-8,2),P(8,2),P(-2,8),P(2,8),P(-6,-6),P(6,-6),P(-6,6),P(6,6),P(-3,-8),P(3,-8),P(-8,-3),P(8,-3),P(-8,3),P(8,3),P(-3,8),P(3,8),P(-5,-7),P(5,-7),P(-7,-5),P(7,-5),P(-7,5),P(7,5),P(-5,7),P(5,7),P(-4,-8),P(4,-8),P(-8,-4),P(8,-4),P(-8,4),P(8,4),P(-4,8),P(4,8),P(0,-9),P(-9,0),P(9,0),P(0,9),\nP(-1,-9),P(1,-9),P(-9,-1),P(9,-1),P(-9,1),P(9,1),P(-1,9),P(1,9),P(-2,-9),P(2,-9),P(-6,-7),P(6,-7),P(-7,-6),P(7,-6),P(-9,-2),P(9,-2),P(-9,2),P(9,2),P(-7,6),P(7,6),P(-6,7),P(6,7),P(-2,9),P(2,9),P(-5,-8),P(5,-8),P(-8,-5),P(8,-5),P(-8,5),P(8,5),P(-5,8),P(5,8),P(-3,-9),P(3,-9),P(-9,-3),P(9,-3),P(-9,3),P(9,3),P(-3,9),P(3,9),P(-4,-9),P(4,-9),P(-9,-4),P(9,-4),P(-9,4),P(9,4),P(-4,9),P(4,9),P(-7,-7),P(7,-7),P(-7,7),P(7,7),P(0,-10),P(-6,-8),P(6,-8),P(-8,-6),P(8,-6),P(-10,0),P(10,0),P(-8,6),P(8,6),P(-6,8),P(6,8),P(0,10),\nP(-1,-10),P(1,-10),P(-10,-1),P(10,-1),P(-10,1),P(10,1),P(-1,10),P(1,10),P(-2,-10),P(2,-10),P(-10,-2),P(10,-2),P(-10,2),P(10,2),P(-2,10),P(2,10),P(-5,-9),P(5,-9),P(-9,-5),P(9,-5),P(-9,5),P(9,5),P(-5,9),P(5,9),P(-3,-10),P(3,-10),P(-10,-3),P(10,-3),P(-10,3),P(10,3),P(-3,10),P(3,10),P(-7,-8),P(7,-8),P(-8,-7),P(8,-7),P(-8,7),P(8,7),P(-7,8),P(7,8),P(-4,-10),P(4,-10),P(-10,-4),P(10,-4),P(-10,4),P(10,4),P(-4,10),P(4,10),P(-6,-9),P(6,-9),P(-9,-6),P(9,-6),P(-9,6),P(9,6),P(-6,9),P(6,9),P(0,-11),P(-11,0),P(11,0),P(0,11),\nP(-1,-11),P(1,-11),P(-11,-1),P(11,-1),P(-11,1),P(11,1),P(-1,11),P(1,11),P(-2,-11),P(2,-11),P(-5,-10),P(5,-10),P(-10,-5),P(10,-5),P(-11,-2),P(11,-2),P(-11,2),P(11,2),P(-10,5),P(10,5),P(-5,10),P(5,10),P(-2,11),P(2,11),P(-8,-8),P(8,-8),P(-8,8),P(8,8),P(-3,-11),P(3,-11),P(-7,-9),P(7,-9),P(-9,-7),P(9,-7),P(-11,-3),P(11,-3),P(-11,3),P(11,3),P(-9,7),P(9,7),P(-7,9),P(7,9),P(-3,11),P(3,11),P(-6,-10),P(6,-10),P(-10,-6),P(10,-6),P(-10,6),P(10,6),P(-6,10),P(6,10),P(-4,-11),P(4,-11),P(-11,-4),P(11,-4),P(-11,4),P(11,4),P(-4,11),P(4,11),P(0,-12),P(-12,0),P(12,0),P(0,12),\nP(-1,-12),P(1,-12),P(-8,-9),P(8,-9),P(-9,-8),P(9,-8),P(-12,-1),P(12,-1),P(-12,1),P(12,1),P(-9,8),P(9,8),P(-8,9),P(8,9),P(-1,12),P(1,12),P(-5,-11),P(5,-11),P(-11,-5),P(11,-5),P(-11,5),P(11,5),P(-5,11),P(5,11),P(-2,-12),P(2,-12),P(-12,-2),P(12,-2),P(-12,2),P(12,2),P(-2,12),P(2,12),P(-7,-10),P(7,-10),P(-10,-7),P(10,-7),P(-10,7),P(10,7),P(-7,10),P(7,10),P(-3,-12),P(3,-12),P(-12,-3),P(12,-3),P(-12,3),P(12,3),P(-3,12),P(3,12),P(-6,-11),P(6,-11),P(-11,-6),P(11,-6),P(-11,6),P(11,6),P(-6,11),P(6,11),P(-4,-12),P(4,-12),P(-12,-4),P(12,-4),P(-12,4),P(12,4),P(-4,12),P(4,12),P(-9,-9),P(9,-9),P(-9,9),P(9,9),P(-8,-10),P(8,-10),P(-10,-8),P(10,-8),P(-10,8),P(10,8),P(-8,10),P(8,10),P(0,-13),P(-5,-12),P(5,-12),P(-12,-5),P(12,-5),P(-13,0),P(13,0),P(-12,5),P(12,5),P(-5,12),P(5,12),P(0,13),\nP(-1,-13),P(1,-13),P(-7,-11),P(7,-11),P(-11,-7),P(11,-7),P(-13,-1),P(13,-1),P(-13,1),P(13,1),P(-11,7),P(11,7),P(-7,11),P(7,11),P(-1,13),P(1,13),P(-2,-13),P(2,-13),P(-13,-2),P(13,-2),P(-13,2),P(13,2),P(-2,13),P(2,13),P(-3,-13),P(3,-13),P(-13,-3),P(13,-3),P(-13,3),P(13,3),P(-3,13),P(3,13),P(-6,-12),P(6,-12),P(-12,-6),P(12,-6),P(-12,6),P(12,6),P(-6,12),P(6,12),P(-9,-10),P(9,-10),P(-10,-9),P(10,-9),P(-10,9),P(10,9),P(-9,10),P(9,10),P(-4,-13),P(4,-13),P(-8,-11),P(8,-11),P(-11,-8),P(11,-8),P(-13,-4),P(13,-4),P(-13,4),P(13,4),P(-11,8),P(11,8),P(-8,11),P(8,11),P(-4,13),P(4,13),P(-7,-12),P(7,-12),P(-12,-7),P(12,-7),P(-12,7),P(12,7),P(-7,12),P(7,12),P(-5,-13),P(5,-13),P(-13,-5),P(13,-5),P(-13,5),P(13,5),P(-5,13),P(5,13),P(0,-14),P(-14,0),P(14,0),P(0,14),\nP(-1,-14),P(1,-14),P(-14,-1),P(14,-1),P(-14,1),P(14,1),P(-1,14),P(1,14),P(-2,-14),P(2,-14),P(-10,-10),P(10,-10),P(-14,-2),P(14,-2),P(-14,2),P(14,2),P(-10,10),P(10,10),P(-2,14),P(2,14),P(-9,-11),P(9,-11),P(-11,-9),P(11,-9),P(-11,9),P(11,9),P(-9,11),P(9,11),P(-3,-14),P(3,-14),P(-6,-13),P(6,-13),P(-13,-6),P(13,-6),P(-14,-3),P(14,-3),P(-14,3),P(14,3),P(-13,6),P(13,6),P(-6,13),P(6,13),P(-3,14),P(3,14),P(-8,-12),P(8,-12),P(-12,-8),P(12,-8),P(-12,8),P(12,8),P(-8,12),P(8,12),P(-4,-14),P(4,-14),P(-14,-4),P(14,-4),P(-14,4),P(14,4),P(-4,14),P(4,14),P(-7,-13),P(7,-13),P(-13,-7),P(13,-7),P(-13,7),P(13,7),P(-7,13),P(7,13),P(-5,-14),P(5,-14),P(-10,-11),P(10,-11),P(-11,-10),P(11,-10),P(-14,-5),P(14,-5),P(-14,5),P(14,5),P(-11,10),P(11,10),P(-10,11),P(10,11),P(-5,14),P(5,14),P(0,-15),P(-9,-12),P(9,-12),P(-12,-9),P(12,-9),P(-15,0),P(15,0),P(-12,9),P(12,9),P(-9,12),P(9,12),P(0,15)\n);\nconst int DEFAULT_PATCH_RADIUS = 15;\nconst int MIN_PATCH_RADIUS = 2;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nint keypointIndex = thread.x + thread.y * outputSize().x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nvec2 m = vec2(0.0f);\nfloat pot = exp2(keypoint.lod);\nvec2 imageSize = vec2(textureSize(image, 0));\nint scaledRadius = int(ceil(float(DEFAULT_PATCH_RADIUS) / pot));\nint radius = max(scaledRadius, MIN_PATCH_RADIUS);\nint count = diskPointCount[radius];\nfor(int j = 0; j < count; j++) {\nvec2 offset = vec2(diskPoint[j]);\nvec2 position = keypoint.position + round(pot * offset);\nvec4 patchPixel = texture(image, (position + vec2(0.5f)) / imageSize);\nm += offset * patchPixel.g;\n}\nfloat angle = fastAtan2(m.y, m.x);\nfloat encodedOrientation = encodeKeypointOrientation(angle);\ncolor = vec4(0.0f, encodedOrientation, 0.0f, 0.0f);\n}'},9739:e=>{e.exports='@include "keypoints.glsl"\n@include "filters.glsl"\n#if !defined(METHOD)\n#error Undefined METHOD\n#endif\nuniform sampler2D pyramid;\nuniform float lodStep;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#if METHOD == 1\nuniform int threshold;\n#endif\nconst float eps = 1e-6;\nfloat cornerStrength(vec2 position, float lod)\n{\n#if METHOD == 0\nreturn laplacian(pyramid, position, lod);\n#elif METHOD == 1\nfloat pot = exp2(lod);\nfloat t = float(clamp(threshold, 0, 255)) / 255.0f;\n#define P(x,y) pyrPixelAtOffset(pyramid, lod, pot, ivec2((x),(y))).g\nmat4 mp = mat4(\nP(0,3),P(3,0),P(0,-3),P(-3,0),\nP(1,3),P(2,2),P(3,1),P(3,-1),\nP(2,-2),P(1,-3),P(-1,-3),P(-2,-2),\nP(-3,-1),P(-3,1),P(-2,2),P(-1,3)\n);\nfloat c = P(0,0);\nfloat ct = c + t, c_t = c - t;\nmat4 mct = mp - mat4(ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct,ct);\nmat4 mc_t = mat4(c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t,c_t) - mp;\nconst vec4 zeros = vec4(0.0f), ones = vec4(1.0f);\nvec4 bs = max(mct[0], zeros), ds = max(mc_t[0], zeros);\nbs += max(mct[1], zeros);     ds += max(mc_t[1], zeros);\nbs += max(mct[2], zeros);     ds += max(mc_t[2], zeros);\nbs += max(mct[3], zeros);     ds += max(mc_t[3], zeros);\nreturn max(dot(bs, ones), dot(ds, ones)) / 16.0f;\n#else\n#error Invalid method\n#endif\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\ncolor = pixel;\nif(address.offset != 1)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nvec3 strength = vec3(\ncornerStrength(keypoint.position, max(0.0f, keypoint.lod - lodStep)),\ncornerStrength(keypoint.position, keypoint.lod),\ncornerStrength(keypoint.position, keypoint.lod + lodStep)\n);\nvec3 p = mat3(\n2, -3, 1,\n-4, 4, 0,\n2, -1, 0\n) * strength;\nfloat maxStrength = max(strength.x, max(strength.y, strength.z));\nvec3 diffStrength = abs(strength - vec3(maxStrength));\nvec3 strengthIndicators = vec3(lessThan(diffStrength, vec3(eps)));\nfloat maxPoint = min(1.0f, dot(vec3(0.0f, 0.5f, 1.0f), strengthIndicators));\nbool hasMax = p.x < -eps;\nfloat pmax = hasMax ? -0.5f * p.y / p.x : maxPoint;\nfloat alpha = abs(pmax - 0.5f) <= 0.5f ? pmax : maxPoint;\nfloat lodOffset = mix(-lodStep, lodStep, alpha);\nfloat lod = keypoint.lod + lodOffset;\ncolor.r = encodeLod(lod);\n}'},8231:e=>{e.exports='@include "float16.glsl"\nuniform sampler2D corners;\nuniform int iterationNumber;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 bounds = outputSize();\nint jump = (1 << iterationNumber);\nint clusterLength = jump << 1;\nint clusterMask = clusterLength - 1;\nivec2 clusterPos = ivec2(thread >> (1 + iterationNumber)) << (1 + iterationNumber);\nivec2 next1 = clusterPos + ((thread - clusterPos + ivec2(jump, 0)) & clusterMask);\nivec2 next2 = clusterPos + ((thread - clusterPos + ivec2(0, jump)) & clusterMask);\nivec2 next3 = clusterPos + ((thread - clusterPos + ivec2(jump, jump)) & clusterMask);\nvec4 p0 = threadPixel(corners);\nvec4 p1 = texelFetch(corners, next1 % bounds, 0);\nvec4 p2 = texelFetch(corners, next2 % bounds, 0);\nvec4 p3 = texelFetch(corners, next3 % bounds, 0);\nfloat s0 = decodeFloat16(p0.rb);\nfloat s1 = decodeFloat16(p1.rb);\nfloat s2 = decodeFloat16(p2.rb);\nfloat s3 = decodeFloat16(p3.rb);\nbool b0 = s0 >= s1 && s0 >= s2 && s0 >= s3;\nbool b1 = s1 >= s0 && s1 >= s2 && s1 >= s3;\nbool b2 = s2 >= s0 && s2 >= s1 && s2 >= s3;\ncolor = vec4(0.0f);\ncolor.rb = b0 ? p0.rb : (\nb1 ? p1.rb : (\nb2 ? p2.rb : p3.rb\n)\n);\n}'},2518:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#if PERMUTATION_MAXLEN % 4 > 0 || PERMUTATION_MAXLEN * 4 > 16384\n#error Invalid PERMUTATION_MAXLEN\n#endif\nlayout(std140) uniform Permutation\n{\nivec4 permutation[PERMUTATION_MAXLEN / 4];\n};\nint permutationElement(int index)\n{\nint base = index - (index % PERMUTATION_MAXLEN);\nint offset = index - base;\nivec4 tuple = permutation[offset / 4];\nint newOffset = tuple[offset & 3];\nreturn base + newOffset;\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint otherIndex = permutationElement(myIndex);\nKeypointAddress otherAddress = KeypointAddress(otherIndex * pixelsPerKeypoint, myAddress.offset);\nKeypoint myKeypoint = decodeKeypoint(encodedKeypoints, encoderLength, myAddress);\nKeypoint otherKeypoint = decodeKeypoint(encodedKeypoints, encoderLength, otherAddress);\ncolor = readKeypointData(encodedKeypoints, encoderLength, otherAddress);\n}'},8096:e=>{e.exports='@include "keypoints.glsl"\n#if !defined(STAGE)\n#error Undefined STAGE\n#elif STAGE == 1\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#elif STAGE == 2\nuniform sampler2D permutation;\nuniform int blockSize;\nuniform int dblLog2BlockSize;\n#elif STAGE == 3\nuniform sampler2D permutation;\nuniform int maxKeypoints;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\n#else\n#error Invalid STAGE\n#endif\nstruct PermutationElement\n{\nint keypointIndex;\nfloat score;\nbool valid;\n};\nvec4 encodePermutationElement(PermutationElement element)\n{\nconst vec2 ONES = vec2(1.0f);\nvec2 encodedScore = element.valid ? encodeFloat16(element.score) : ONES;\nvec2 encodedIndex = vec2(element.keypointIndex & 255, (element.keypointIndex >> 8) & 255) / 255.0f;\nreturn vec4(encodedIndex, encodedScore);\n}\nPermutationElement decodePermutationElement(vec4 pixel)\n{\nconst vec2 ONES = vec2(1.0f);\nPermutationElement element;\nelement.keypointIndex = int(pixel.r * 255.0f) | (int(pixel.g * 255.0f) << 8);\nelement.valid = !all(equal(pixel.ba, ONES));\nelement.score = element.valid ? decodeFloat16(pixel.ba) : -1.0f;\nreturn element;\n}\nPermutationElement readPermutationElement(sampler2D permutation, int elementIndex, int stride, int height)\n{\nconst vec4 INVALID_PIXEL = vec4(1.0f);\nivec2 pos = ivec2(elementIndex % stride, elementIndex / stride);\nvec4 pixel = pos.y < height ? pixelAt(permutation, pos) : INVALID_PIXEL;\nreturn decodePermutationElement(pixel);\n}\n#if STAGE == 2\nPermutationElement selectKth(sampler2D permutation, int k, int la, int ra, int lb, int rb)\n{\nfloat scoreA, scoreB;\nint ha, hb, ma, mb;\nbool discard1stHalf, altb;\nbool locked = false;\nint tmp, result = 0;\nint stride = outputSize().x;\nint height = outputSize().y;\nfor(int i = 0; i < dblLog2BlockSize; i++) {\ntmp = (lb > rb && !locked) ? (la+k) : result;\nresult = (la > ra && !locked) ? (lb+k) : tmp;\nlocked = locked || (la > ra) || (lb > rb);\nha = (ra - la + 1) / 2;\nhb = (rb - lb + 1) / 2;\nma = la + ha;\nmb = lb + hb;\nscoreA = readPermutationElement(permutation, ma, stride, height).score;\nscoreB = readPermutationElement(permutation, mb, stride, height).score;\ndiscard1stHalf = (k > ha + hb);\naltb = (-scoreA < -scoreB);\nk -= int(discard1stHalf && altb) * (ha + 1);\nk -= int(discard1stHalf && !altb) * (hb + 1);\nla += int(discard1stHalf && altb) * (ma + 1 - la);\nlb += int(discard1stHalf && !altb) * (mb + 1 - lb);\nra += int(!discard1stHalf && !altb) * (ma - 1 - ra);\nrb += int(!discard1stHalf && altb) * (mb - 1 - rb);\n}\nreturn readPermutationElement(permutation, result, stride, height);\n}\n#endif\nvoid main()\n{\n#if STAGE == 1\nivec2 thread = threadLocation();\nint stride = outputSize().x;\nint keypointIndex = thread.y * stride + thread.x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nPermutationElement element;\nelement.keypointIndex = keypointIndex;\nelement.score = keypoint.score;\nelement.valid = !isBadKeypoint(keypoint);\ncolor = encodePermutationElement(element);\n#elif STAGE == 2\nivec2 thread = threadLocation();\nint stride = outputSize().x;\nint elementIndex = thread.y * stride + thread.x;\nint blockIndex = elementIndex / blockSize;\nint blockOffset = elementIndex % blockSize;\nint la = blockIndex * blockSize;\nint lb = la + blockSize / 2;\nint ra = lb - 1;\nint rb = (blockIndex + 1) * blockSize - 1;\nint k = blockOffset;\nPermutationElement element = selectKth(permutation, k, la, ra, lb, rb);\ncolor = encodePermutationElement(element);\n#elif STAGE == 3\nivec2 thread = threadLocation();\nint newEncoderLength = outputSize().x;\nKeypointAddress myAddress = findKeypointAddress(thread, newEncoderLength, descriptorSize, extraSize);\nint myKeypointIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nivec2 psize = textureSize(permutation, 0);\nPermutationElement element = readPermutationElement(permutation, myKeypointIndex, psize.x, psize.y);\nint oldEncoderLength = textureSize(encodedKeypoints, 0).x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(element.keypointIndex * pixelsPerKeypoint, myAddress.offset);\nvec4 keypointData = readKeypointData(encodedKeypoints, oldEncoderLength, address);\ncolor = myKeypointIndex < maxKeypoints && element.valid ? keypointData : encodeNullKeypoint();\n#endif\n}'},5795:e=>{e.exports='@include "keypoints.glsl"\n@include "float16.glsl"\n#if !defined(METHOD)\n#error Must define METHOD\n#endif\nuniform sampler2D pyramid;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int maxIterations;\nuniform float epsilon;\nconst int PATCH_RADIUS = 1;\nconst int PATCH_SIZE = 2 * PATCH_RADIUS + 1;\nconst int PATCH_SIZE_SQUARED = PATCH_SIZE * PATCH_SIZE;\nconst int LARGE_PATCH_RADIUS = PATCH_RADIUS + 1;\nconst int LARGE_PATCH_SIZE = 2 * LARGE_PATCH_RADIUS + 1;\nconst int LARGE_PATCH_SIZE_SQUARED = LARGE_PATCH_SIZE * LARGE_PATCH_SIZE;\nconst int LARGER_PATCH_RADIUS = LARGE_PATCH_RADIUS + 1;\nconst int LARGER_PATCH_SIZE = 2 * LARGER_PATCH_RADIUS + 1;\nconst int LARGER_PATCH_SIZE_SQUARED = LARGER_PATCH_SIZE * LARGER_PATCH_SIZE;\nconst float EPS = 1e-5;\nfloat smoothPixelBuffer[LARGER_PATCH_SIZE_SQUARED];\nvec2 derivativesBuffer[LARGE_PATCH_SIZE_SQUARED];\nfloat responseBuffer[PATCH_SIZE_SQUARED];\n#define patchPixelAt(u,v) smoothPixelBuffer[((v) + LARGER_PATCH_RADIUS) * LARGER_PATCH_SIZE + ((u) + LARGER_PATCH_RADIUS)]\n#define derivativesAt(u,v) derivativesBuffer[((v) + LARGE_PATCH_RADIUS) * LARGE_PATCH_SIZE + ((u) + LARGE_PATCH_RADIUS)]\n#define responseAt(u,v) responseBuffer[((v) + PATCH_RADIUS) * PATCH_SIZE + ((u) + PATCH_RADIUS)]\nvoid readPixels(vec2 center, float lod)\n{\nivec2 pyrBaseSize = textureSize(pyramid, 0);\nfloat pot = exp2(lod);\nint u, v;\nfor(int j = 0; j < LARGER_PATCH_SIZE; j++) {\nfor(int i = 0; i < LARGER_PATCH_SIZE; i++) {\nu = i - LARGER_PATCH_RADIUS;\nv = j - LARGER_PATCH_RADIUS;\npatchPixelAt(u,v) = pyrSubpixelAtExOffset(pyramid, center, lod, pot, ivec2(u,v), pyrBaseSize).g;\n}\n}\n}\nvoid computeDerivatives()\n{\nconst mat3 dx = mat3(\n-1, 0, 1,\n-2, 0, 2,\n-1, 0, 1\n);\nconst mat3 dy = mat3(\n1, 2, 1,\n0, 0, 0,\n-1,-2,-1\n);\nint u, v;\nmat3 pix, convX, convY;\nconst vec3 ones = vec3(1.0f);\nfor(int j = 0; j < LARGE_PATCH_SIZE; j++) {\nfor(int i = 0; i < LARGE_PATCH_SIZE; i++) {\nu = i - LARGE_PATCH_RADIUS;\nv = j - LARGE_PATCH_RADIUS;\npix = mat3(\npatchPixelAt(u+1,v+1), patchPixelAt(u+0,v+1), patchPixelAt(u-1,v+1),\npatchPixelAt(u+1,v+0), patchPixelAt(u+0,v+0), patchPixelAt(u-1,v+0),\npatchPixelAt(u+1,v-1), patchPixelAt(u+0,v-1), patchPixelAt(u-1,v-1)\n);\nconvX = matrixCompMult(dx, pix);\nconvY = matrixCompMult(dy, pix);\nderivativesAt(u,v) = vec2(\ndot(ones, vec3(\ndot(convX[0], ones),\ndot(convX[1], ones),\ndot(convX[2], ones)\n)),\ndot(ones, vec3(\ndot(convY[0], ones),\ndot(convY[1], ones),\ndot(convY[2], ones)\n))\n);\n}\n}\n}\nvec2 computeResponseMap()\n{\nfloat patchArea = float(PATCH_SIZE * PATCH_SIZE);\nvec3 h; vec2 d, c = vec2(0.0f);\nconst vec3 ones = vec3(1.0f);\nfloat response, sum = 0.0f;\nint u, v;\n#define H(r,s) d = derivativesAt((r),(s)); h += vec3(d.x * d.x, d.x * d.y, d.y * d.y)\nfor(int j = 0; j < PATCH_SIZE; j++) {\nfor(int i = 0; i < PATCH_SIZE; i++) {\nu = i - PATCH_RADIUS;\nv = j - PATCH_RADIUS;\nh = vec3(0.0f);\nH(u-1,v-1); H(u+0,v-1); H(u+1,v-1);\nH(u-1,v+0); H(u+0,v+0); H(u+1,v+0);\nH(u-1,v+1); H(u+0,v+1); H(u+1,v+1);\nresponse = 0.5f * (h.x + h.z - sqrt((h.x - h.z) * (h.x - h.z) + 4.0f * h.y * h.y));\nresponse /= patchArea;\nresponseAt(u,v) = response;\nc += vec2(u,v) * response;\nsum += response;\n}\n}\nreturn abs(sum) > EPS ? c / sum : vec2(0.0f);\n}\n#if METHOD == 0\nvec2 quadratic1d()\n{\nfloat a = 0.5f * (responseAt(-1,0) - 2.0f * responseAt(0,0) + responseAt(1,0));\nfloat b = 0.5f * (responseAt(1,0) - responseAt(-1,0));\nfloat c = responseAt(0,0);\nfloat d = 0.5f * (responseAt(0,-1) - 2.0f * responseAt(0,0) + responseAt(0,1));\nfloat e = 0.5f * (responseAt(0,1) - responseAt(0,-1));\nfloat f = responseAt(0,0);\nbool hasMax = a < -EPS && d < -EPS;\nreturn hasMax ? -0.5f * vec2(b / a, e / d) : vec2(0.0f);\n}\n#endif\n#if METHOD == 1\nvec2 taylor2d()\n{\nfloat dx = (-responseAt(-1,0) + responseAt(1,0)) * 0.5f;\nfloat dy = (-responseAt(0,-1) + responseAt(0,1)) * 0.5f;\nfloat dxx = responseAt(-1,0) - 2.0f * responseAt(0,0) + responseAt(1,0);\nfloat dyy = responseAt(0,-1) - 2.0f * responseAt(0,0) + responseAt(0,1);\nfloat dxy = (responseAt(-1,-1) + responseAt(1,1) - responseAt(1,-1) - responseAt(-1,1)) * 0.25f;\nfloat det = dxx * dyy - dxy * dxy;\nmat2 inv = mat2(dyy, -dxy, -dxy, dxx);\nbool hasMax = det > EPS && dxx < 0.0f;\nreturn hasMax ? inv * vec2(dx, dy) / (-det) : vec2(0.0f);\n}\n#endif\n#if METHOD == 2\nvoid bilinearUpsample(ivec2 patchOffset, vec4 pixelsOfPatch)\n{\nint u, v, i, j;\nvec2 frc, ifrc; vec4 sub;\nconst vec4 ones = vec4(1.0f);\nfloat s = 1.0f / float(PATCH_SIZE - 1);\nint xoff = 2 * patchOffset.x;\nint yoff = 2 * patchOffset.y;\nfor(j = 0; j < PATCH_SIZE; j++) {\nfor(i = 0; i < PATCH_SIZE; i++) {\nu = i - PATCH_RADIUS;\nv = j - PATCH_RADIUS;\nfrc = vec2(i, j) * s;\nifrc = vec2(1.0f) - frc;\nsub = vec4(\nifrc.x * ifrc.y,\nfrc.x * ifrc.y,\nifrc.x * frc.y,\nfrc.x * frc.y\n);\npatchPixelAt(u+xoff,v+yoff) = dot(sub*pixelsOfPatch, ones);\n}\n}\n}\n#endif\n#if METHOD == 3\nvoid bicubicUpsample(ivec2 patchOffset, vec4 pixelsOfPatch, vec4 dx, vec4 dy, vec4 dxy)\n{\nfloat x, y, s = 1.0f / float(PATCH_SIZE - 1);\nint u, v, i, j;\nfloat f00 = pixelsOfPatch.x;\nfloat f10 = pixelsOfPatch.y;\nfloat f01 = pixelsOfPatch.z;\nfloat f11 = pixelsOfPatch.w;\nfloat fx00 = dx.x;\nfloat fx10 = dx.y;\nfloat fx01 = dx.z;\nfloat fx11 = dx.w;\nfloat fy00 = dy.x;\nfloat fy10 = dy.y;\nfloat fy01 = dy.z;\nfloat fy11 = dy.w;\nfloat fxy00 = dxy.x;\nfloat fxy10 = dxy.y;\nfloat fxy01 = dxy.z;\nfloat fxy11 = dxy.w;\nmat4 bicubic = mat4(\n1, 0, -3, 2,\n0, 0, 3, -2,\n0, 1, -2, 1,\n0, 0, -1, 1\n) * mat4(\nf00, f10, fx00, fx10,\nf01, f11, fx01, fx11,\nfy00, fy10, fxy00, fxy10,\nfy01, fy11, fxy01, fxy11\n) * mat4(\n1, 0, 0, 0,\n0, 0, 1, 0,\n-3, 3, -2, -1,\n2, -2, 1, 1\n);\nint xoff = 2 * patchOffset.x;\nint yoff = 2 * patchOffset.y;\nfor(j = 0; j < PATCH_SIZE; j++) {\nfor(i = 0; i < PATCH_SIZE; i++) {\nu = i - PATCH_RADIUS;\nv = j - PATCH_RADIUS;\nx = float(i) * s;\ny = float(j) * s;\npatchPixelAt(u+xoff,v+yoff) = dot(\nvec4(1, x, x*x, x*x*x),\nbicubic * vec4(1, y, y*y, y*y*y)\n);\n}\n}\n}\n#endif\n#if METHOD == 2 || METHOD == 3\nvoid upsamplePatch(int left, int top, int right, int bottom)\n{\nint x, y, k;\nvec4 ptch[9];\nvec2 d00, d10, d01, d11;\nfor(k = 0; k < 9; k++) {\nx = -1 + (k % 3);\ny = -1 + (k / 3);\nptch[k] = vec4(\npatchPixelAt(left+x, top+y),\npatchPixelAt(right+x, top+y),\npatchPixelAt(left+x, bottom+y),\npatchPixelAt(right+x, bottom+y)\n);\n}\nfor(k = 0; k < 9; k++) {\nx = -1 + (k % 3);\ny = -1 + (k / 3);\n#if METHOD == 2\nbilinearUpsample(ivec2(x, y), ptch[k]);\n#elif METHOD == 3\nd00 = derivativesAt(left+x, top+y);\nd10 = derivativesAt(right+x, top+y);\nd01 = derivativesAt(left+x, bottom+y);\nd11 = derivativesAt(right+x, bottom+y);\nbicubicUpsample(ivec2(x, y), ptch[k],\nvec4(d00.x, d10.x, d01.x, d11.x),\nvec4(d00.y, d10.y, d01.y, d11.y),\n0.25f * vec4(\n(patchPixelAt(left+x + 1,top+y + 1) + patchPixelAt(left+x - 1, top+y - 1)) - (patchPixelAt(left+x + 1, top+y - 1) + patchPixelAt(left+x - 1, top+y + 1)),\n(patchPixelAt(right+x + 1,top+y + 1) + patchPixelAt(right+x - 1, top+y - 1)) - (patchPixelAt(right+x + 1, top+y - 1) + patchPixelAt(right+x - 1, top+y + 1)),\n(patchPixelAt(left+x + 1,bottom+y + 1) + patchPixelAt(left+x - 1, bottom+y - 1)) - (patchPixelAt(left+x + 1, bottom+y - 1) + patchPixelAt(left+x - 1, bottom+y + 1)),\n(patchPixelAt(right+x + 1,bottom+y + 1) + patchPixelAt(right+x - 1, bottom+y - 1)) - (patchPixelAt(right+x + 1, bottom+y - 1) + patchPixelAt(right+x - 1, bottom+y + 1))\n)\n);\n#endif\n}\n}\nvec2 upsampleResponseMap(int left, int top, int right, int bottom)\n{\nupsamplePatch(left, top, right, bottom);\ncomputeDerivatives();\nreturn computeResponseMap();\n}\nvec2 iterativeUpsample(vec2 initialGuess)\n{\nint refine = 1;\nfloat scale = 0.5f;\nfloat eps2 = epsilon * epsilon;\nvec2 guess = initialGuess, localGuess = initialGuess;\nfor(int k = 0; k < maxIterations; k++) {\nivec4 quad = ivec4(floor(localGuess.x), floor(localGuess.y), ceil(localGuess.x), ceil(localGuess.y));\nvec2 response = (refine != 0) ? upsampleResponseMap(quad.x, quad.y, quad.z, quad.w) : vec2(0.0f);\nlocalGuess = response * scale;\nguess += localGuess;\nscale *= 0.5f;\nrefine *= int(dot(localGuess, localGuess) >= eps2);\n}\nreturn guess;\n}\n#endif\nvoid main()\n{\nivec2 thread = threadLocation();\nint keypointIndex = thread.x + thread.y * outputSize().x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\ncolor = encodeNullPairOfFloat16();\nif(isNullKeypoint(keypoint))\nreturn;\ncolor = encodeDiscardedPairOfFloat16();\nif(isBadKeypoint(keypoint))\nreturn;\nreadPixels(keypoint.position, keypoint.lod);\ncomputeDerivatives();\nvec2 offset = computeResponseMap();\n#if METHOD == 0\noffset = quadratic1d();\n#elif METHOD == 1\noffset = taylor2d();\n#elif METHOD == 2 || METHOD == 3\noffset = iterativeUpsample(offset);\n#else\n#error Unknown METHOD\n#endif\nfloat pot = exp2(keypoint.lod);\ncolor = encodePairOfFloat16(offset * pot);\n}'},3169:e=>{e.exports='@include "keypoints.glsl"\n@include "float16.glsl"\nuniform sampler2D encodedFlow;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nint len = textureSize(encodedFlow, 0).x;\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, myAddress);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\ncolor = pixel;\nif(isBadKeypoint(keypoint))\nreturn;\nivec2 location = ivec2(myIndex % len, myIndex / len);\nvec4 encodedFlow = myIndex < len * len ? pixelAt(encodedFlow, location) : encodeDiscardedKeypoint();\nbool discardFlow = isDiscardedPairOfFloat16(encodedFlow);\nvec2 flow = !discardFlow ? decodePairOfFloat16(encodedFlow) : vec2(0.0f);\nvec4 newPosition = encodeKeypointPosition(keypoint.position + flow);\nvec4 newPixel = myAddress.offset == 0 ? newPosition : pixel;\ncolor = !discardFlow ? newPixel : encodeDiscardedKeypoint();\n}'},1337:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedOrientations;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint orientationEncoderLength = textureSize(encodedOrientations, 0).x;\nivec2 location = ivec2(myIndex % orientationEncoderLength, myIndex / orientationEncoderLength);\nvec4 targetPixel = pixelAt(encodedOrientations, location);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, myAddress);\nbool isValid = !isBadKeypoint(keypoint);\nfloat encodedOrientation = targetPixel.g;\ncolor = isValid && myAddress.offset == 1 ? vec4(pixel.r, encodedOrientation, pixel.ba) : pixel;\n}'},6187:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedData;\nuniform int strideOfEncodedData;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvec4 readEncodedData(sampler2D encodedData, int strideOfEncodedData, int elementId, int pixelsPerElement, int pixelOffset)\n{\nint rasterIndex = elementId * pixelsPerElement + pixelOffset;\nivec2 pos = ivec2(rasterIndex % strideOfEncodedData, rasterIndex / strideOfEncodedData);\nreturn texelFetch(encodedData, pos, 0);\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint headerSize = sizeofEncodedKeypointHeader();\nint extraCell = myAddress.offset - headerSize / 4;\nint numberOfExtraCells = extraSize / 4;\ncolor = threadPixel(encodedKeypoints);\nif(extraCell < 0 || extraCell >= numberOfExtraCells)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, myAddress);\nif(isBadKeypoint(keypoint))\nreturn;\ncolor = readEncodedData(encodedData, strideOfEncodedData, myIndex, numberOfExtraCells, extraCell);\n}'},477:e=>{e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypoints;\nuniform int startIndex;\nuniform int endIndex;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#ifndef BUFFER_SIZE\n#error Undefined BUFFER_SIZE\n#endif\nlayout(std140) uniform KeypointBuffer\n{\nvec4 keypointBuffer[BUFFER_SIZE];\n};\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint index = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = pixel;\nif(index < startIndex)\nreturn;\ncolor = encodeNullKeypoint();\nif(index >= endIndex)\nreturn;\nvec4 data = keypointBuffer[index - startIndex];\nswitch(address.offset) {\ncase 0: {\ncolor = encodeKeypointPosition(data.xy);\nbreak;\n}\ncase 1: {\nvec2 score = encodeKeypointScore(max(data.w, 0.0f));\nfloat scale = encodeLod(data.z);\nfloat rotation = encodeKeypointOrientation(0.0f);\ncolor = vec4(scale, rotation, score);\nbreak;\n}\ndefault: {\ncolor = vec4(0.0f);\nbreak;\n}\n}\n}'},4050:e=>{e.exports="uniform sampler2D image;\nvoid main()\n{\n#if 1\ncolor = texture(image, texCoord);\n#else\nivec2 thread = threadLocation();\nivec2 pos = min(thread * 2, textureSize(image, 0) - ivec2(1));\ncolor = pixelAt(image, pos);\n#endif\n}"},5545:e=>{e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = pixelAt(image, thread / 2);\ncolor = (((thread.x + thread.y) & 1) == 0) ? pixel : vec4(0.0f, 0.0f, 0.0f, pixel.a);\n}"},7113:e=>{e.exports='@include "subpixel.glsl"\nuniform sampler2D image0;\nuniform sampler2D image1;\nuniform float alpha;\nuniform float beta;\nuniform float gamma;\nconst vec4 BACKGROUND = vec4(0.0f);\nvoid main()\n{\nivec2 location = threadLocation();\nivec2 size0 = textureSize(image0, 0);\nivec2 size1 = textureSize(image1, 0);\nvec4 pix0 = all(lessThan(location, size0)) ? pixelAt(image0, location) : BACKGROUND;\nvec4 pix1 = all(lessThan(location, size1)) ? pixelAt(image1, location) : BACKGROUND;\nvec4 pix = clamp(alpha * pix0 + beta * pix1 + vec4(gamma), 0.0f, 1.0f);\ncolor = vec4(pix.rgb, 1.0f);\n}'},1202:e=>{e.exports='@include "subpixel.glsl"\nuniform sampler2D image;\nvoid main()\n{\nvec2 imageSize = vec2(textureSize(image, 0));\n#if !defined(INTERPOLATION_METHOD)\n#error Must define INTERPOLATION_METHOD\n#elif INTERPOLATION_METHOD == 0\nvec2 pos = texCoord * imageSize;\ncolor = textureLod(image, (round(pos) + vec2(0.5f)) / imageSize, 0.0f);\n#elif INTERPOLATION_METHOD == 1\ncolor = subpixelAtBI(image, texCoord * imageSize);\n#else\n#error Invalid INTERPOLATION_METHOD\n#endif\n}'},7971:e=>{e.exports='@include "subpixel.glsl"\nuniform sampler2D image;\nuniform mat3 inverseHomography;\nconst vec4 emptyColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\nvec2 perspectiveWarp(mat3 homography, vec2 p)\n{\nvec3 q = homography * vec3(p, 1.0f);\nreturn q.xy / q.z;\n}\nvoid main()\n{\nivec2 location = threadLocation();\nivec2 size = outputSize();\nconst vec2 zero = vec2(0.0f);\nvec2 target = perspectiveWarp(inverseHomography, vec2(location));\nbool withinBounds = all(bvec4(greaterThanEqual(target, zero), lessThan(target, vec2(size))));\ncolor = withinBounds ? subpixelAtBI(image, target) : emptyColor;\n}'},6122:e=>{e.exports='@include "colors.glsl"\nuniform sampler2D dest, src;\nuniform int destComponents;\nuniform int srcComponentId;\nvoid main()\n{\nvec4 destPixel = threadPixel(dest);\nvec4 srcPixel = threadPixel(src);\nbvec4 flags = bvec4(\n(destComponents & PIXELCOMPONENT_RED) != 0,\n(destComponents & PIXELCOMPONENT_GREEN) != 0,\n(destComponents & PIXELCOMPONENT_BLUE) != 0,\n(destComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(destPixel, vec4(srcPixel[srcComponentId]), flags);\n}'},371:e=>{e.exports='#if !defined(TYPE)\n#error Undefined TYPE\n#elif TYPE == 1\n@include "keypoints.glsl"\n#define nullPixel() encodeNullKeypoint()\n#elif TYPE == 2\n@include "float16.glsl"\n#define nullPixel() encodeNullPairOfFloat16()\n#else\n#error Invalid TYPE\n#endif\nuniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 imageSize = textureSize(image, 0);\nint rasterIndex = thread.y * outputSize().x + thread.x;\nbool isValidPixel = rasterIndex < imageSize.x * imageSize.y;\nivec2 pos = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\nvec4 nullpix = nullPixel();\ncolor = isValidPixel ? texelFetch(image, pos, 0) : nullpix;\n}'},7307:e=>{e.exports="uniform sampler2D image;\nvoid main()\n{\ncolor = threadPixel(image);\n}"},8614:e=>{e.exports='@include "colors.glsl"\nuniform sampler2D image;\nuniform int pixelComponents;\nuniform float value;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nbvec4 flags = bvec4(\n(pixelComponents & PIXELCOMPONENT_RED) != 0,\n(pixelComponents & PIXELCOMPONENT_GREEN) != 0,\n(pixelComponents & PIXELCOMPONENT_BLUE) != 0,\n(pixelComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(pixel, vec4(value), flags);\n}'},6271:e=>{e.exports="uniform float value;\nvoid main()\n{\ncolor = vec4(value);\n}"},3016:e=>{e.exports="void vsmain()\n{\ngl_Position *= vec4(1,-1,1,1);\n}"},3630:e=>{e.exports="uniform sampler2D image;\nuniform int iterationNumber;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 last = outputSize() - ivec2(1);\nint jump = (1 << iterationNumber);\nint clusterLength = jump << 1;\nint clusterMask = clusterLength - 1;\nivec2 clusterPos = ivec2(thread >> (1 + iterationNumber)) << (1 + iterationNumber);\nivec2 next1 = clusterPos + ((thread - clusterPos + ivec2(jump, 0)) & clusterMask);\nivec2 next2 = clusterPos + ((thread - clusterPos + ivec2(0, jump)) & clusterMask);\nivec2 next3 = clusterPos + ((thread - clusterPos + ivec2(jump, jump)) & clusterMask);\nvec4 p0 = texelFetch(image, thread, 0);\nvec4 p1 = texelFetch(image, min(next1, last), 0);\nvec4 p2 = texelFetch(image, min(next2, last), 0);\nvec4 p3 = texelFetch(image, min(next3, last), 0);\nvec4 pmax = max(max(p0, p1), max(p2, p3));\nvec4 pmin = min(min(p0, p1), min(p2, p3));\ncolor = vec4(pmax.r, pmin.g, pmax.r - pmin.g, p0.a);\n}"},8508:e=>{e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\nuniform sampler2D pyramid;\nuniform float lod;\n#define USE_VARYINGS 1\nin vec2 v_pix0, v_pix1, v_pix2,\nv_pix3, v_pix4, v_pix5,\nv_pix6, v_pix7, v_pix8;\nconst mat3 hkern = mat3(\n1.0f, 0.0f,-1.0f,\n2.0f, 0.0f,-2.0f,\n1.0f, 0.0f,-1.0f\n), vkern = mat3(\n1.0f, 2.0f, 1.0f,\n0.0f, 0.0f, 0.0f,\n-1.0f,-2.0f,-1.0f\n);\n#define PIX(x,y) pyrPixelAtOffset(pyramid, lod, pot, ivec2((x),(y))).g\n#define XIP(v) textureLod(pyramid, (v), lod).g\nvoid main()\n{\nconst vec3 ones = vec3(1.0f);\nfloat pot = exp2(lod);\nmat3 win = mat3(\n#if USE_VARYINGS\nXIP(v_pix0), XIP(v_pix1), XIP(v_pix2),\nXIP(v_pix3), XIP(v_pix4), XIP(v_pix5),\nXIP(v_pix6), XIP(v_pix7), XIP(v_pix8)\n#else\nPIX(-1,-1), PIX(0,-1), PIX(1,-1),\nPIX(-1,0), PIX(0,0), PIX(1,0),\nPIX(-1,1), PIX(0,1), PIX(1,1)\n#endif\n);\nmat3 dx = matrixCompMult(hkern, win);\nmat3 dy = matrixCompMult(vkern, win);\nvec2 df = vec2(\ndot(dx[0] + dx[1] + dx[2], ones),\ndot(dy[0] + dy[1] + dy[2], ones)\n);\ncolor = encodePairOfFloat16(df);\n}'},8073:e=>{e.exports="uniform mediump float lod;\nout vec2 v_pix0, v_pix1, v_pix2,\nv_pix3, v_pix4, v_pix5,\nv_pix6, v_pix7, v_pix8;\n#define PIX(x,y) (texCoord + ((pot) * vec2((x),(y))) / texSize)\nvoid vsmain()\n{\nfloat pot = exp2(lod);\nv_pix0 = PIX(-1,-1); v_pix1 = PIX(0,-1); v_pix2 = PIX(1,-1);\nv_pix3 = PIX(-1,0); v_pix4 = PIX(0,0); v_pix5 = PIX(1,0);\nv_pix6 = PIX(-1,1); v_pix7 = PIX(0,1); v_pix8 = PIX(1,1);\n}"},3575:e=>{e.exports="AGFzbQEAAAABiwETYAABfmADf39/AX9gAX8AYAN/f38AYAF9AX9gAX8Bf2ACf38Bf2AFf39/f38B\nf2AFf39/f38AYAZ/f39/f38Bf2AAAX9gAn99AX9gA39/fQF/YAJ/fwF9YAF/AX1gBH9/f38AYAR/\nf39/AX9gEX98fHx8fHx8fHx8fHx8fHx8AGAHf39/f39/fQF/AjsEA2VudgZtZW1vcnkCAAIDZW52\nBWZhdGFsAAIDZW52CGJ5dGVmaWxsAAMDZW52CmNvcHlXaXRoaW4AAwNAPwQFBgIGAQECBwgGAwAJ\nAgYCBgYKBQUFCQsFBgEBDAEBBgYGAQEMAQ0OAwgPAxAIAwYBEQEBAQEBARIBEgEBDwQFAXABBQUG\nCAF/AUHwmgQLB/QDHAZtYWxsb2MABARmcmVlAAYFc3JhbmQACgxNYXQzMl9jcmVhdGUAEA1NYXQz\nMl9kZXN0cm95ABcKTWF0MzJfZGF0YQAYDk1hdDMyX2RhdGFTaXplABkPTWF0MzJfdHJhbnNwb3Nl\nAB0JTWF0MzJfYWRkAB4OTWF0MzJfc3VidHJhY3QAHwtNYXQzMl9zY2FsZQAgDk1hdDMyX2NvbXBt\ndWx0ACEOTWF0MzJfbXVsdGlwbHkAIg5NYXQzMl9pbnZlcnNlMQAjDk1hdDMyX2ludmVyc2UyACQO\nTWF0MzJfaW52ZXJzZTMAJQ1NYXQzMl9xcl9mdWxsACwQTWF0MzJfcXJfcmVkdWNlZAAvDE1hdDMy\nX3FyX29scwAwEE1hdDMyX3FyX2ludmVyc2UAMxZNYXQzMl9ob21vZ3JhcGh5X25kbHQ0ADcVTWF0\nMzJfaG9tb2dyYXBoeV9uZGx0ADgUTWF0MzJfYWZmaW5lX2RpcmVjdDMAOhNNYXQzMl9hZmZpbmVf\nZGlyZWN0ADsYTWF0MzJfcHJhbnNhY19ob21vZ3JhcGh5ADwUTWF0MzJfcHJhbnNhY19hZmZpbmUA\nPhtNYXQzMl90cmFuc2Zvcm1fcGVyc3BlY3RpdmUAPxZNYXQzMl90cmFuc2Zvcm1fYWZmaW5lAEAJ\nCgEAQQELBA8REz0Kh7oBPyMBAX8gALwiAUGAgID8B3FBgICA/AdGIAFB////A3FBAEdxC2kBAX9B\nAEEAKALAmoCAAEEBajYCwJqAgABBAEEAKAK0moCAACIBQQdxIAFqIgEgAGo2ArSagIAAAkBB8JqE\n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\noZlEje21oPfGsD5jDQAgHCAFoiIYIB8gA6KhIiIgFCAIoiAcIAaiIh6gIiOiIB4gHyAEoqEiHiAU\nIAeiIBigIhiioSIkmUSN7bWg98awPmMNACAcmiIlIBShIiYgIqIgHyAcoSIiIBiioUQAAAAAAADw\nPyAkoyIkoiEYICIgI6IgJiAeoqEgJKIhHgJAAkAgHSAgZEEBcw0AIBMgGCAEoiAeIAOiRAAAAAAA\nAPA/oKAiBKIgJaMhHSAcIR8MAQsgEyAYIAaiIB4gBaJEAAAAAAAA8D+goCIEoiAfmqMhHQsgFyAE\noiAfoyETAkACQCAhICWZZEEBcw0AIBogGCAGoiAeIAWiRAAAAAAAAPA/oKAiBKIgFJqjIQcMAQsg\nGiAYIAiiIB4gB6JEAAAAAAAA8D+goCIEoiAcoyEHICUhFAsgGCAdmiABoiATIAKioSIXIAeioiAd\nIBsgBKIgFKMiFKIgHiATIAeaIAGiIBQgAqKhIhyioqCgIBMgB6KhIBggHSAcoqKhIB4gFyAUoqKh\nmUSN7bWg98awPmMNACALIA2hIhsgECAOoSIaoiAWIA8gDaEiH6KhIiCZRI3ttaD3xrA+Yw0AIBEh\nBCARIQIgESEGIBEhDiARIQEgESEDIBEhBSARIQggGyAVIBmgIhWiIBYgCSALoSANIA+hoCIZoqFE\nAAAAAAAA8D8gIKMiFqIiDSAMIAqhIBogGaIgHyAVoqEgFqIiFiAMoqAiDCAJoqIgCyAJoSAWIAui\noCILIBIgDSAQoqAiEKIgFiAPIAmhIA0gD6KgIg8gCqKioKAgDyAMoqEgDSALIAqioqEgFiAQIAmi\noqGZRI3ttaD3xrA+Yw0BIBYgF6IgDSAcoqBEAAAAAAAA8D+gIQUgGCAWIBOiIA0gFKKgoCEDIB4g\nFiAdoiANIAeioKAhASAMIBeiIBAgHKKgIAqgIQ4gGCAKoiAMIBOiIBAgFKKgoCEGIB4gCqIgDCAd\noiAQIAeioKAhAiALIBeiIA8gHKKgIAmgIQQgGCAJoiALIBOiIA8gFKKgoCERIB4gCaIgCyAdoiAP\nIAeioKAhCAwBCyARIQQgESECIBEhBiARIQ4gESEBIBEhAyARIQUgESEICyAAKAIAIicgCLY4AgAg\nJyAAQRRqKAIAIihBAnRqIBG2OAIAICcgKEEDdGogBLY4AgAgJyAAKAIQIgBBAnRqIAK2OAIAICcg\nACAoaiIpQQJ0aiAGtjgCACAnIAAgKEEBdGpBAnRqIA62OAIAICcgAEEDdGogAbY4AgAgJyAoIABB\nAXRqQQJ0aiADtjgCACAnIClBA3RqIAW2OAIAC7oHAhZ/Cn0CQAJAIAAoAghBA0cNACAAKAIMQQNH\nDQAgASgCCEECRw0AIAEoAgwiA0EESA0AIAIoAghBAkcNACACKAIMIANGDQELQbKTgIAAEICAgIAA\nIAEoAgwhAwsgA0EBdCIEQQgQkoCAgAAhBSAEQQEQkoCAgAAhBkEIQQEQkoCAgAAhBwJAIANBAUgN\nACAFQRRqKAIAIgRBDGwgBSgCECIIQQJ0IglqIQogBEEEdCAJaiELIARBFGwgCWohDCAEQRhsIg0g\nCWohDiAEQRxsIg8gCWohECACKAIQQQJ0IREgASgCEEECdCESIAhBA3QhCCAGKAIQIglBA3QhEyAJ\nQQJ0IRQgAkEUaigCAEECdCEVIAFBFGooAgBBAnQhFiAEQQN0IRcgBEECdCEYIAYoAgAhCSAFKAIA\nIQQgAigCACECIAEoAgAhAQNAIAIgEWoqAgAhGSABIBJqKgIAIRogAioCACEbIAQgASoCACIcOAIA\nIAQgGGogGjgCACAEIBdqQYCAgPwDNgIAIAQgCmogHDgCACAEIAtqIBo4AgAgBCAMakGAgID8AzYC\nACAEIA1qIBsgHIwiHJQ4AgAgBCAOaiAZIByUOAIAIAQgD2ogGyAajCIalDgCACAEIBBqIBkgGpQ4\nAgAgCSAbOAIAIAkgFGogGTgCACACIBVqIQIgASAWaiEBIAQgCGohBCAJIBNqIQkgA0F/aiIDDQAL\nCyAHIAUgBkEDELCAgIAAGgJAAkAgBygCACIEKgIAIhkgBCAHKAIQIglBBHRqKgIAIhqUIAQgCUEC\ndGoqAgAiGyAEIAlBFGxqKgIAIhyUIAQgCUEYbGoqAgAiHZSSIAQgCUEDdGoqAgAiHiAEIAlBDGxq\nKgIAIh+UIAQgCUEcbGoqAgAiIJSSIBsgH5STIBkgHJQgIJSTIB4gGpQgHZSTIiEQg4CAgAANAEMA\nAIA/ISIgIYu7RI3ttaD3xrA+Y0EBcw0BC0EAKgKAiICAACIZIRsgGSEeIBkhHyAZIRogGSEcIBkh\nHSAZISAgGSEiCyAAKAIAIgQgGTgCACAEIABBFGooAgAiCUECdGogGzgCACAEIAlBA3RqIB44AgAg\nBCAAKAIQIgJBAnRqIB84AgAgBCACIAlqIgFBAnRqIBo4AgAgBCACIAlBAXRqQQJ0aiAcOAIAIAQg\nAkEDdGogHTgCACAEIAkgAkEBdGpBAnRqICA4AgAgBCABQQN0aiAiOAIAIAcQl4CAgAAaIAYQl4CA\ngAAaIAUQl4CAgAAaIAALnwgKAX8BfQF/An0Bfwp9AX8BfQN/AX0CQAJAIAAoAghBA0cNACAAKAIM\nQQNHDQAgASgCCEECRw0AIAEoAgxBBEcNACACKAIIQQJHDQAgAigCDEEERg0BC0HZk4CAABCAgICA\nAAsgACABKAIAIgMqAgAiBCAEIAMgAUEUaigCACIFQQJ0aioCACIGkiADIAVBA3RqKgIAIgeSIAMg\nBUEDbCIIQQJ0aioCACIJkkMAAIA+lCIKkyIEQwAAAEEgAyAIIAEoAhAiAWpBAnRqKgIAIgsgCyAD\nIAFBAnRqKgIAIgwgAyAFIAFqQQJ0aioCACINkiADIAVBAXQgAWpBAnRqKgIAIg6SkkMAAIA+lCIP\nkyILIAuUIAkgCpMiCSAJlCAOIA+TIg4gDpQgByAKkyIHIAeUIA0gD5MiDSANlCAGIAqTIgYgBpQg\nBCAElCAMIA+TIgwgDJSSkpKSkpKSlZEiBJS7IAwgBJS7IAYgBJS7IA0gBJS7IAcgBJS7IA4gBJS7\nIAkgBJS7IAsgBJS7IAIoAgAiAyoCACILIAsgAyACQRRqKAIAIgVBAnRqKgIAIhCSIAMgBUEDdGoq\nAgAiDJIgAyAFQQNsIghBAnRqKgIAIg2SQwAAgD6UIgmTIgtDAAAAQSADIAggAigCECIBakECdGoq\nAgAiDiAOIAMgAUECdGoqAgAiESADIAUgAWpBAnRqKgIAIhKSIAMgBUEBdCABakECdGoqAgAiBpKS\nQwAAgD6UIg6TIgcgB5QgDSAJkyINIA2UIAYgDpMiBiAGlCAMIAmTIgwgDJQgEiAOkyISIBKUIBAg\nCZMiECAQlCALIAuUIBEgDpMiESARlJKSkpKSkpKVkSILlLsgESALlLsgECALlLsgEiALlLsgDCAL\nlLsgBiALlLsgDSALlLsgByALlLsQtYCAgAAgACgCACIDIABBFGooAgAiBUEBdCICIAAoAhAiAUEB\ndCIIakECdGoqAgAhECADIAggBWpBAnRqIggqAgAhByADIAIgAWpBAnRqIgIqAgAhESADIAVBA3Rq\nIhMqAgAhFCADIAUgAWoiFUECdGoiFioCACEGIAMgBUECdGoiBSoCACEMIAMgAUECdGoiFyoCACES\nIAMgBCAJIAMgAUEDdGoiASoCACINlCADKgIAIhhDAACAPyALlSILlJKUOAIAIBcgBCAOIA2UIBIg\nC5SSlDgCACABIAQgDZQ4AgAgBSAEIAkgB5QgDCALlJKUOAIAIBYgBCAOIAeUIAYgC5SSlDgCACAI\nIAQgB5Q4AgAgEyAUIAQgCiAYlCAPIAyUkpSTIAuUIAkgECAEIAogDZQgDyAHlJKUkyIHlJI4AgAg\nAiARIAQgCiASlCAPIAaUkpSTIAuUIA4gB5SSOAIAIAMgFUEDdGogBzgCACAAC5sCAQZ/AkACQCAA\nKAIIQQNHDQAgACgCDEEDRw0AIAEoAghBAkcNACABKAIMIgNBBEgNACACKAIIQQJHDQAgAigCDCAD\nRg0BC0GAlICAABCAgICAACABKAIMIQMLQQIgAxCSgICAACEEQQIgAxCSgICAACEFQQNBAxCSgICA\nACEGQQNBAxCSgICAACEHQQNBAxCSgICAACEIIAQgASAGQQNBAxCSgICAACIDEMGAgIAAIAUgAiAD\nIAcQwYCAgAAgAyAIIAQgBRC2gICAACIBIAYQp4CAgAAaIAAgByADEKeAgIAAGiADEJeAgIAAGiAB\nEJeAgIAAGiAHEJeAgIAAGiAGEJeAgIAAGiAFEJeAgIAAGiAEEJeAgIAAGiAAC/kFAhZ/Bn0CQAJA\nIAAoAghBAkcNACAAKAIMQQNHDQAgASgCCEECRw0AIAEoAgwiA0EDSA0AIAIoAghBAkcNACACKAIM\nIANGDQELQaeUgIAAEICAgIAAIAEoAgwhAwsgA0EBdCIEQQYQkoCAgAAhBSAEQQEQkoCAgAAhBkEG\nQQEQkoCAgAAhBwJAIANBAUgNACAFQRRqKAIAIgRBDGwgBSgCECIIQQJ0IglqIQogBEEEdCAJaiEL\nIARBFGwgCWohDCACKAIQQQJ0IQ0gASgCEEECdCEOIAhBA3QhDyAGKAIQIglBA3QhECAJQQJ0IREg\nAkEUaigCAEECdCESIAFBFGooAgBBAnQhEyAEQQN0IRQgBEECdCEVIAYoAgAhCSAFKAIAIQQgAigC\nACECIAEoAgAhAQNAIAIgDWooAgAhFiABIA5qKAIAIQggAigCACEXIAQgASgCACIYNgIAIAQgFWog\nCDYCACAEIBRqQYCAgPwDNgIAIAQgCmogGDYCACAEIAtqIAg2AgAgBCAMakGAgID8AzYCACAJIBc2\nAgAgCSARaiAWNgIAIAIgEmohAiABIBNqIQEgBCAPaiEEIAkgEGohCSADQX9qIgMNAAsLIAcgBSAG\nQQMQsICAgAAaAkACQCAHKAIAIgQqAgAiGSAEIAcoAhAiCUECdGoqAgAiGpIgBCAJQQN0aioCACIb\nkiAEIAlBDGxqKgIAIhySIAQgCUEEdGoqAgAiHZIgBCAJQRRsaioCACIekhCDgICAAA0AIBkgHZQg\nGiAclJOLu0SN7bWg98awPmNBAXMNAQtBACoCgIiAgAAiGSEaIBkhGyAZIRwgGSEdIBkhHgsgACgC\nACIEIBk4AgAgBCAAQRRqKAIAIglBAnRqIBo4AgAgBCAJQQN0aiAbOAIAIAQgACgCECICQQJ0aiAc\nOAIAIAQgAiAJakECdGogHTgCACAEIAIgCUEBdGpBAnRqIB44AgAgBxCXgICAABogBhCXgICAABog\nBRCXgICAABogAAvNBQMBfAJ/FXwCQAJAIAAoAghBAkcNACAAKAIMQQNHDQAgASgCCEECRw0AIAEo\nAgxBA0cNACACKAIIQQJHDQAgAigCDEEDRg0BC0HKlICAABCAgICAAAtBACoCgIiAgAC7IQMCQAJA\nIAEoAgAiBCABKAIQIgVBAnRqKgIAuyIGIAQgAUEUaigCACIBIAVqQQJ0aioCALsiB6EiCCAEIAFB\nA3RqKgIAuyIJoiAHIAQgAUEBdCAFakECdGoqAgC7IgqhIgsgBCoCALsiDKIgCiAGoSINIAQgAUEC\ndGoqAgC7Ig6ioKAiD5lEje21oPfGsD5jDQAgAigCACIEIAIoAhAiBUECdGoqAgC7IhAgBCACQRRq\nKAIAIgEgBWpBAnRqKgIAuyIRoSAEIAFBA3RqKgIAuyISoiARIAQgAUEBdCAFakECdGoqAgC7IhOh\nIAQqAgC7IhSiIBMgEKEgBCABQQJ0aioCALsiFaKgoJlEje21oPfGsD5jDQBEAAAAAAAA8D8gD6Mi\nFiALIBSiIA0gFaKgIAggEqKgoiIPIBYgCSAOoSIXIBCiIAwgCaEiGCARoqAgDiAMoSIZIBOioKIi\nGqIgFiAXIBSiIBggFaKgIBkgEqKgoiIXIBYgCyAQoiANIBGioCAIIBOioKIiCKKhmUSN7bWg98aw\nPmNBAXNFDQAgFiAOIAqiIAcgCaKhIgMgEKIgBiAJoiAMIAqioSIKIBGioCAMIAeiIAYgDqKhIgcg\nE6KgoiEGIBYgAyAUoiAKIBWioCAHIBKioKIhAwwBCyADIQ8gAyEXIAMhCCADIRogAyEGCyAAKAIA\nIgQgD7Y4AgAgBCAAQRRqKAIAIgFBAnRqIBe2OAIAIAQgAUEDdGogA7Y4AgAgBCAAKAIQIgVBAnRq\nIAi2OAIAIAQgBSABakECdGogGrY4AgAgBCAFIAFBAXRqQQJ0aiAGtjgCACAAC4EDAQl/AkACQCAA\nKAIIQQJHDQAgACgCDEEDRw0AIAEoAghBAkcNACABKAIMIgNBA0gNACACKAIIQQJHDQAgAigCDCAD\nRg0BC0HtlICAABCAgICAACABKAIMIQMLQQIgAxCSgICAACEEQQIgAxCSgICAACEFQQNBAxCSgICA\nACEGQQNBAxCSgICAACEHQQNBAxCUgICAACEIEJaAgIAAIAhBAEEBQQBBAhCagICAACEJQQNBAxCS\ngICAACEDQQNBAxCSgICAACEKEJaAgIAAIApBAEEBQQBBAhCagICAACELIAQgASAGIAMQwYCAgAAg\nBSACIAMgBxDBgICAACAJIAQgBRC5gICAACEBIAMgCCAGEKeAgIAAGiAKIAcgAxCngICAABogACAL\nEJWAgIAAGiALEJeAgIAAGiAKEJeAgIAAGiADEJeAgIAAGiABEJeAgIAAGiAIEJeAgIAAGiAHEJeA\ngIAAGiAGEJeAgIAAGiAFEJeAgIAAGiAEEJeAgIAAGiAAC5kUAhx/DX0jgICAgABBEGsiBySAgICA\nAAJAAkAgACgCCEEDRw0AIAAoAgxBA0cNACACKAIIQQJHDQAgAigCDCIIQQRIDQAgAygCCEECRw0A\nIAMoAgwgCEcNAAJAIAFFDQAgASgCCEEBRw0BIAEoAgwgCEcNAQsgBEEBSA0AIAVBAUgNACAGQwAA\nAABgDQELQZCVgIAAEICAgIAAIAIoAgwhCAsCQCABRQ0AIAFDAAAAABCbgICAABoLIAhBAnQiCUGy\nlYCAABCFgICAACEKIAlB0ZWAgAAQhYCAgAAgCBCNgICAACILIAhBBBCOgICAACAIIARBAnQiDCAI\nb2sgDGoiDUECdEHwlYCAABCFgICAACEOAkAgDUEBSA0AQQAhDyAIQQFIIRAgDiERA0ACQCAQDQBB\n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\nNgIACwv2EgMAQYAIC7ISAAD4f091dCBvZiBtZW1vcnkhAERvdWJsZSBmcmVlAEFzc2VydGlvbiBm\nYWlsZWQgYXQgbWF0MzIuYzo2MQBPdXQgb2YgbWVtb3J5IGF0IG1hdDMyLmM6NjMAQXNzZXJ0aW9u\nIGZhaWxlZCBhdCBtYXQzMi5jOjg0AE91dCBvZiBtZW1vcnkgYXQgbWF0MzIuYzo4NgBPdXQgb2Yg\nbWVtb3J5IGF0IG1hdDMyLmM6ODkAT3V0IG9mIG1lbW9yeSBhdCBtYXQzMi5jOjEzNgAAAGANAAAB\nAAAAAAAAAAAAAAABAAAAAQAAAAIAAABEb3VibGUgZnJlZSBhdCBtYXQzMi5jOjE0OQBBc3NlcnRp\nb24gZmFpbGVkIGF0IG1hdDMyLmM6MTg0AEFzc2VydGlvbiBmYWlsZWQgYXQgbWF0MzIuYzoxODgA\nQXNzZXJ0aW9uIGZhaWxlZCBhdCBtYXQzMi5jOjI3NQBEb3VibGUgZnJlZSBhdCBtYXQzMi5jOjI5\nAEFzc2VydGlvbiBmYWlsZWQgYXQgYXJpdGhtZXRpYzMyLmM6MzYAQXNzZXJ0aW9uIGZhaWxlZCBh\ndCBhcml0aG1ldGljMzIuYzo1OABBc3NlcnRpb24gZmFpbGVkIGF0IGFyaXRobWV0aWMzMi5jOjgw\nAEFzc2VydGlvbiBmYWlsZWQgYXQgYXJpdGhtZXRpYzMyLmM6OTkAQXNzZXJ0aW9uIGZhaWxlZCBh\ndCBhcml0aG1ldGljMzIuYzoxMjEAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1ldGljMzIuYzox\nNDMAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1ldGljMzIuYzoxNjgAQXNzZXJ0aW9uIGZhaWxl\nZCBhdCBhcml0aG1ldGljMzIuYzoxODkAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1ldGljMzIu\nYzoyMTgAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1ldGljMzIuYzoyNzEAQXNzZXJ0aW9uIGZh\naWxlZCBhdCBhcml0aG1ldGljMzIuYzozMjIAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1ldGlj\nMzIuYzozNTYAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1ldGljMzIuYzozNzgAQXNzZXJ0aW9u\nIGZhaWxlZCBhdCBhcml0aG1ldGljMzIuYzo0MjAAQXNzZXJ0aW9uIGZhaWxlZCBhdCBhcml0aG1l\ndGljMzIuYzo0MzYAQXNzZXJ0aW9uIGZhaWxlZCBhdCBxcjMyLmM6MjYxAEFzc2VydGlvbiBmYWls\nZWQgYXQgcXIzMi5jOjI2NQBBc3NlcnRpb24gZmFpbGVkIGF0IHFyMzIuYzoyODYAQXNzZXJ0aW9u\nIGZhaWxlZCBhdCBxcjMyLmM6MjkwAEFzc2VydGlvbiBmYWlsZWQgYXQgcXIzMi5jOjMyMQBBc3Nl\ncnRpb24gZmFpbGVkIGF0IHFyMzIuYzozMjUAQXNzZXJ0aW9uIGZhaWxlZCBhdCBxcjMyLmM6Mzc5\nAE91dCBvZiBtZW1vcnkgYXQgcXIzMi5jOjM2AEFzc2VydGlvbiBmYWlsZWQgYXQgcXIzMi5jOjY5\nAEFzc2VydGlvbiBmYWlsZWQgYXQgcXIzMi5jOjczAEFzc2VydGlvbiBmYWlsZWQgYXQgcXIzMi5j\nOjE4NABEb3VibGUgZnJlZSBhdCBxcjMyLmM6NTUAQXNzZXJ0aW9uIGZhaWxlZCBhdCBxcjMyLmM6\nMTQ4AEFzc2VydGlvbiBmYWlsZWQgYXQgcXIzMi5jOjIyNABBc3NlcnRpb24gZmFpbGVkIGF0IHFy\nMzIuYzoyMjgAQXNzZXJ0aW9uIGZhaWxlZCBhdCBob21vZ3JhcGh5MzIuYzoyNDQAQXNzZXJ0aW9u\nIGZhaWxlZCBhdCBob21vZ3JhcGh5MzIuYzoyODAAQXNzZXJ0aW9uIGZhaWxlZCBhdCBob21vZ3Jh\ncGh5MzIuYzozNTkAQXNzZXJ0aW9uIGZhaWxlZCBhdCBob21vZ3JhcGh5MzIuYzo0NDQAQXNzZXJ0\naW9uIGZhaWxlZCBhdCBhZmZpbmUzMi5jOjExOQBBc3NlcnRpb24gZmFpbGVkIGF0IGFmZmluZTMy\nLmM6MTk2AEFzc2VydGlvbiBmYWlsZWQgYXQgYWZmaW5lMzIuYzoyMjkAQXNzZXJ0aW9uIGZhaWxl\nZCBhdCByYW5zYWMzMi5jOjcxAE91dCBvZiBtZW1vcnkgYXQgcmFuc2FjMzIuYzo4NABPdXQgb2Yg\nbWVtb3J5IGF0IHJhbnNhYzMyLmM6ODgAT3V0IG9mIG1lbW9yeSBhdCByYW5zYWMzMi5jOjkzAE91\ndCBvZiBtZW1vcnkgYXQgcmFuc2FjMzIuYzoxMDcARG91YmxlIGZyZWUgYXQgcmFuc2FjMzIuYzoy\nMzYARG91YmxlIGZyZWUgYXQgcmFuc2FjMzIuYzoyNDMARG91YmxlIGZyZWUgYXQgcmFuc2FjMzIu\nYzoyNDYARG91YmxlIGZyZWUgYXQgcmFuc2FjMzIuYzoyNDkAQXNzZXJ0aW9uIGZhaWxlZCBhdCBy\nYW5zYWMzMi5jOjI3NQBPdXQgb2YgbWVtb3J5IGF0IHJhbnNhYzMyLmM6Mjg4AE91dCBvZiBtZW1v\ncnkgYXQgcmFuc2FjMzIuYzoyOTIAT3V0IG9mIG1lbW9yeSBhdCByYW5zYWMzMi5jOjI5NwBPdXQg\nb2YgbWVtb3J5IGF0IHJhbnNhYzMyLmM6MzExAERvdWJsZSBmcmVlIGF0IHJhbnNhYzMyLmM6NDM2\nAERvdWJsZSBmcmVlIGF0IHJhbnNhYzMyLmM6NDQzAERvdWJsZSBmcmVlIGF0IHJhbnNhYzMyLmM6\nNDQ2AERvdWJsZSBmcmVlIGF0IHJhbnNhYzMyLmM6NDQ5AEFzc2VydGlvbiBmYWlsZWQgYXQgdHJh\nbnNmb3JtMzIuYzozOQBBc3NlcnRpb24gZmFpbGVkIGF0IHRyYW5zZm9ybTMyLmM6NzcAQXNzZXJ0\naW9uIGZhaWxlZCBhdCB0cmFuc2Zvcm0zMi5jOjExNAAAQbQaCwwIAAAAUA0AAAEAAAAAQcAaCyQA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\n"}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.d(i,{default:()=>$i});var e=n(1567),t=n(2191),s=n(5637),o=n(8902);const r=[],a=[],A="asap"+Math.random().toString(36).substr(1);function c(e,...t){r.unshift(e),a.unshift(t),window.postMessage(A,"*")}window.addEventListener("message",(e=>{if(e.source!==window||e.data!==A)return;if(e.stopPropagation(),0==r.length)return;const t=r.pop(),n=a.pop();t.apply(void 0,n)}),!0);var l=n(5619);const d=navigator.userAgent.includes("Firefox")?(e,...t)=>setTimeout(e,10,...t):(e,...t)=>requestAnimationFrame((()=>e.apply(void 0,t)));class h{constructor(e=2){t.A.assert(e>0),this._initialized=!1,this._pixelBuffer=new Array(e).fill(null).map((()=>new Uint8Array(0))),this._pbo=new Array(e).fill(null),this._consumerIndex=0,this._producerIndex=e-1,this._promise=Array.from({length:e},(()=>o.i.resolve())),this._busy=new Array(e).fill(!1),this._ready=new Array(e).fill(!0)}init(e){this._allocatePBOs(e),e.subscribe(this._allocatePBOs,this,e),this._initialized=!0}release(e){return e.unsubscribe(this._allocatePBOs,this),this._deallocatePBOs(e),this._initialized=!1,null}readPixelsSync(e,n=0,i=0,s=e.width,o=e.height){t.A.assert(this._initialized);const r=e.gl,a=e.glFbo;s=Math.max(0,Math.min(s,e.width)),o=Math.max(0,Math.min(o,e.height)),n=Math.max(0,Math.min(n,e.width-s)),i=Math.max(0,Math.min(i,e.height-o));const A=s*o*4;return this._reallocate(A),r.isContextLost()||(r.bindFramebuffer(r.FRAMEBUFFER,a),r.readPixels(n,i,s,o,r.RGBA,r.UNSIGNED_BYTE,this._pixelBuffer[0]),r.bindFramebuffer(r.FRAMEBUFFER,null)),this._pixelBuffer[0].subarray(0,A)}readPixelsAsync(e,n=0,i=0,s=e.width,r=e.height,a=!1){t.A.assert(this._initialized);const A=e.gl,c=e.glFbo;s=Math.max(0,Math.min(s,e.width)),r=Math.max(0,Math.min(r,e.height)),n=Math.max(0,Math.min(n,e.width-s)),i=Math.max(0,Math.min(i,e.height-r));const l=s*r*4;if(this._reallocate(l),A.isContextLost())return o.i.resolve(this._pixelBuffer[0].subarray(0,l));if(!a){const e=this._pixelBuffer[0].subarray(0,l);return h._readPixelsViaPBO(A,this._pbo[0],e,c,n,i,s,r).then((()=>e))}const d=this._pixelBuffer.length,p=this._producerIndex;if(!this._busy[p]){const e=this._pbo[p],t=this._pixelBuffer[p].subarray(0,l);this._producerIndex=(p+1)%d,this._ready[p]=!1,this._busy[p]=!0,this._promise[p]=h._readPixelsViaPBO(A,e,t,c,n,i,s,r).then((()=>{this._busy[p]=!1,this._ready[p]=!0}))}const g=this._consumerIndex;return this._consumerIndex=(g+1)%d,this._ready[g]?(this._ready[g]=!1,o.i.resolve(this._pixelBuffer[g])):this._promise[g].then((()=>(this._ready[g]=!1,this._pixelBuffer[g])))}_reallocate(e){if(!(e<=this._pixelBuffer[0].byteLength))for(let t=0;t<this._pixelBuffer.length;t++){const n=new Uint8Array(e);this._pixelBuffer[t]=n}}_allocatePBOs(e){const t=e.gl;for(let e=0;e<this._pbo.length;e++)this._pbo[e]=t.createBuffer()}_deallocatePBOs(e){const t=e.gl;for(let e=this._pbo.length-1;e>=0;e--)t.deleteBuffer(this._pbo[e]),this._pbo[e]=null}static _readPixelsViaPBO(e,n,i,r,a,A,p,g){const u=p*g*4;t.A.assert(i.byteLength>=u,"Invalid buffer size"),e.bindBuffer(e.PIXEL_PACK_BUFFER,n),e.bufferData(e.PIXEL_PACK_BUFFER,u,e.DYNAMIC_READ),e.bindFramebuffer(e.FRAMEBUFFER,r),e.readPixels(a,A,p,g,e.RGBA,e.UNSIGNED_BYTE,0),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindBuffer(e.PIXEL_PACK_BUFFER,null);const f=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new o.i(((t,n)=>{"asap"!=s.w.gpuPollingMode?d(h._clientWaitAsync,e,f,0,t,n):c(h._clientWaitAsync,e,f,0,t,n)})).then((()=>{e.bindBuffer(e.PIXEL_PACK_BUFFER,n),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,i),e.bindBuffer(e.PIXEL_PACK_BUFFER,null)})).catch((e=>{throw new l.Er("Can't getBufferSubDataAsync(): error in clientWaitAsync()",e)})).finally((()=>{e.deleteSync(f)}))}static _clientWaitAsync(e,t,n,i,o,r=10,a=1e3){!function r(){const A=e.clientWaitSync(t,n,0);a--<=0?o(new l.MU("GPU polling timeout",l.wB.from(e))):A===e.CONDITION_SATISFIED||A===e.ALREADY_SIGNALED?i():"asap"!=s.w.gpuPollingMode?requestAnimationFrame(r):c(r)}()}}var p=n(1814);class g{constructor(e,t,n,i=e.RGBA,s=e.RGBA8,o=e.UNSIGNED_BYTE,r=e.NEAREST,a=e.MIRRORED_REPEAT){this._gl=e,this._width=Math.max(1,0|t),this._height=Math.max(1,0|n),this._hasMipmaps=!1,this._format=i,this._internalFormat=s,this._dataType=o,this._filter=r,this._wrap=a,this._glTexture=g._createTexture(this._gl,this._width,this._height,this._format,this._internalFormat,this._dataType,this._filter,this._wrap)}release(){const e=this._gl;if(null==this._glTexture)throw new l.Er("The SpeedyTexture has already been released");return this.discardMipmaps(),e.deleteTexture(this._glTexture),this._glTexture=null,this._width=this._height=0,null}upload(e,n=this._width,i=this._height){const s=this._gl;return e instanceof HTMLVideoElement&&e.readyState<2||(t.A.assert(n>0&&i>0),this.discardMipmaps(),this._width=n,this._height=i,this._internalFormat=s.RGBA8,this._format=s.RGBA,this._dataType=s.UNSIGNED_BYTE,g._upload(s,this._glTexture,this._width,this._height,e,0,this._format,this._internalFormat,this._dataType)),this}clear(){const e=this._gl;return e.isContextLost()||(e.bindTexture(e.TEXTURE_2D,this._glTexture),e.texImage2D(e.TEXTURE_2D,0,this._internalFormat,this._width,this._height,0,this._format,this._dataType,null),e.bindTexture(e.TEXTURE_2D,null),this.discardMipmaps()),this}resize(e,t){const n=this._gl;if(this._width===e&&this._height===t)return this;if(t|=0,(e|=0)>p.MAX_TEXTURE_LENGTH||t>p.MAX_TEXTURE_LENGTH)throw new l.EM(`Maximum texture size exceeded. Using ${e} x ${t}, expected up to ${p.MAX_TEXTURE_LENGTH} x ${p.MAX_TEXTURE_LENGTH}.`);if(e<1||t<1)throw new l.qw(`Invalid texture size: ${e} x ${t}`);return n.isContextLost()||(this._width=e,this._height=t,n.bindTexture(n.TEXTURE_2D,this._glTexture),n.texImage2D(n.TEXTURE_2D,0,this._internalFormat,this._width,this._height,0,this._format,this._dataType,null),n.bindTexture(n.TEXTURE_2D,null),this.discardMipmaps()),this}generateMipmaps(e=[]){const n=this._gl;if(this._hasMipmaps)return this;if(n.bindTexture(n.TEXTURE_2D,this._glTexture),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST_MIPMAP_LINEAR),n.generateMipmap(n.TEXTURE_2D),n.bindTexture(n.TEXTURE_2D,null),e.length>0){const n=this.width,i=this.height,s=1+Math.floor(Math.log2(Math.max(n,i)));t.A.assert(e.length<=s);for(let s=1;s<e.length;s++){const o=Math.max(1,n>>>s),r=Math.max(1,i>>>s);t.A.assert(e[s].width===o&&e[s].height===r),e[s].copyTo(this,s)}}return this._hasMipmaps=!0,this}discardMipmaps(){const e=this._gl;this._hasMipmaps&&(e.bindTexture(e.TEXTURE_2D,this._glTexture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,this._filter),e.bindTexture(e.TEXTURE_2D,null),this._hasMipmaps=!1)}hasMipmaps(){return this._hasMipmaps}isReleased(){return null==this._glTexture}get glTexture(){return this._glTexture}get width(){return this._width}get height(){return this._height}get gl(){return this._gl}static _createTexture(e,n,i,s,o,r,a,A){t.A.assert(n>0&&i>0);const c=e.createTexture();return e.bindTexture(e.TEXTURE_2D,c),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,A),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,A),e.texImage2D(e.TEXTURE_2D,0,o,n,i,0,s,r,null),e.bindTexture(e.TEXTURE_2D,null),c}static _upload(e,t,n,i,s,o,r,a,A){return e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,o,a,n,i,0,r,A,s),e.bindTexture(e.TEXTURE_2D,null),t}}class u extends g{constructor(e,t,n,i=void 0,s=void 0,o=void 0,r=void 0,a=void 0){super(e,t,n,i,s,o,r,a),this._glFbo=u._createFramebuffer(e,this._glTexture)}release(){const e=this._gl;if(null==this._glFbo)throw new l.Er("The SpeedyDrawableTexture has already been released");return e.deleteFramebuffer(this._glFbo),this._glFbo=null,super.release()}get glFbo(){return this._glFbo}copyTo(e,n=0){const i=this._gl;if(i.isContextLost())return;const s=1<<(n|=0),o=Math.max(1,Math.floor(e.width/s)),r=Math.max(1,Math.floor(e.height/s));t.A.assert(this._width===o&&this._height===r),u._copyToTexture(i,this._glFbo,e.glTexture,0,0,this._width,this._height,n)}clear(){return this.clearToColor(0,0,0,0)}clearToColor(e,t,n,i){const s=this._gl;return s.isContextLost()||(e=Math.max(0,Math.min(+e,1)),t=Math.max(0,Math.min(+t,1)),n=Math.max(0,Math.min(+n,1)),i=Math.max(0,Math.min(+i,1)),this.discardMipmaps(),s.bindFramebuffer(s.FRAMEBUFFER,this._glFbo),s.viewport(0,0,this._width,this._height),s.clearColor(e,t,n,i),s.clear(s.COLOR_BUFFER_BIT),s.bindFramebuffer(s.FRAMEBUFFER,null)),this}inspect(e,t){if(void 0===t){(t=new h).init(e);const n=t.readPixelsSync(this);return t.release(e),new Uint8Array(n)}{const e=t.readPixelsSync(this);return new Uint8Array(e)}}inspect32(e,n){return t.A.assert(p.LITTLE_ENDIAN),new Uint32Array(this.inspect(e,n).buffer)}static _createFramebuffer(e,t){const n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER);if(i!=e.FRAMEBUFFER_COMPLETE){const t=["FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"].filter((t=>e[t]===i))[0]||"unknown error";throw new l.wB(`Can't create framebuffer: ${t} (${i})`)}return e.bindFramebuffer(e.FRAMEBUFFER,null),n}static _copyToTexture(e,t,n,i,s,o,r,a=0){return e.bindTexture(e.TEXTURE_2D,n),e.bindFramebuffer(e.FRAMEBUFFER,t),e.copyTexSubImage2D(e.TEXTURE_2D,a,0,0,i,s,o,r),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindTexture(e.TEXTURE_2D,null),n}}var f=n(3112);const I=Object.freeze({sampler2D:"uniform1i",isampler2D:"uniform1i",usampler2D:"uniform1i",float:"uniform1f",int:"uniform1i",uint:"uniform1ui",bool:"uniform1i",vec2:"uniform2f",vec3:"uniform3f",vec4:"uniform4f",ivec2:"uniform2i",ivec3:"uniform3i",ivec4:"uniform4i",uvec2:"uniform2ui",uvec3:"uniform3ui",uvec4:"uniform4ui",bvec2:"uniform2i",bvec3:"uniform3i",bvec4:"uniform4i",mat2:"uniformMatrix2fv",mat3:"uniformMatrix3fv",mat4:"uniformMatrix4fv"});class m extends Function{constructor(e,t,n={}){return super("...args","return this._self._call(...args)"),this._self=this.bind(this),this._self._init(e,t,n),this._self}_init(e,t,n){if(e.isContextLost())throw new l.Er("Can't initialize SpeedyProgram: lost context");n=Object.assign({renderToTexture:!0,pingpong:!1},n),this._gl=e,this._program=m._compile(e,t.vertexSource,t.fragmentSource),this._geometry=new _(e,{position:t.locationOfAttributes.position,texCoord:t.locationOfAttributes.texCoord}),this._argnames=t.arguments,this._argIsArray=new Array(this._argnames.length).fill(!1),this._ubo=null,this._renderToTexture=Boolean(n.renderToTexture),this._width=1,this._height=1,this._size=[1,1],this._texture=new Array(n.pingpong?2:1).fill(null),this._textureIndex=0,this._uniform=new Map,this._shaderdecl=t,e.useProgram(this._program);for(const n of t.uniforms){const i=t.uniformType(n),s=e.getUniformLocation(this._program,n);this._uniform.set(n,new y(i,s))}for(let e=0;e<this._argnames.length;e++){const t=this._argnames[e];if(!this._uniform.has(t)&&(this._argIsArray[e]=this._uniform.has(C(t,0)),!this._argIsArray[e]))throw new l.Er(`Expected uniform "${t}", as declared in the argument list`)}}_call(...e){const t=this._gl,n=this._argnames,i=this._texture[this._textureIndex];if(e.length!=n.length)throw new l.qw(`Can't run shader: incorrect number of arguments (expected ${n.length}, got ${e.length})`);for(let t=e.length-1;t>=0;t--)if(e[t]===i)throw new l.EM("Can't run shader: don't use its output texture as an input to itself. Consider using pingpong rendering!");if(t.isContextLost())return i;t.useProgram(this._program),t.bindVertexArray(this._geometry.vao);const s=this._renderToTexture?i.glFbo:null,o=this._uniform.get("texSize");this._size[0]=this._width,this._size[1]=this._height,o.setValue(t,this._size);for(let i=0,s=0;i<e.length;i++){const o=n[i];if(this._argIsArray[i]){const n=e[i];if(!Array.isArray(n))throw new l.qw(`Can't run shader: expected an array for "${o}"`);if(this._uniform.has(C(o,n.length)))throw new l.qw(`Can't run shader: too few elements in the "${o}" array`);for(let e,i=0;void 0!==(e=this._uniform.get(C(o,i)));i++)s=e.setValue(t,n[i],s)}else s=this._uniform.get(o).setValue(t,e[i],s)}return null!==this._ubo&&this._ubo.update(),t.bindFramebuffer(t.FRAMEBUFFER,s),t.viewport(0,0,this._width,this._height),t.drawArrays(t.TRIANGLES,0,6),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindVertexArray(null),null!=i&&i.discardMipmaps(),this._pingpong(),i}outputs(e,t,...n){return this._setOutputTexture(...n),this._setOutputSize(e,t),this}_setOutputSize(e,n){t.A.assert(e>0&&n>0),this._width=0|e,this._height=0|n;for(let e=0;e<this._texture.length;e++)null!=this._texture[e]&&this._texture[e].resize(this._width,this._height);return this}_setOutputTexture(...e){t.A.assert(e.length===this._texture.length,`Incorrect number of textures (expected ${this._texture.length})`);for(let t=0;t<this._texture.length;t++)this._texture[t]=e[t];return this._textureIndex=0,this}clear(){const e=this._texture[this._textureIndex];for(let e=0;e<this._texture.length;e++)this._texture[e].clear();return this._pingpong(),e}setUBO(e,t){return null===this._ubo&&(this._ubo=new x(this._gl,this._program)),this._ubo.set(e,t),this}release(){const e=this._gl;return null!=this._ubo&&(this._ubo=this._ubo.release()),this._texture.fill(null),this._geometry=this._geometry.release(),e.deleteProgram(this._program),this._program=null,null}definedConstant(e){return this._shaderdecl.definedConstant(e)}_pingpong(){this._texture.length>1&&(this._textureIndex=1-this._textureIndex)}static _compile(e,t,n){const i=e.createProgram(),s=e.createShader(e.VERTEX_SHADER),o=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(s,t),e.compileShader(s),e.attachShader(i,s),e.shaderSource(o,n),e.compileShader(o),e.attachShader(i,o),e.linkProgram(i),e.validateProgram(i),e.getProgramParameter(i,e.LINK_STATUS))return i;const r=[e.getShaderInfoLog(o),e.getShaderInfoLog(s),e.getProgramInfoLog(i)];e.deleteProgram(i),e.deleteShader(o),e.deleteShader(s);const a=e=>{return new Array((t=e,Math.max(0,2-Math.floor(Math.log10(t))))).fill(" ").join("")+e+". ";var t},A=(r[0]?n:t).split("\n").map(((e,t)=>a(1+t)+e)).join("\n");throw new l.wB("\n\n---------- ERROR ----------\n\n"+r.filter((e=>e)).join("\n")+"\n\n---------- SOURCE CODE ----------\n\n"+A+"\n")}}function _(e,t){return this.vao=e.createVertexArray(),this.vbo=Object.freeze({position:e.createBuffer(),texCoord:e.createBuffer()}),this._gl=e,e.bindVertexArray(this.vao),e.bindBuffer(e.ARRAY_BUFFER,this.vbo.position),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(t.position),e.vertexAttribPointer(t.position,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,this.vbo.texCoord),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(t.texCoord),e.vertexAttribPointer(t.texCoord,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null),Object.freeze(this)}function y(e,t){if(this.type=String(e),!Object.prototype.hasOwnProperty.call(I,this.type))throw new l.EM(`Unsupported uniform type: ${this.type}`);this.location=t,this.setter=I[this.type];const n=0|Number(this.setter.match(/^uniform(Matrix)?(\d)/)[2]);this.dim=this.type.startsWith("mat")?2:this.type.indexOf("vec")>=0?1:0,this.length=2==this.dim?n*n:n,this._value=null}function x(e,t){this._gl=e,this._program=t,this._nextIndex=0,this._ubo=Object.create(null)}function C(e,t){const n=C.cache;let i=n.get(e);return void 0===i&&n.set(e,i=[]),void 0===i[t]&&(i[t]=`${e}[${t}]`),i[t]}_.prototype.release=function(){const e=this._gl;return e.deleteVertexArray(this.vao),e.deleteBuffer(this.vbo.position),e.deleteBuffer(this.vbo.texCoord),null},y.prototype.setValue=function(e,t,n=-1){const i=e[this.setter];if("object"==typeof t&&this.type.endsWith("sampler2D")){if(n>=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)throw new l.EM(`Can't activate texture unit ${n}: max is ${e.MAX_COMBINED_TEXTURE_IMAGE_UNITS}`);if(Array.isArray(t))throw new l.EM("Can't pass arrays of textures to shaders");if(null==t)throw new l.qw(`Can't run shader: cannot use ${t} as an input texture`);if(n<0)throw new l.qw("Missing texNo");const i=t;e.activeTexture(e.TEXTURE0+n),e.bindTexture(e.TEXTURE_2D,i.glTexture),e.uniform1i(this.location,n),n++}else if(t===this._value&&"object"!=typeof t);else if("number"==typeof t||"boolean"==typeof t)i.call(e,this.location,t);else{if(!Array.isArray(t))throw new l.qw(`Can't run shader: unrecognized argument "${t}"`);if(t.length!==this.length)throw new l.qw(`Can't run shader: incorrect number of values for ${this.type}: "${t}"`);2==this.dim?i.call(e,this.location,!1,t):i.call(e,this.location,...t)}return this._value=t,n},x.prototype.set=function(e,t){const n=this._gl;void 0===this._ubo[e]&&(this._ubo[e]={buffer:n.createBuffer(),blockBindingIndex:this._nextIndex++,blockIndex:-1,data:null});const i=this._ubo[e];if(i.blockIndex<0){const t=n.getUniformBlockIndex(this._program,e);n.uniformBlockBinding(this._program,t,i.blockBindingIndex),i.blockIndex=t}i.data=t},x.prototype.update=function(){const e=this._gl;for(const t in this._ubo){const n=this._ubo[t];e.bindBuffer(e.UNIFORM_BUFFER,n.buffer),e.bufferData(e.UNIFORM_BUFFER,n.data,e.DYNAMIC_DRAW),e.bindBufferBase(e.UNIFORM_BUFFER,n.blockBindingIndex,n.buffer),e.bindBuffer(e.UNIFORM_BUFFER,null)}},x.prototype.release=function(){const e=this._gl;for(const t in this._ubo){const n=this._ubo[t];e.deleteBuffer(n.buffer),n.data=null}return null},C.cache=new Map;const E=Object.freeze({usesPingpongRendering:()=>({pingpong:!0}),rendersToCanvas:()=>({renderToTexture:!1})});class S{constructor(e){this._gpu=e,this._programs=[]}declare(e,t,n={}){return Object.defineProperty(this,e,{get:(()=>{const i=Symbol(e);return()=>this[i]||(this[i]=this._createProgram(t.build(),n))})()}),this}get program(){return E}release(){for(let e=0;e<this._programs.length;e++)this._programs[e].release();return null}_createProgram(e,t={}){const n=new m(this._gpu.gl,e,t);return this._programs.push(n),n}}const P=(0,f.bf)("utils/copy.glsl").withArguments("image"),v=(0,f.bf)("utils/copy-raster.glsl").withDefines({TYPE:1}).withArguments("image"),w=(0,f.bf)("utils/copy-raster.glsl").withDefines({TYPE:2}).withArguments("image"),B=(0,f.bf)("utils/copy.glsl","utils/flip-y.vs.glsl").withArguments("image"),b=(0,f.bf)("utils/fill.glsl").withArguments("value"),Q=(0,f.bf)("utils/fill-components.glsl").withArguments("image","pixelComponents","value"),M=(0,f.bf)("utils/copy-components.glsl").withArguments("dest","src","destComponents","srcComponentId"),D=(0,f.bf)("utils/scan-minmax2d.glsl").withArguments("image","iterationNumber"),k=(0,f.bf)("utils/sobel-derivatives.glsl","utils/sobel-derivatives.vs.glsl").withArguments("pyramid","lod");class K extends S{constructor(e){super(e),this.declare("renderToCanvas",B,{...this.program.rendersToCanvas()}).declare("copy",P).declare("copyKeypoints",v).declare("copy2DVectors",w).declare("fill",b).declare("fillComponents",Q).declare("copyComponents",M).declare("scanMinMax2D",D,{...this.program.usesPingpongRendering()}).declare("sobelDerivatives",k)}}var L=n(5282);const z=(0,f.bf)("filters/rgb2grey.glsl").withArguments("image"),T=[3,5,7].reduce(((e,t)=>(e[t]=(0,f.bf)("filters/convolution2d.glsl").withDefines({KERNEL_SIZE_SQUARED:t*t}).withArguments("image","kernel"),e)),{}),R=[3,5,7,9,11,13,15].reduce(((e,t)=>(e[t]=(0,f.bf)("filters/convolution1d.glsl").withDefines({KERNEL_SIZE:t,AXIS:0}).withArguments("image","kernel"),e)),{}),N=[3,5,7,9,11,13,15].reduce(((e,t)=>(e[t]=(0,f.bf)("filters/convolution1d.glsl").withDefines({KERNEL_SIZE:t,AXIS:1}).withArguments("image","kernel"),e)),{}),X=[3,5,7].reduce(((e,t)=>(e[t]=(0,f.bf)("filters/fast-median.glsl").withDefines({KERNEL_SIZE:t}).withArguments("image"),e)),{}),F=(0,f.bf)("filters/normalize-image.glsl").withDefines({GREYSCALE:1}).withArguments("minmax2d","minValue","maxValue"),O=(0,f.bf)("filters/normalize-image.glsl").withDefines({GREYSCALE:0}).withArguments("minmax2dRGB","minValue","maxValue"),U=(0,f.bf)("filters/nightvision.glsl").withDefines({GREYSCALE:0}).withArguments("image","illuminationMap","gain","offset","decay"),G=(0,f.bf)("filters/nightvision.glsl").withDefines({GREYSCALE:1}).withArguments("image","illuminationMap","gain","offset","decay"),q=e=>t.A.gaussianKernel((e=>Math.max(1,e/6))(e),e),H=e=>new Array(e).fill(1/e);class Y extends S{constructor(e){super(e),this.declare("rgb2grey",z).declare("median3",X[3]).declare("median5",X[5]).declare("median7",X[7]).declare("convolution3",T[3]).declare("convolution5",T[5]).declare("convolution7",T[7]).declare("convolution3x",R[3]).declare("convolution3y",N[3]).declare("convolution5x",R[5]).declare("convolution5y",N[5]).declare("convolution7x",R[7]).declare("convolution7y",N[7]).declare("convolution9x",R[9]).declare("convolution9y",N[9]).declare("convolution11x",R[11]).declare("convolution11y",N[11]).declare("convolution13x",R[13]).declare("convolution13y",N[13]).declare("convolution15x",R[15]).declare("convolution15y",N[15]).declare("normalizeGreyscale",F).declare("normalizeColored",O).declare("nightvision",U).declare("nightvisionGreyscale",G).declare("illuminationMapLoX",(0,L.convX)(t.A.gaussianKernel(80,31))).declare("illuminationMapLoY",(0,L.convY)(t.A.gaussianKernel(80,31))).declare("illuminationMapX",(0,L.convX)(t.A.gaussianKernel(80,63))).declare("illuminationMapY",(0,L.convY)(t.A.gaussianKernel(80,63))).declare("illuminationMapHiX",(0,L.convX)(t.A.gaussianKernel(80,255))).declare("illuminationMapHiY",(0,L.convY)(t.A.gaussianKernel(80,255))).declare("gaussian3x",(0,L.convX)([.25,.5,.25])).declare("gaussian3y",(0,L.convY)([.25,.5,.25])).declare("gaussian5x",(0,L.convX)([.05,.25,.4,.25,.05])).declare("gaussian5y",(0,L.convY)([.05,.25,.4,.25,.05])).declare("gaussian7x",(0,L.convX)(q(7))).declare("gaussian7y",(0,L.convY)(q(7))).declare("gaussian9x",(0,L.convX)(q(9))).declare("gaussian9y",(0,L.convY)(q(9))).declare("gaussian11x",(0,L.convX)(q(11))).declare("gaussian11y",(0,L.convY)(q(11))).declare("box3x",(0,L.convX)(H(3))).declare("box3y",(0,L.convY)(H(3))).declare("box5x",(0,L.convX)(H(5))).declare("box5y",(0,L.convY)(H(5))).declare("box7x",(0,L.convX)(H(7))).declare("box7y",(0,L.convY)(H(7))).declare("box9x",(0,L.convX)(H(9))).declare("box9y",(0,L.convY)(H(9))).declare("box11x",(0,L.convX)(H(11))).declare("box11y",(0,L.convY)(H(11)))}}var J=n(416);class W extends J.Q{static create(e,n,i){t.A.assert(i%4==0,`Invalid descriptorSize: ${i}`);const s=n.length,o=i/4,r=Math.log2(o*Math.max(s,1))/2,a=1<<Math.min(11,Math.ceil(r)),A=a,c=a,d=A*c/o;if(s>d)throw new l.EM(`The capacity of the descriptorDB (${d} for ${8*i}-bit descriptors) has been exceeded`);const h=new Uint8Array(A*c*4);for(let e=0;e<s;e++){const s=e*i,o=n[e];t.A.assert(o.byteLength===i),t.A.assert(s+i<=h.byteLength),h.set(o,s)}const p=s*i;return t.A.log(`Creating a ${A}x${c} database of ${s} `+8*i+"-bit descriptors "+`(total size: ${(p/1048576).toFixed(2)} MB)`),e.resize(A,c),e.upload(h),e}}const Z=[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],j=[10,11,12,13,14,15,16,17,18,19,20],$=[32,64],V=Math.max(...j),ee=Math.max(...Z),te=e=>(t.A.range(ee).forEach((t=>e.subarray(t*V,(t+1)*V).sort())),e),ne=(e,n)=>(t.A.range(ee).forEach((t=>n.subarray((t+1)*V-e,(t+1)*V).fill(195939070))),n),ie=j.reduce(((e,n)=>{return e[n]={32:te(ne(V-(i=n),new Uint32Array([...t.A.shuffle(t.A.range(256)),...t.A.shuffle(t.A.range(256)),...t.A.shuffle(t.A.range(256))].slice(0,ee*V)))),64:te(ne(V-i,new Uint32Array([...t.A.shuffle(t.A.range(512)),...t.A.shuffle(t.A.range(512))].slice(0,ee*V))))},e;var i}),{});class se{constructor(e,n,i,s=8,o=15,r=.95){const a=i.length,A=a>0?i[0].byteLength:0,c=(l=s,d=o,h=r,j.includes(d)&&Z.includes(l)?[{name:"x-small",bucketCapacity:1,tableCount:l,hashSize:d,capacity:re(d,1,h)},{name:"small",bucketCapacity:2,tableCount:l,hashSize:d,capacity:re(d,2,h)},{name:"small-plus",bucketCapacity:3,tableCount:l,hashSize:d,capacity:re(d,3,h)},{name:"medium",bucketCapacity:4,tableCount:l,hashSize:d,capacity:re(d,4,h)},{name:"medium-plus",bucketCapacity:5,tableCount:l,hashSize:d,capacity:re(d,5,h)},{name:"large",bucketCapacity:6,tableCount:l,hashSize:d,capacity:re(d,6,h)},{name:"x-large",bucketCapacity:8,tableCount:l,hashSize:d,capacity:re(d,8,h)}]:null);var l,d,h;t.A.assert(a>0,"Can't build LSH tables without descriptors!"),t.A.assert($.includes(A),`Can't build LSH tables: unacceptable descriptor size of ${A} bytes`),t.A.assert(i.findIndex((e=>e.byteLength!==A))<0,`Can't build LSH tables: incorrectly sized descriptors. Expected ${A} bytes for each`),t.A.assert(a<p.MATCH_MAX_INDEX,`Can't build LSH tables: too many descriptors (${i.length})`),t.A.assert(null!=c,`Can't build LSH tables: unacceptable number of tables (${s}) x hash size (${o})`),this._profile=c.find((e=>a<=e.capacity))||c[c.length-1],this._descriptorSize=A,this._descriptorCount=a,this._sequences=this._pickSequences(this._descriptorSize),this._tables=this._createStaticTables(e,this._sequences,i,A),this._descriptorDB=W.create(n,i,A)}get descriptorSize(){return this._descriptorSize}get descriptorCount(){return this._descriptorCount}get sequences(){return this._sequences}get hashSize(){return this._profile.hashSize}get bucketCapacity(){return this._profile.bucketCapacity}get bucketsPerTable(){return 1<<this._profile.hashSize}get tableCount(){return this._profile.tableCount}get tableSize(){return this.bucketsPerTable*this.bucketCapacity*4}get totalSize(){return this.tableCount*this.tableSize}get tables(){return this._tables}get descriptorDB(){return this._descriptorDB}_pickSequences(e){return t.A.assert(Object.prototype.hasOwnProperty.call(ie,this.hashSize)),t.A.assert(Object.prototype.hasOwnProperty.call(ie[this.hashSize],e)),ie[this.hashSize][e]}_createStaticTables(e,n,i,s){const o=4294967295,r=this._profile.name,a=this._profile.capacity,A=this.tableCount,c=this.bucketsPerTable,l=4*this.bucketCapacity,d=this.hashSize,h=this.tableCount*this.bucketsPerTable*this.bucketCapacity,p=Math.min((g=Math.sqrt(h))>1?1<<Math.ceil(Math.log2(g)):1,4096);var g;const u=Math.ceil(h/p),f=i.length;t.A.assert(d<=V),t.A.assert(A<=ee),t.A.assert(h<=p*u);const I=1048576;if(t.A.log(`Building ${A} ${r} LSH tables with ${f} ${8*s}-bit descriptors each and hashSize = ${d} bits (${p}x${u}, with ${(this.tableSize/I).toFixed(2)} MB per table and total size = ${(this.totalSize/I).toFixed(2)} MB), `),f>a){const e=100*f/a;t.A.warning(`There are too many descriptors (${f}) for a ${r} LSH table. That's ${e.toFixed(2)}% of its theoretical capacity. Consider increasing the hashSize (currently set to ${d}) or reducing the number of descriptors to avoid degradation.`)}const m=new ArrayBuffer(p*u*4),_=new Uint8Array(m).fill(255),y=new DataView(m),x=t.A.shuffle(t.A.range(f)),C=new Array(A).fill(0);for(let e=0;e<f;e++){const t=x[e],s=this._hashCodes(i[t],n);for(let e=0;e<A;e++){const n=e*c*l+s[e]*l;let i=o;for(let e=0;e<l;e+=4){const s=n+e;if(i=y.getUint32(s,!0),i==o){y.setUint32(s,t,!0);break}}i!=o&&C[e]++}}const E=C.reduce(((e,t)=>e+t),0),S=C.map((e=>100*e/f));return t.A.log(`When building ${A} ${r} LSH tables with ${f} ${8*s}-bit descriptors each and hashSize = ${d} bits, I got the following discard profile: `+S.map((e=>e.toFixed(2)+"%")).join(", ")+". "+`Average: ${(100*E/(A*f)).toFixed(2)}%. `+`Minimum: ${Math.min(...S).toFixed(2)}%. `+`Table capacity: ${a}.`),e.resize(p,u),e.upload(_),e}_hashCodes(e,n){const i=this.tableCount,s=this.hashSize,o=this.bucketsPerTable,r=new Array(i);t.A.assert(s<=V&&n.length>=V*i);for(let a=0;a<i;a++){const i=V*a;let A=0;for(let t=0;t<s;t++){let s=n[i+t],o=1<<(7&s);A=A<<1|!!(e[s>>>3]&o)}t.A.assert(A>=0&&A<o),r[a]=A}return r}}function oe(e,t){const n=Math.exp(-e);let i=1,s=1,o=1;for(let n=1;n<=t;n++)i+=(o*=e)/(s*=n);return i*n}function re(e,t,n=.99){const i=1<<e,s=t,o=n;let r=1,a=i*s,A=0,c=0;for(;r<a;)A=Math.floor((r+a)/2),c=oe(A/i,s),c>o?r=A+1:a=A;return A}const ae=(0,f.bf)("keypoints/fast.glsl","keypoints/fast.vs.glsl").withDefines({FAST_TYPE:916}).withArguments("corners","pyramid","lod","threshold"),Ae=[1,3,5,7].reduce(((e,t)=>(e[t]=(0,f.bf)("keypoints/harris.glsl").withDefines({WINDOW_SIZE:t}).withArguments("corners","pyramid","derivatives","lod","lodStep","gaussian"),e)),{}),ce=(0,f.bf)("keypoints/score-findmax.glsl").withArguments("corners","iterationNumber"),le=(0,f.bf)("keypoints/harris-cutoff.glsl").withArguments("corners","maxScore","quality"),de=(0,f.bf)("keypoints/subpixel-refinement.glsl").withDefines({METHOD:0}).withArguments("pyramid","encodedKeypoints","descriptorSize","extraSize","encoderLength","maxIterations","epsilon"),he=(0,f.bf)("keypoints/subpixel-refinement.glsl").withDefines({METHOD:1}).withArguments("pyramid","encodedKeypoints","descriptorSize","extraSize","encoderLength","maxIterations","epsilon"),pe=(0,f.bf)("keypoints/subpixel-refinement.glsl").withDefines({METHOD:2}).withArguments("pyramid","encodedKeypoints","descriptorSize","extraSize","encoderLength","maxIterations","epsilon"),ge=(0,f.bf)("keypoints/subpixel-refinement.glsl").withDefines({METHOD:3}).withArguments("pyramid","encodedKeypoints","descriptorSize","extraSize","encoderLength","maxIterations","epsilon"),ue=(0,f.bf)("keypoints/refine-scale.glsl").withDefines({METHOD:0}).withArguments("pyramid","lodStep","encodedKeypoints","descriptorSize","extraSize","encoderLength"),fe=(0,f.bf)("keypoints/refine-scale.glsl").withDefines({METHOD:1}).withArguments("pyramid","lodStep","encodedKeypoints","descriptorSize","extraSize","encoderLength","threshold"),Ie=(0,f.bf)("keypoints/allocate-descriptors.glsl").withArguments("inputEncodedKeypoints","inputDescriptorSize","inputExtraSize","inputEncoderLength","outputDescriptorSize","outputExtraSize","outputEncoderLength"),me=(0,f.bf)("keypoints/allocate-extra.glsl").withArguments("inputEncodedKeypoints","inputDescriptorSize","inputExtraSize","inputEncoderLength","outputDescriptorSize","outputExtraSize","outputEncoderLength"),_e=(0,f.bf)("keypoints/transfer-to-extra.glsl").withArguments("encodedData","strideOfEncodedData","encodedKeypoints","descriptorSize","extraSize","encoderLength"),ye=(0,f.bf)("keypoints/orb-descriptor.glsl").withArguments("image","encodedCorners","extraSize","encoderLength"),xe=(0,f.bf)("keypoints/orb-orientation.glsl").withArguments("image","encodedKeypoints","descriptorSize","extraSize","encoderLength"),Ce=(0,f.bf)("keypoints/nonmax-suppression.glsl").withDefines({MULTISCALE:0}).withArguments("image","lodStep"),Ee=(0,f.bf)("keypoints/nonmax-suppression.glsl").withDefines({MULTISCALE:1}).withArguments("image","lodStep"),Se=(0,f.bf)("keypoints/nonmax-space.glsl").withArguments("corners"),Pe=(0,f.bf)("keypoints/nonmax-scale.glsl").withDefines({USE_LAPLACIAN:1}).withArguments("corners","pyramid","pyrLaplacian","lodStep"),ve=(0,f.bf)("keypoints/nonmax-scale.glsl").withDefines({USE_LAPLACIAN:0}).withArguments("corners","pyramid","lodStep"),we=(0,f.bf)("keypoints/laplacian.glsl").withArguments("corners","pyramid","lodStep","lodOffset"),Be=[3,5,7,9,11,13,15,17,19,21].reduce(((e,t)=>(e[t]=(0,f.bf)("keypoints/lk.glsl").withDefines({WINDOW_SIZE:t}).withArguments("encodedFlow","prevKeypoints","nextPyramid","prevPyramid","level","depth","numberOfIterations","discardThreshold","epsilon","descriptorSize","extraSize","encoderLength"),e)),{}),be=(0,f.bf)("keypoints/transfer-flow.glsl").withArguments("encodedFlow","encodedKeypoints","descriptorSize","extraSize","encoderLength"),Qe=(0,f.bf)("keypoints/knn-init.glsl").withDefines({ENCODE_FILTERS:0}),Me=(0,f.bf)("keypoints/knn-init.glsl").withDefines({ENCODE_FILTERS:1}),De=(0,f.bf)("keypoints/knn-transfer.glsl").withArguments("encodedMatches","encodedKthMatches","numberOfMatchesPerKeypoint","kthMatch"),ke=(0,f.bf)("keypoints/bf-knn.glsl").withDefines({DESCRIPTOR_SIZE:32,NUMBER_OF_KEYPOINTS_PER_PASS:16}).withArguments("encodedMatches","encodedFilters","matcherLength","dbEncodedKeypoints","dbDescriptorSize","dbExtraSize","dbEncoderLength","encodedKeypoints","descriptorSize","extraSize","encoderLength","passId"),Ke=(0,f.bf)("keypoints/bf-knn.glsl").withDefines({DESCRIPTOR_SIZE:64,NUMBER_OF_KEYPOINTS_PER_PASS:8}).withArguments("encodedMatches","encodedFilters","matcherLength","dbEncodedKeypoints","dbDescriptorSize","dbExtraSize","dbEncoderLength","encodedKeypoints","descriptorSize","extraSize","encoderLength","passId"),Le=(0,f.bf)("keypoints/knn-init.glsl").withDefines({ENCODE_FILTERS:0}),ze=(0,f.bf)("keypoints/knn-init.glsl").withDefines({ENCODE_FILTERS:1}),Te=$.reduce(((e,t)=>(e[t]=j.reduce(((e,n)=>(e[n]=[0,1,2].reduce(((e,i)=>(e[i]=(0,f.bf)("keypoints/lsh-knn.glsl").withDefines({DESCRIPTOR_SIZE:t,HASH_SIZE:n,LEVEL:i,SEQUENCE_MAXLEN:V,SEQUENCE_COUNT:ee}).withArguments("candidates","filters","matcherLength","tables","descriptorDB","tableIndex","bucketCapacity","bucketsPerTable","tablesStride","descriptorDBStride","encodedKeypoints","descriptorSize","extraSize","encoderLength"),e)),{}),e)),{}),e)),{}),Re=(0,f.bf)("keypoints/knn-transfer.glsl").withArguments("encodedMatches","encodedKthMatches","numberOfMatchesPerKeypoint","kthMatch"),Ne=(0,f.bf)("keypoints/sort-keypoints.glsl").withDefines({STAGE:1}).withArguments("encodedKeypoints","descriptorSize","extraSize","encoderLength"),Xe=(0,f.bf)("keypoints/sort-keypoints.glsl").withDefines({STAGE:2}).withArguments("permutation","blockSize","dblLog2BlockSize"),Fe=(0,f.bf)("keypoints/sort-keypoints.glsl").withDefines({STAGE:3}).withArguments("permutation","maxKeypoints","encodedKeypoints","descriptorSize","extraSize"),Oe=(0,f.bf)("keypoints/mix-keypoints.glsl").withDefines({STAGE:1}).withArguments("encodedKeypointsA","encodedKeypointsB","encoderLengthA","encoderLengthB","encoderCapacityA","encoderCapacityB","descriptorSize","extraSize","encoderLength"),Ue=(0,f.bf)("keypoints/mix-keypoints.glsl").withDefines({STAGE:2}).withArguments("encodedKeypoints","descriptorSize","extraSize","encoderLength","maxKeypoints"),Ge=(0,f.bf)("keypoints/mix-keypoints.glsl").withDefines({STAGE:3}).withArguments("array","blockSize"),qe=(0,f.bf)("keypoints/mix-keypoints.glsl").withDefines({STAGE:5}).withArguments("array"),He=(0,f.bf)("keypoints/mix-keypoints.glsl").withDefines({STAGE:4}).withArguments("array","encodedKeypoints","descriptorSize","extraSize","encoderLength"),Ye=(0,f.bf)("keypoints/lookup-of-locations.glsl").withDefines({FS_OUTPUT_TYPE:2,STAGE:1}).withArguments("corners"),Je=(0,f.bf)("keypoints/lookup-of-locations.glsl","keypoints/lookup-of-locations.vs.glsl").withDefines({FS_OUTPUT_TYPE:2,FS_USE_CUSTOM_PRECISION:1,STAGE:2}).withArguments("lookupTable","blockSize","width","height"),We=(0,f.bf)("keypoints/lookup-of-locations.glsl").withDefines({STAGE:-1}).withArguments("lookupTable"),Ze=(0,f.bf)("keypoints/encode-keypoints.glsl").withArguments("corners","lookupTable","stride","descriptorSize","extraSize","encoderLength","encoderCapacity"),je=(0,f.bf)("keypoints/encode-keypoint-offsets.glsl").withArguments("corners","imageSize"),$e=(0,f.bf)("keypoints/encode-keypoint-long-offsets.glsl").withDefines({MAX_ITERATIONS:6}).withArguments("offsetsImage","imageSize"),Ve=(0,f.bf)("keypoints/encode-keypoint-positions.glsl").withArguments("offsetsImage","imageSize","passId","numPasses","keypointLimit","encodedKeypoints","descriptorSize","extraSize","encoderLength"),et=(0,f.bf)("keypoints/encode-keypoint-properties.glsl").withArguments("corners","encodedKeypoints","descriptorSize","extraSize","encoderLength"),tt=(0,f.bf)("keypoints/encode-null-keypoints.glsl").withArguments(),nt=(0,f.bf)("keypoints/transfer-orientation.glsl").withArguments("encodedOrientations","encodedKeypoints","descriptorSize","extraSize","encoderLength"),it=(0,f.bf)("keypoints/upload-keypoints.glsl").withDefines({BUFFER_SIZE:1024}).withArguments("encodedKeypoints","startIndex","endIndex","descriptorSize","extraSize","encoderLength"),st=(0,f.bf)("keypoints/apply-homography.glsl").withArguments("homography","encodedKeypoints","descriptorSize","extraSize","encoderLength"),ot=(0,f.bf)("keypoints/clip-border.glsl").withArguments("imageWidth","imageHeight","borderTop","borderRight","borderBottom","borderLeft","encodedKeypoints","descriptorSize","extraSize","encoderLength"),rt=(0,f.bf)("keypoints/distance-filter.glsl").withArguments("encodedKeypointsA","encoderLengthA","encodedKeypointsB","encoderLengthB","descriptorSize","extraSize","encoderLength","threshold"),at=(0,f.bf)("keypoints/hamming-distance-filter.glsl").withDefines({DESCRIPTOR_SIZE:32}).withArguments("encodedKeypointsA","encoderLengthA","encodedKeypointsB","encoderLengthB","descriptorSize","extraSize","encoderLength","threshold"),At=(0,f.bf)("keypoints/hamming-distance-filter.glsl").withDefines({DESCRIPTOR_SIZE:64}).withArguments("encodedKeypointsA","encoderLengthA","encodedKeypointsB","encoderLengthB","descriptorSize","extraSize","encoderLength","threshold"),ct=(0,f.bf)("keypoints/shuffle.glsl").withDefines({PERMUTATION_MAXLEN:2048}).withArguments("encodedKeypoints","descriptorSize","extraSize","encoderLength"),lt=(0,f.bf)("keypoints/clip.glsl").withArguments("encodedKeypoints","descriptorSize","extraSize","encoderLength","maxKeypoints");class dt extends S{constructor(e){super(e),this.declare("fast9_16",ae,{...this.program.usesPingpongRendering()}).declare("harris1",Ae[1],{...this.program.usesPingpongRendering()}).declare("harris3",Ae[3],{...this.program.usesPingpongRendering()}).declare("harris5",Ae[5],{...this.program.usesPingpongRendering()}).declare("harris7",Ae[7],{...this.program.usesPingpongRendering()}).declare("harrisScoreFindMax",ce,{...this.program.usesPingpongRendering()}).declare("harrisScoreCutoff",le).declare("subpixelQuadratic1d",de).declare("subpixelTaylor2d",he).declare("subpixelBicubic",ge).declare("subpixelBilinear",pe).declare("refineScaleLoG",ue).declare("refineScaleFAST916",fe).declare("allocateDescriptors",Ie).declare("allocateExtra",me).declare("transferToExtra",_e).declare("orbDescriptor",ye).declare("orbOrientation",xe).declare("nonmax",Ce).declare("pyrnonmax",Ee).declare("nonmaxSpace",Se).declare("nonmaxScale",Pe).declare("nonmaxScaleSimple",ve).declare("laplacian",we).declare("lk21",Be[21],{...this.program.usesPingpongRendering()}).declare("lk19",Be[19],{...this.program.usesPingpongRendering()}).declare("lk17",Be[17],{...this.program.usesPingpongRendering()}).declare("lk15",Be[15],{...this.program.usesPingpongRendering()}).declare("lk13",Be[13],{...this.program.usesPingpongRendering()}).declare("lk11",Be[11],{...this.program.usesPingpongRendering()}).declare("lk9",Be[9],{...this.program.usesPingpongRendering()}).declare("lk7",Be[7],{...this.program.usesPingpongRendering()}).declare("lk5",Be[5],{...this.program.usesPingpongRendering()}).declare("lk3",Be[3],{...this.program.usesPingpongRendering()}).declare("transferFlow",be).declare("bfMatcherInitCandidates",Qe).declare("bfMatcherInitFilters",Me).declare("bfMatcherTransfer",De,{...this.program.usesPingpongRendering()}).declare("bfMatcher32",ke,{...this.program.usesPingpongRendering()}).declare("bfMatcher64",Ke,{...this.program.usesPingpongRendering()}).declare("lshKnnInitCandidates",Le).declare("lshKnnInitFilters",ze).declare("lshKnnTransfer",Re,{...this.program.usesPingpongRendering()}).declare("sortCreatePermutation",Ne).declare("sortMergePermutation",Xe,{...this.program.usesPingpongRendering()}).declare("sortApplyPermutation",Fe).declare("mixKeypointsPreInit",Oe).declare("mixKeypointsInit",Ue).declare("mixKeypointsSort",Ge,{...this.program.usesPingpongRendering()}).declare("mixKeypointsView",qe).declare("mixKeypointsApply",He).declare("encodeNullKeypoints",tt).declare("encodeKeypoints",Ze).declare("initLookupTable",Ye).declare("sortLookupTable",Je,{...this.program.usesPingpongRendering()}).declare("viewLookupTable",We).declare("encodeKeypointSkipOffsets",je).declare("encodeKeypointLongSkipOffsets",$e,{...this.program.usesPingpongRendering()}).declare("encodeKeypointPositions",Ve,{...this.program.usesPingpongRendering()}).declare("encodeKeypointProperties",et).declare("transferOrientation",nt).declare("uploadKeypoints",it,{...this.program.usesPingpongRendering()}).declare("applyHomography",st).declare("clipBorder",ot).declare("distanceFilter",rt).declare("hammingDistanceFilter32",at).declare("hammingDistanceFilter64",At).declare("shuffle",ct).declare("clip",lt);for(const e of Object.keys(Te))for(const t of Object.keys(Te[e]))for(const n of Object.keys(Te[e][t])){const i=`lshKnn${e}h${t}lv${n}`;this.declare(i,Te[e][t][n],{...this.program.usesPingpongRendering()})}}}const ht=(0,f.bf)("pyramids/upsample2.glsl").withArguments("image"),pt=(0,f.bf)("pyramids/downsample2.glsl").withArguments("image");class gt extends S{constructor(e){super(e),this.declare("upsample2",ht).declare("downsample2",pt).declare("smoothX",(0,L.convX)([.05,.25,.4,.25,.05])).declare("smoothY",(0,L.convY)([.05,.25,.4,.25,.05])).declare("smoothX2",(0,L.convX)([.1,.5,.8,.5,.1])).declare("smoothY2",(0,L.convY)([.1,.5,.8,.5,.1],.5))}}const ut=(0,f.bf)("transforms/warp-perspective.glsl").withArguments("image","inverseHomography"),ft=(0,f.bf)("transforms/resize.glsl").withDefines({INTERPOLATION_METHOD:0}).withArguments("image"),It=(0,f.bf)("transforms/resize.glsl").withDefines({INTERPOLATION_METHOD:1}).withArguments("image"),mt=(0,f.bf)("transforms/additive-mix.glsl").withArguments("image0","image1","alpha","beta","gamma");class _t extends S{constructor(e){super(e),this.declare("warpPerspective",ut).declare("resizeNearest",ft).declare("resizeBilinear",It).declare("additiveMix",mt)}}class yt{constructor(e){this._gpu=e,this._filters=null,this._transforms=null,this._pyramids=null,this._keypoints=null,this._utils=null}get filters(){return this._filters||(this._filters=new Y(this._gpu))}get transforms(){return this._transforms||(this._transforms=new _t(this._gpu))}get pyramids(){return this._pyramids||(this._pyramids=new gt(this._gpu))}get keypoints(){return this._keypoints||(this._keypoints=new dt(this._gpu))}get utils(){return this._utils||(this._utils=new K(this._gpu))}release(){for(const e in this)if(Object.prototype.hasOwnProperty.call(this,e)&&null!=this[e]){const t=this[e];t instanceof S&&t.release()}return null}}const xt=Symbol("Bucket");class Ct{constructor(e,t,n){this.texture=e,this.index=t,this.next=n,this.free=!0}}class Et{constructor(e,n=1024){t.A.assert(n>0),this._bucket=Array.from({length:n},((e,t)=>new Ct(null,t,t-1))),this._head=n-1,this._gpu=e}allocate(){if(this._head<0)throw new l.l(`Exhausted pool (capacity: ${this._bucket.length})`);const e=this._bucket[this._head];return e.free=!1,this._head=e.next,null==e.texture&&(e.texture=Et._createManagedTexture(this._gpu.gl,e)),e.texture}free(e){const n=e[xt];return t.A.assert(void 0!==n&&!n.free,"Unmanaged texture or double free"),n.next=this._head,n.free=!0,this._head=n.index,null}release(){for(let e=0;e<this._bucket.length;e++)null!=this._bucket[e].texture&&(this._bucket[e].texture=this._bucket[e].texture.release());return null}static _createManagedTexture(e,t){const n=new u(e,1,1);return Object.defineProperty(n,xt,{configurable:!1,enumerable:!1,writable:!1,value:t})}}var St=n(6467);const Pt=Symbol();class vt{constructor(e){if(e!==Pt)throw new l.Er;this._data=null}static load(e){if(e instanceof HTMLImageElement)return wt.load(e);if(e instanceof HTMLVideoElement)return Bt.load(e);if(e instanceof HTMLCanvasElement)return bt.load(e);if("undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas)return Qt.load(e);if(e instanceof ImageBitmap)return Mt.load(e);if(e instanceof ImageData)return Dt.load(e);throw new l.qw(`Unsupported media type: ${e}`)}get data(){return this._data}isLoaded(){return null!==this._data}get type(){throw new l.aQ}get width(){throw new l.aQ}get height(){throw new l.aQ}clone(){throw new l.aQ}release(){return this._data=null}_load(e){throw new l.aQ}static _waitUntil(e,n,i=3e4){return new o.i(((s,o)=>{t.A.log(`Waiting for ${n} to be triggered in ${e}...`);const r=setTimeout((()=>{a(),o(new l.MU(`${n} has not been triggered in ${e}: timeout (${i}ms)`))}),i);function a(){clearTimeout(r),e.removeEventListener("error",A,!1),e.removeEventListener(n,c,!1)}function A(){const t=null!==e.error&&"object"==typeof e.error?e.error:{code:-1,message:""},n=`${t.message} (error code ${t.code})`;a(),o(new l.FJ(`Can't load ${e}. ${n}`))}function c(){a(),s(e)}e.addEventListener("error",A,!1),e.addEventListener(n,c,!1)}))}}class wt extends vt{constructor(e){super(e),this._data=null}get data(){return this._data}get type(){return St.zu.Image}get width(){return this._data?this._data.naturalWidth:0}get height(){return this._data?this._data.naturalHeight:0}clone(){if(null==this._data)throw new l.Er("Media not loaded");const e=this._data.cloneNode(!0);return wt.load(e)}_load(e){return this.isLoaded()&&this.release(),e.complete&&0!==e.naturalWidth?new o.i((t=>{this._data=e,t(this)})):vt._waitUntil(e,"load").then((()=>(this._data=e,this)))}static load(e){return new wt(Pt)._load(e)}}class Bt extends vt{constructor(e){super(e),this._data=null}get data(){return this._data}get type(){return St.zu.Video}get width(){return this._data?this._data.videoWidth:0}get height(){return this._data?this._data.videoHeight:0}clone(){if(null==this._data)throw new l.Er("Media not loaded");const e=this._data.cloneNode(!0);return Bt.load(e)}_load(e){return this.isLoaded()&&this.release(),e.readyState>=4?new o.i((t=>{this._data=e,t(this)})):(setTimeout((()=>e.load())),vt._waitUntil(e,"canplaythrough").then((()=>(this._data=e,this))))}static load(e){return new Bt(Pt)._load(e)}}class bt extends vt{constructor(e){super(e),this._data=null}get data(){return this._data}get type(){return St.zu.Canvas}get width(){return this._data?this._data.width:0}get height(){return this._data?this._data.height:0}clone(){if(null==this._data)throw new l.Er("Media not loaded");const e=t.A.createCanvas(this.width,this.height);return e.getContext("2d").drawImage(this._data,0,0),bt.load(e)}_load(e){return this.isLoaded()&&this.release(),new o.i((t=>{this._data=e,t(this)}))}static load(e){return new bt(Pt)._load(e)}}class Qt extends vt{constructor(e){super(e),this._data=null}get data(){return this._data}get type(){return St.zu.OffscreenCanvas}get width(){return this._data?this._data.width:0}get height(){return this._data?this._data.height:0}clone(){if(null==this._data)throw new l.Er("Media not loaded");const e=new OffscreenCanvas(this.width,this.height);return e.getContext("2d").drawImage(this._data,0,0),Qt.load(e)}_load(e){return this.isLoaded()&&this.release(),new o.i((t=>{this._data=e,t(this)}))}static load(e){return new Qt(Pt)._load(e)}}class Mt extends vt{constructor(e){super(e),this._data=null}get data(){return this._data}get type(){return St.zu.Bitmap}get width(){return this._data?this._data.width:0}get height(){return this._data?this._data.height:0}clone(){if(null==this._data)throw new l.Er("Media not loaded");return new o.i(((e,t)=>{createImageBitmap(this._data).then((n=>{new Mt(Pt)._load(n).then(e,t)}),t)}))}release(){return null!=this._data&&this._data.close(),super.release()}_load(e){return this.isLoaded()&&this.release(),new o.i((t=>{this._data=e,t(this)}))}static load(e){return new Mt(Pt)._load(e)}}class Dt extends vt{constructor(e){super(e),this._data=null}get data(){return this._data}get type(){return St.zu.Data}get width(){return this._data?this._data.width:0}get height(){return this._data?this._data.height:0}clone(){if(null==this._data)throw new l.Er("Media not loaded");const e=new ImageData(new Uint8ClampedArray(this._data.data),this._data.width,this._data.height);return Dt.load(e)}_load(e){return this.isLoaded()&&this.release(),new o.i((t=>{this._data=e,t(this)}))}static load(e){return new Dt(Pt)._load(e)}}var kt=n(4109);class Kt extends kt.c{constructor(){super(),this._speedyGL=e.c.instance,this._programs=new yt(this),this._texturePool=new Et(this),this._speedyGL.subscribe(this._reset,this)}get programs(){return this._programs}get gl(){return this._speedyGL.gl}get canvas(){return this._speedyGL.canvas}get texturePool(){return this._texturePool}renderToCanvas(e){const n=e.width,i=e.height,s=this.canvas;return(n>s.width||i>s.height)&&(t.A.warning(`Resizing the canvas to ${n} x ${i}`),s.width=n,s.height=i),this.programs.utils.renderToCanvas.outputs(n,i,null),this.programs.utils.renderToCanvas(e),s}upload(e,t){return t.upload(e.data,e.width,e.height)}release(){return t.A.assert(!this.isReleased()),this._programs=this._programs.release(),this._texturePool=this._texturePool.release(),this._speedyGL.unsubscribe(this._reset),null}isReleased(){return null==this._programs}loseAndRestoreWebGLContext(){return this._speedyGL.loseAndRestoreContext().then((()=>{}))}_reset(){this.isReleased()||(this._programs=new yt(this),this._texturePool=new Et(this),this._notify())}}class Lt{constructor(e,t){this._width=Math.max(0,+e),this._height=Math.max(0,+t)}get width(){return this._width}set width(e){this._width=Math.max(0,+e)}get height(){return this._height}set height(e){this._height=Math.max(0,+e)}toString(){return`SpeedySize(${this.width}, ${this.height})`}equals(e){return this.width===e.width&&this.height===e.height}area(){return this.width*this.height}}const zt=Symbol();class Tt{constructor(e,t,n={}){if(e!==zt)throw new l.Er;if(this._source=t,this._format=void 0!==n.format?n.format:St.f5.RGBA,this._options=Object.freeze({...n,format:this._format}),!t.isLoaded())throw new l.Er(`Source not loaded: ${t}`);if(this._format!==St.f5.RGBA&&this._format!==St.f5.GREY)throw new l.qw(`Invalid format: ${this._format}`)}static load(e,n={},i=!0){return vt.load(e).then((s=>{t.A.assert(0!==s.width&&0!==s.height);const o=new Tt(zt,s,n);return i&&t.A.log(`Loaded SpeedyMedia with a ${e}.`),o}))}get source(){return this._source?this._source.data:null}get type(){if(this.isReleased())return"unknown";switch(this._source.type){case St.zu.Image:return"image";case St.zu.Video:return"video";case St.zu.Canvas:return"canvas";case St.zu.OffscreenCanvas:return"offscreen-canvas";case St.zu.Bitmap:return"bitmap";case St.zu.Data:return"data";default:return"unknown"}}get width(){return this._source?this._source.width:0}get height(){return this._source?this._source.height:0}get size(){return this._source?new Lt(this._source.width,this._source.height):new Lt(0,0)}get options(){return this._options}release(){return this.isReleased()||(t.A.log("Releasing SpeedyMedia object..."),this._source=this._source.release()),null}isReleased(){return null==this._source}clone(){if(this.isReleased())throw new l.Er("Can't clone a SpeedyMedia that has been released");const e=new Tt(zt,this._source,this._options);return o.i.resolve(e)}toBitmap(){if(this.isReleased())throw new l.Er("Can't convert SpeedyMedia to ImageBitmap: the media has been released");if(this._source.isLoaded())return this._source.type==St.zu.Bitmap?o.i.resolve(this._source.data):new o.i(((e,t)=>createImageBitmap(this._source.data).then(e,t)));throw new l.Er("Can't convert SpeedyMedia to bitmap: the media hasn't been loaded")}}let Rt=null;class Nt{constructor(){if(this._fps=60,this._frames=0,this._updateInterval=500,this._lastUpdate=performance.now(),this._boundUpdate=this._update.bind(this),null!==Rt)throw new l.Er("Can't have multiple instances of FPSCounter");this._boundUpdate()}static get instance(){return null===Rt&&(Rt=new Nt),Rt}get fps(){return this._fps}_update(){const e=performance.now(),t=e-this._lastUpdate;t>=this._updateInterval&&(this._fps=Math.round(this._frames/(.001*t)),this._frames=0,this._lastUpdate=e),this._frames++,requestAnimationFrame(this._boundUpdate)}}class Xt{constructor(e,t){this._x=+e,this._y=+t}get x(){return this._x}set x(e){this._x=+e}get y(){return this._y}set y(e){this._y=+e}toString(){return`SpeedyVector2(${this.x.toFixed(5)}, ${this.y.toFixed(5)})`}equals(e){return this.x===e.x&&this.y===e.y}dot(e){return this.x*e.x+this.y*e.y}distanceTo(e){const t=this.x-e.x,n=this.y-e.y;return Math.sqrt(t*t+n*n)}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalized(){const e=this.length();return e>0?new Xt(this.x/e,this.y/e):new Xt(0,0)}plus(e){return new Xt(this.x+e.x,this.y+e.y)}minus(e){return new Xt(this.x-e.x,this.y-e.y)}times(e){return new Xt(this.x*e,this.y*e)}}class Ft{constructor(e,t){this._x=+e,this._y=+t}get x(){return this._x}set x(e){this._x=+e}get y(){return this._y}set y(e){this._y=+e}toString(){return`SpeedyPoint2(${this.x.toFixed(5)}, ${this.y.toFixed(5)})`}plus(e){return new Ft(this.x+e.x,this.y+e.y)}minus(e){return new Xt(this.x-e.x,this.y-e.y)}equals(e){return this.x===e.x&&this.y===e.y}}n(4292);var Ot=n(4247),Ut=n(3286);const Gt=Object.freeze({Nothing:Symbol("Nothing"),Image:Symbol("Image"),Keypoints:Symbol("Keypoints"),Vector2:Symbol("Vector2"),LSHTables:Symbol("LSHTables"),KeypointMatches:Symbol("KeypointMatches")});class qt{constructor(e){this._type=e}get type(){return this._type}hasType(e){return this._type===e}isEmpty(){return this.hasType(Gt.Nothing)}toString(){return`message of type ${Object.keys(Gt).find((e=>Gt[e]===this.type))}`}inspect(e){throw new l.aQ}set(...e){throw new l.aQ}static create(e){return function(e){return new Yt[e]}(e)}}class Ht extends qt{constructor(){super(Gt.Nothing)}set(){return this}inspect(e){return{type:this.constructor.name}}}const Yt=Object.freeze({[Gt.Nothing]:Ht,[Gt.Image]:class extends qt{constructor(){super(Gt.Image),this._image=null,this._format=St.f5.RGBA}set(e,t=St.f5.RGBA){return this._image=e,this._format=t,this}inspect(e){const t=Object.keys(St.f5).find((e=>St.f5[e]===this.format));return{type:this.constructor.name,format:String(t),imageSize:this.image?`${this.image.width}x${this.image.height}`:"0x0",image:this.image?"<image data>":"",hasMipmaps:this.image&&this.image.hasMipmaps()?"yes":"no"}}get image(){return this._image}get format(){return this._format}},[Gt.Keypoints]:class extends qt{constructor(){super(Gt.Keypoints),this._encodedKeypoints=null,this._descriptorSize=0,this._extraSize=0,this._encoderLength=1}set(e,n,i,s){return this._encodedKeypoints=e,this._descriptorSize=0|n,this._extraSize=0|i,this._encoderLength=0|s,t.A.assert(this._descriptorSize>=0&&this._extraSize>=0),t.A.assert(this._encoderLength===this._encodedKeypoints.width,"Invalid encoderLength"),t.A.assert(this._encodedKeypoints.width===this._encodedKeypoints.height,"Invalid encodedKeypoints texture"),this}inspect(e){return{type:this.constructor.name,descriptorSize:this.descriptorSize,extraSize:this.extraSize,encoderLength:this.encoderLength,encodedKeypointsSize:this.encodedKeypoints?`${this.encodedKeypoints.width}x${this.encodedKeypoints.height}`:"0x0",encodedKeypoints:this.encodedKeypoints?t.A.formatBinaryData(this.encodedKeypoints.inspect(e).buffer):""}}get encodedKeypoints(){return this._encodedKeypoints}get descriptorSize(){return this._descriptorSize}get extraSize(){return this._extraSize}get encoderLength(){return this._encoderLength}},[Gt.Vector2]:class extends qt{constructor(){super(Gt.Vector2),this._vectors=null}set(e){return this._vectors=e,this}inspect(e){return{type:this.constructor.name,vectorsSize:this.vectors?`${this.vectors.width}x${this.vectors.height}`:"0x0",vectors:this.vectors?t.A.formatBinaryData(this.vectors.inspect(e).buffer):""}}get vectors(){return this._vectors}},[Gt.LSHTables]:class extends qt{constructor(){super(Gt.LSHTables),this._lsh=null}set(e){return this._lsh=e,this}inspect(e){return{type:this.constructor.name,lsh:"<LSH tables>"}}get lsh(){return this._lsh}},[Gt.KeypointMatches]:class extends qt{constructor(){super(Gt.KeypointMatches),this._encodedMatches=null,this._matchesPerKeypoint=1}set(e,n){return this._encodedMatches=e,this._matchesPerKeypoint=0|n,t.A.assert(this._matchesPerKeypoint>0),this}inspect(e){return{type:this.constructor.name,matchesPerKeypoint:this.matchesPerKeypoint,encodedMatchesSize:this.encodedMatches?`${this.encodedMatches.width}x${this.encodedMatches.height}`:"0x0",encodedMatches:this.encodedMatches?t.A.formatBinaryData(this.encodedMatches.inspect(e).buffer):""}}get encodedMatches(){return this._encodedMatches}get matchesPerKeypoint(){return this._matchesPerKeypoint}}}),Jt=e=>!0;class Wt{constructor(e,n=Jt){this._expectedMessageType=e,this._isValidMessage="function"==typeof n?n:Jt,t.A.assert(this._expectedMessageType!=Gt.Nothing)}isCompatibleWith(e){return this._expectedMessageType==e._expectedMessageType}accepts(e){return e.hasType(this._expectedMessageType)&&this._isValidMessage(e)}toString(){return`Port expects ${Object.keys(Gt).find((e=>Gt[e]===this._expectedMessageType))} satisfying ${this._isValidMessage}`}get expectedMessageType(){return this._expectedMessageType}}const Zt=/^[a-z][a-zA-Z0-9]*$/,jt=new Ht;class $t{constructor(e,n,i){this._name=String(e),this._spec=n,this._node=i,this._message=jt,t.A.assert(Zt.test(this._name),`Port name "${this._name}" is not acceptable`)}get name(){return this._name}get node(){return this._node}connectTo(e){throw new l.aQ}isInputPort(){throw new l.aQ}isOutputPort(){return!this.isInputPort()}clearMessage(){this._message=jt}hasMessage(){return!this._message.isEmpty()}read(){if(this._message.isEmpty())throw new l.Er(`Can't read from port ${this.name}: nothing to read`);return this._message}write(e){throw new l.EM(`Can't write ${e} to port ${this.name}: unsupported operation`)}inspect(e){return this._message.inspect(e)}static get DEFAULT_NAME(){throw new l.aQ}}class Vt extends $t{constructor(e,t,n){super(e,t,n),this._cachedMessage=null}connectTo(e){if(!e.isInputPort())throw new l.qw(`Can't connect output port ${this.name} to port ${e.name}: expected an input port`);e.connectTo(this)}isInputPort(){return!1}write(e){if(!this._spec.accepts(e))throw new l.qw(`Can't write ${e} to port ${this.name}. ${this._spec}`);this._message=e}swrite(...e){null==this._cachedMessage&&(this._cachedMessage=qt.create(this._spec.expectedMessageType)),this.write(this._cachedMessage.set(...e))}static get DEFAULT_NAME(){return"out"}}class en extends $t{constructor(e,t,n){super(e,t,n),this._incomingLink=null}get incomingLink(){return this._incomingLink}connectTo(e){if(!e.isOutputPort())throw new l.qw(`Can't connect input port ${this.name} of "${this.node.fullName}" to input port ${e.name} of "${e.node.fullName}": expected an output port`);if(!this._spec.isCompatibleWith(e._spec))throw new l.qw(`Can't connect port ${this.name} of "${this.node.fullName}" to port ${e.name} of "${e.node.fullName}": incompatible types`);this._incomingLink=e}disconnect(){this._incomingLink=null}isInputPort(){return!0}pullMessage(e=""){const t=e.length>0?`${this.name} of ${e}`:this.name;if(null==this._incomingLink)throw new l.Er(`No incoming link for input port ${t}`);const n=this._incomingLink.read();if(!this._spec.accepts(n))throw new l.qw(`Can't receive ${n} at port ${t}: ${this._spec}`);return this._message=n}static get DEFAULT_NAME(){return"in"}}class tn{constructor(e,t){this._class=e,this._name=String(t),this._type=Gt.Nothing,this._messageConstraint=void 0}expects(e){return t.A.assert(this._type==Gt.Nothing),t.A.assert(e!=Gt.Nothing),this._type=e,this}satisfying(e){return t.A.assert(this._type!=Gt.Nothing,"You must first declare what type of message this port expects"),t.A.assert(void 0===this._messageConstraint),t.A.assert("function"==typeof e),this._messageConstraint=e,this}build(e){const t=new Wt(this._type,this._messageConstraint);return Reflect.construct(this._class,[this._name,t,e])}}function nn(e=en.DEFAULT_NAME){return new tn(en,e)}function sn(e=Vt.DEFAULT_NAME){return new tn(Vt,e)}function on(e){return e.reduce(((e,t)=>(e[t.name]=t,e)),Object.create(null))}function rn(e){return e.reduce(((e,t)=>(e[t.name]=t,e)),Object.create(null))}let an=!1;class An{constructor(e=(()=>Math.random().toString(16).substr(2))(),t=0,n=[]){this._name=String(e),this._tex=new Array(t).fill(null);const i=n.map((e=>e.build(this))),s=i.filter((e=>e.isInputPort())),o=i.filter((e=>e.isOutputPort()));if(this._inputPorts=on(s),this._outputPorts=rn(o),0==this._name.length)throw new l.qw(`Invalid name "${this._name}" for node ${this.fullName}`);if(0==n.length)throw new l.qw(`No ports have been found in node ${this.fullName}`)}get name(){return this._name}get fullName(){return`${this.constructor.name}[${this.name}]`}input(e=en.DEFAULT_NAME){if(e in this._inputPorts)return this._inputPorts[e];throw new l.qw(`Can't find input port ${e} in node ${this.fullName}`)}output(e=Vt.DEFAULT_NAME){if(e in this._outputPorts)return this._outputPorts[e];throw new l.qw(`Can't find output port ${e} in node ${this.fullName}`)}execute(e){let t;for(t in this._outputPorts)this._outputPorts[t].clearMessage();for(t in this._inputPorts)this._inputPorts[t].pullMessage(this.fullName);const n=this._run(e);return void 0===n?void this._finishExecution(e):n.then((()=>this._finishExecution(e)))}_finishExecution(e){for(const e in this._outputPorts)t.A.assert(this._outputPorts[e].hasMessage(),`Did you forget to write data to the output port ${e} of ${this.fullName}?`);if("diagnostic"===s.w.logging){t.A.log(`%c ${this.fullName} `,"font-size:12pt;font-weight:bold;color:white;background:blue");for(const n in this._inputPorts)t.A.log(`%c-> ${n}:`,"font-size:10pt;font-weight:bold",this._inputPorts[n].inspect(e));for(const n in this._outputPorts)t.A.log(`%c<- ${n}:`,"font-size:10pt;font-weight:bold",this._outputPorts[n].inspect(e))}}_run(e){throw new l.aQ}init(e){e.subscribe(this._allocateWorkTextures,this,e),this._allocateWorkTextures(e)}release(e){this._deallocateWorkTextures(e),e.unsubscribe(this._allocateWorkTextures,this)}clearPorts(){let e;for(e in this._inputPorts)this._inputPorts[e].clearMessage();for(e in this._outputPorts)this._outputPorts[e].clearMessage()}inputNodes(){const e=[];for(const t in this._inputPorts){const n=this._inputPorts[t];null!=n.incomingLink&&e.push(n.incomingLink.node)}return e}isSource(){return!1}isSink(){return!1}_allocateWorkTextures(e){for(let t=0;t<this._tex.length;t++)this._tex[t]=e.texturePool.allocate()}_deallocateWorkTextures(e){for(let t=this._tex.length-1;t>=0;t--)this._tex[t]=e.texturePool.free(this._tex[t])}_visualize(e,t){const n=e.renderToCanvas(t);an||(document.body.appendChild(n),an=!0)}}class cn extends An{constructor(e=void 0,n=void 0,i=void 0){super(e,n,i),t.A.assert(0==Object.keys(this._inputPorts).length)}isSource(){return!0}}class ln extends An{constructor(e=void 0,n=void 0,i=void 0){super(e,n,i),t.A.assert(0==Object.keys(this._outputPorts).length)}export(){throw new l.aQ}isSink(){return!0}}class dn{constructor(e,t){const n=t<p.MATCH_MAX_DISTANCE;return this._index=n?0|e:-1,this._distance=n?+t:Number.POSITIVE_INFINITY,Object.freeze(this)}get index(){return this._index}get distance(){return this._distance}toString(){return`SpeedyKeypointMatch(${this.index},${this.distance})`}}class hn{constructor(e,t,n=0,i=0,s=0,o=null){this._position=new Ft(+e,+t),this._lod=+n,this._rotation=+i,this._score=+s,this._descriptor=o}toString(){return`SpeedyKeypoint(${this.x},${this.y})`}get position(){return this._position}get x(){return this._position.x}set x(e){this._position.x=+e}get y(){return this._position.y}set y(e){this._position.y=+e}get lod(){return this._lod}get scale(){return Math.pow(2,this._lod)}get rotation(){return this._rotation}get score(){return this._score}get descriptor(){return this._descriptor}}class pn extends hn{constructor(e,t,n=0,i=0,s=0,o=null,r=new Xt(0,0)){super(e,t,n,i,s,o),this._flow=r}get flow(){return this._flow}}class gn extends hn{constructor(e,t,n=0,i=0,s=0,o=null,r=[]){super(e,t,n,i,s,o),this._matches=r}get matches(){return this._matches}}let un=null,fn=0;class In{constructor(){this._nodes=[],this._sequence=[],this._busy=!1}node(e){for(let t=0,n=this._nodes.length;t<n;t++)if(this._nodes[t].name===e)return this._nodes[t];return null}init(...e){if(this._nodes.length>0)throw new l.Er("The pipeline has already been initialized");if(0==e.length)throw new l.qw("Can't initialize the pipeline. Please specify its nodes");0==fn++&&(t.A.assert(!un,"Duplicate SpeedyGPU instance"),un=new Kt);for(let t=0;t<e.length;t++){const n=e[t];this._nodes.includes(n)||this._nodes.push(n)}this._sequence=In._tsort(this._nodes),In._validateSequence(this._sequence);for(let e=0;e<this._sequence.length;e++)this._sequence[e].init(un);return this}release(){if(0==this._nodes.length)throw new l.Er("The pipeline has already been released or has never been initialized");for(let e=this._sequence.length-1;e>=0;e--)this._sequence[e].release(un);return this._sequence.length=0,this._nodes.length=0,0==--fn&&(un=un.release()),null}run(){if(t.A.assert(this._sequence.length>0,"The pipeline has not been initialized or has been released"),this._busy)return new o.i(((e,t)=>{setTimeout((()=>this.run().then(e,t)),0)}));this._busy=!0;const e=this._sequence.filter((e=>e.isSink())),n=In._createOutputTemplate(e);return"diagnostic"===s.w.logging&&t.A.log("%c RUNNING PIPELINE ","background:red;color:white;font-size:28pt;font-weight:bold"),In._runSequence(this._sequence).then((()=>o.i.all(e.map((e=>e.export().turbocharge()))).then((t=>t.reduce(((t,n,i)=>(t[e[i].name]=n,t)),n))))).finally((()=>{for(let e=this._sequence.length-1;e>=0;e--)this._sequence[e].clearPorts();this._busy=!1,"diagnostic"===s.w.logging&&(t.A.log("%c PIPELINE OUTPUT \n","background:green;color:white;font-size:16pt;font-weight:bold"),Object.keys(n).forEach((e=>{t.A.log("%c"+e+":","font-size:10pt;font-weight:bold",n[e])})))})).turbocharge()}get _gpu(){return un}static _runSequence(e,t=0,n=e.length){for(;t<n;t++){const i=e[t].execute(un);if(un.gl.flush(),void 0!==i)return i.then((()=>In._runSequence(e,t+1,n)))}return o.i.resolve()}static _tsort(e){const t=In._outlinks(e),n=e.map((e=>[e,!1])),i=new Set,s=new Array(e.length);let o=s.length;for(;n.length>0;){const[e,r]=n.pop();if(r)s[--o]=e;else if(!i.has(e)){const o=t.get(e);if(i.add(e),n.push([e,!0]),n.push(...o.map((e=>[e,!1]))),o.some((e=>i.has(e)&&!s.includes(e))))throw new l.Er("Pipeline networks cannot have cycles!")}}return s}static _outlinks(e){const t=new Map;for(let n=0;n<e.length;n++)t.set(e[n],[]);for(let n=0;n<e.length;n++){const i=e[n],s=i.inputNodes();for(let e=0;e<s.length;e++){const n=s[e],o=t.get(n);if(!o)throw new l.Er(`Can't initialize the pipeline. Missing node: ${n.fullName}. Did you forget to add it to the initialization list?`);o.includes(i)||o.push(i)}}return t}static _createOutputTemplate(e=[]){const t=Object.create(null);for(let n=e.length-1;n>=0;n--)t[e[n].name]=null;return t}static _validateSequence(e){if(0==e.length)throw new l.Er("Pipeline doesn't have nodes");if(!e[0].isSource())throw new l.Er("Pipeline doesn't have a source");if(!e.find((e=>e.isSink())))throw new l.Er("Pipeline doesn't have a sink")}}class mn extends cn{constructor(e=void 0){super(e,2,[sn().expects(Gt.Image)]),this._media=null,this._textureIndex=0}get media(){return this._media}set media(e){if(null!==e&&!(e instanceof Tt))throw new l.qw(`Not a SpeedyMedia: ${e}`);this._media=e}_run(e){if(null==this._media)throw new l.Er(`Did you forget to set the media of ${this.fullName}?`);this._textureIndex=(this._textureIndex+1)%this._tex.length;const t=this._tex[this._textureIndex];e.upload(this._media._source,t),this.output().swrite(t,this._media._format)}}class _n extends ln{constructor(e="image"){super(e,0,[nn().expects(Gt.Image)]),this._mediaType="bitmap",this._bitmap=null,this._data=null,this._format=St.f5.RGBA,this._textureReader=new h(1)}get mediaType(){return this._mediaType}set mediaType(e){if("bitmap"!=e&&"data"!=e)throw new l.qw(`Invalid mediaType for ${this.fullName}: "${e}"`);this._mediaType=e}init(e){super.init(e),this._textureReader.init(e)}release(e){this._textureReader.release(e),super.release(e)}export(){const e="data"!=this._mediaType?this._bitmap:this._data;return t.A.assert(null!=e),Tt.load(e,{format:this._format},!1)}_run(e){const{image:t,format:n}=this.input().read();return"data"!=this._mediaType?new o.i((i=>{const s=e.renderToCanvas(t);createImageBitmap(s,0,s.height-t.height,t.width,t.height).then((e=>{this._bitmap=e,this._format=n,this._data=null,i()}))})):this._textureReader.readPixelsAsync(t,0,0,t.width,t.height,!1).then((e=>{const i=new Uint8ClampedArray(e.buffer);this._data=new ImageData(i,t.width,t.height),this._format=n,this._bitmap=null}))}}const yn=["in0","in1"];class xn extends An{constructor(e=void 0){super(e,0,[...yn.map((e=>nn(e).expects(Gt.Image))),sn().expects(Gt.Image)]),this._port=0}get port(){return this._port}set port(e){if(e<0||e>=yn.length)throw new l.qw(`Invalid port: ${e}`);this._port=0|e}_run(e){const t=this.input(yn[this._port]).read();this.output().write(t)}}class Cn extends An{constructor(e=void 0){super(e,2,[nn().expects(Gt.Image),sn().expects(Gt.Image)]),this._pageIndex=0,this._initialized=!1,this._previousFormat=St.f5.RGBA,this._frozen=!1}get frozen(){return this._frozen}set frozen(e){this._frozen=Boolean(e)}release(e){this._initialized=!1,super.release(e)}_run(e){const{image:t,format:n}=this.input().read(),i=this._previousFormat,s=this._tex,o=s[1-this._pageIndex],r=s[this._pageIndex];if(t.hasMipmaps())throw new l.EM(`${this.fullName} can't bufferize a pyramid`);if(this._frozen&&this._initialized||(this._previousFormat=n,o.resize(t.width,t.height),t.copyTo(o),this._pageIndex=1-this._pageIndex),!this._initialized)return this._initialized=!0,void this.output().swrite(o,n);this.output().swrite(r,i)}}const En=p.PYRAMID_MAX_LEVELS,Sn=2*En;class Pn extends An{constructor(e=void 0){super(e,Sn+1,[nn().expects(Gt.Image),sn().expects(Gt.Image)])}_run(e){const{image:t,format:n}=this.input().read(),i=this._tex[0],s=e.programs.pyramids;let o=t.width,r=t.height;const a=1+Math.floor(Math.log2(Math.max(o,r))),A=new Array(Sn+1);for(let e=Sn;e>=1;e--)A[e-1]=this._tex[e];A[0].resize(o,r),t.copyTo(A[0]);const c=Math.min(a,En);for(let t=1;t<c;t++){const n=Math.max(1,o>>>1),i=Math.max(1,r>>>1),a=t-1+En;s.smoothX.outputs(o,r,A[a])(A[t-1]),s.smoothY.outputs(o,r,A[t-1])(A[a]),s.downsample2.outputs(n,i,A[t])(A[t-1]),e.gl.flush(),o=n,r=i}i.resize(t.width,t.height),i.clear(),t.copyTo(i),i.generateMipmaps(A.slice(0,c)),this.output().swrite(i,n)}}class vn extends An{constructor(e=void 0){super(e,1,[nn("in0").expects(Gt.Image),nn("in1").expects(Gt.Image),sn().expects(Gt.Image)]),this._alpha=.5,this._beta=.5,this._gamma=0}get alpha(){return this._alpha}set alpha(e){this._alpha=+e}get beta(){return this._beta}set beta(e){this._beta=+e}get gamma(){return this._gamma}set gamma(e){this._gamma=+e}_run(e){const t=this.input("in0").read(),n=this.input("in1").read(),i=t.image,s=n.image,o=t.format,r=n.format,a=Math.max(i.width,s.width),A=Math.max(i.height,s.height),c=this._alpha,d=this._beta,h=this._gamma,p=this._tex[0];if(o!=r)throw new l.EM("Can't mix images of different formats");e.programs.transforms.additiveMix.outputs(a,A,p),e.programs.transforms.additiveMix(i,s,c,d,h),this.output().swrite(p,o)}}class wn extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Image)]),this._format=St.f5.RGBA,this._initialized=!1}get image(){if(!this._initialized)throw new l.Er(`Portal error: ${this.fullName} holds no data`);return this._tex[0]}get format(){if(!this._initialized)throw new l.Er(`Portal error: ${this.fullName} holds no data`);return this._format}init(e){super.init(e),this._tex[0].resize(1,1).clear(),this._format=St.f5.RGBA,this._initialized=!0}release(e){this._initialized=!1,super.release(e)}_run(e){const{image:t,format:n}=this.input().read(),i=this._tex[0];if(t.hasMipmaps())throw new l.EM(`${this.fullName} can't store a pyramid`);this._format=n,i.resize(t.width,t.height),t.copyTo(i)}}class Bn extends cn{constructor(e=void 0){super(e,0,[sn().expects(Gt.Image)]),this._source=null}get source(){return this._source}set source(e){if(null!==e&&!(e instanceof wn))throw new l.qw(`Incompatible source for ${this.fullName}`);this._source=e}_run(e){if(null==this._source)throw new l.Er(`${this.fullName} has no source`);this.output().swrite(this._source.image,this._source.format)}}class bn extends J.Q{static Source(e=void 0){return new Bn(e)}static Sink(e=void 0){return new wn(e)}}class Qn extends J.Q{static Source(e=void 0){return new mn(e)}static Sink(e=void 0){return new _n(e)}static Multiplexer(e=void 0){return new xn(e)}static Buffer(e=void 0){return new Cn(e)}static Pyramid(e=void 0){return new Pn(e)}static Mixer(e=void 0){return new vn(e)}static get Portal(){return bn}}class Mn extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Image),sn().expects(Gt.Image)])}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._tex[0],r=e.programs.filters;r.rgb2grey.outputs(i,s,o),r.rgb2grey(t),this.output().swrite(o,St.f5.GREY)}}const Dn=Object.freeze({3:[.27901008925473514,.44197982149052983,.27901008925473514],5:[.06135959781344021,.2447701955296099,.3877404133138998,.2447701955296099,.06135959781344021],7:[.03873542500847274,.11308485700794121,.2150068609928349,.26634571398150225,.2150068609928349,.11308485700794121,.03873542500847274],9:[.028532262603370988,.067234535494912,.12400932997922749,.17904386461741617,.20236001461014655,.17904386461741617,.12400932997922749,.067234535494912,.028532262603370988],11:[.022656882730580346,.04610857898527292,.08012661469398517,.11890414969751599,.15067709325491124,.16305336127546846,.15067709325491124,.11890414969751599,.08012661469398517,.04610857898527292,.022656882730580346],13:[.018815730430644363,.03447396964662016,.05657737457255748,.08317258170844948,.10952340502389682,.12918787500405662,.13649812722755,.12918787500405662,.10952340502389682,.08317258170844948,.05657737457255748,.03447396964662016,.018815730430644363],15:[.016100340991695383,.027272329212157102,.042598338587449644,.06135478775568558,.08148767614129326,.09979838342934616,.11270444144735056,.11736740487004466,.11270444144735056,.09979838342934616,.08148767614129326,.06135478775568558,.042598338587449644,.027272329212157102,.016100340991695383]}),kn=new Xt(0,0),Kn=Object.freeze({3:"convolution3x",5:"convolution5x",7:"convolution7x",9:"convolution9x",11:"convolution11x",13:"convolution13x",15:"convolution15x"}),Ln=Object.freeze({3:"convolution3y",5:"convolution5y",7:"convolution7y",9:"convolution9y",11:"convolution11y",13:"convolution13y",15:"convolution15y"});class zn extends An{constructor(e=void 0){super(e,2,[nn().expects(Gt.Image),sn().expects(Gt.Image)]),this._kernelSize=new Lt(5,5),this._sigma=kn,this._kernel={x:Dn[this._kernelSize.width],y:Dn[this._kernelSize.height]}}get kernelSize(){return this._kernelSize}set kernelSize(e){t.A.assert(e instanceof Lt);const n=e.width,i=e.height;if(n<3||i<3||n>15||i>15||n%2==0||i%2==0)throw new l.EM(`Unsupported kernel size: ${n}x${i}`);this._kernelSize=e,this._updateKernel()}get sigma(){return this._sigma}set sigma(e){t.A.assert(e instanceof Xt,"Sigma must be a SpeedyVector2"),t.A.assert(e.x>=0&&e.y>=0),this._sigma=e,this._updateKernel()}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._kernel.x,r=this._kernel.y,a=Kn[this._kernelSize.width],A=Ln[this._kernelSize.height],c=this._tex[0],l=this._tex[1];e.programs.filters[a].outputs(i,s,c)(t,o),e.programs.filters[A].outputs(i,s,l)(c,r),this.output().swrite(l,n)}_updateKernel(){this._sigma.x==kn.x?this._kernel.x=Dn[this._kernelSize.width]:this._kernel.x=t.A.gaussianKernel(this._sigma.x,this._kernelSize.width,!0),this._sigma.y==kn.y?this._kernel.y=Dn[this._kernelSize.height]:this._kernel.y=t.A.gaussianKernel(this._sigma.y,this._kernelSize.height,!0)}}const Tn=Object.freeze({3:new Array(3).fill(1/3),5:new Array(5).fill(.2),7:new Array(7).fill(1/7),9:new Array(9).fill(1/9),11:new Array(11).fill(1/11),13:new Array(13).fill(1/13),15:new Array(15).fill(1/15)}),Rn=Object.freeze({3:"convolution3x",5:"convolution5x",7:"convolution7x",9:"convolution9x",11:"convolution11x",13:"convolution13x",15:"convolution15x"}),Nn=Object.freeze({3:"convolution3y",5:"convolution5y",7:"convolution7y",9:"convolution9y",11:"convolution11y",13:"convolution13y",15:"convolution15y"});class Xn extends An{constructor(e=void 0){super(e,2,[nn().expects(Gt.Image),sn().expects(Gt.Image)]),this._kernelSize=new Lt(5,5),this._kernel={x:Tn[this._kernelSize.width],y:Tn[this._kernelSize.height]}}get kernelSize(){return this._kernelSize}set kernelSize(e){t.A.assert(e instanceof Lt);const n=e.width,i=e.height;if(n<3||i<3||n>15||i>15||n%2==0||i%2==0)throw new l.EM(`Unsupported kernel size: ${n}x${i}`);this._kernelSize=e,this._kernel.x=Tn[this._kernelSize.width],this._kernel.y=Tn[this._kernelSize.height]}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._kernel.x,r=this._kernel.y,a=Rn[this._kernelSize.width],A=Nn[this._kernelSize.height],c=this._tex[0],l=this._tex[1];e.programs.filters[a].outputs(i,s,c)(t,o),e.programs.filters[A].outputs(i,s,l)(c,r),this.output().swrite(l,n)}}const Fn={3:"median3",5:"median5",7:"median7"};class On extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),sn().expects(Gt.Image)]),this._kernelSize=new Lt(5,5)}get kernelSize(){return this._kernelSize}set kernelSize(e){t.A.assert(e instanceof Lt);const n=e.width;if(3!=n&&5!=n&&7!=n)throw new l.EM("Supported kernel sizes: 3x3, 5x5, 7x7");if(e.width!=e.height)throw new l.EM("Use a square kernel");this._kernelSize=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._kernelSize.width,r=Fn[o],a=this._tex[0];e.programs.filters[r].outputs(i,s,a)(t),this.output().swrite(a,n)}}const Un={3:"convolution3",5:"convolution5",7:"convolution7"};class Gn extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Image),sn().expects(Gt.Image)]),this._kernel=Ut.SpeedyMatrix.Create(3,3,[0,0,0,0,1,0,0,0,0])}get kernel(){return this._kernel}set kernel(e){if(e.rows!=e.columns)throw new l.EM("Use a square kernel");if(3!=e.rows&&5!=e.rows&&7!=e.rows)throw new l.EM("Invalid kernel size. Supported sizes: 3x3, 5x5, 7x7");this._kernel=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._tex[0],r=this._kernel.rows,a=Un[r],A=this._kernel.read();e.programs.filters[a].outputs(i,s,o)(t,A),this.output().swrite(o,n)}}class qn extends An{constructor(e=void 0){super(e,3,[nn().expects(Gt.Image).satisfying((e=>e.format===St.f5.RGBA||e.format===St.f5.GREY)),sn().expects(Gt.Image)]),this._gain=.5,this._offset=.5,this._decay=0,this._quality="medium"}get gain(){return this._gain}set gain(e){this._gain=+e}get offset(){return this._offset}set offset(e){this._offset=+e}get decay(){return this._decay}set decay(e){this._decay=Math.max(0,Math.min(+e,1))}get quality(){return this._quality}set quality(e){if("high"!==e&&"medium"!==e&&"low"!==e)throw new l.qw(`Invalid quality level for the Nightvision filter: "${e}"`);this._quality=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._gain,r=this._offset,a=this._decay,A=this._quality,c=e.programs.filters,l=this._tex[0],d=this._tex[1],h=this._tex[2];"medium"==A?(c.illuminationMapX.outputs(i,s,l),c.illuminationMapY.outputs(i,s,d),c.illuminationMapX(t),c.illuminationMapY(l)):"high"==A?(c.illuminationMapHiX.outputs(i,s,l),c.illuminationMapHiY.outputs(i,s,d),c.illuminationMapHiX(t),c.illuminationMapHiY(l)):"low"==A&&(c.illuminationMapLoX.outputs(i,s,l),c.illuminationMapLoY.outputs(i,s,d),c.illuminationMapLoX(t),c.illuminationMapLoY(l)),n===St.f5.GREY?(c.nightvisionGreyscale.outputs(i,s,h),c.nightvisionGreyscale(t,d,o,r,a)):n===St.f5.RGBA&&(c.nightvision.outputs(i,s,h),c.nightvision(t,d,o,r,a)),this.output().swrite(h,n)}}class Hn extends An{constructor(e=void 0){super(e,4,[nn().expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),sn().expects(Gt.Image)]),this._minValue=0,this._maxValue=255}get minValue(){return this._minValue}set minValue(e){this._minValue=Math.max(0,Math.min(+e,255))}get maxValue(){return this._maxValue}set maxValue(e){this._maxValue=Math.max(0,Math.min(+e,255))}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._tex[3];let r=this._minValue,a=this._maxValue;r>a&&(r=a=(r+a)/2);const A=this._scanMinMax(e,t,St.kQ.GREEN);e.programs.filters.normalizeGreyscale.outputs(i,s,o),e.programs.filters.normalizeGreyscale(A,r,a),this.output().swrite(o,n)}_scanMinMax(e,n,i){const s=this._tex,o=e.programs.utils,r=n.width,a=n.height,A=0|Math.ceil(Math.log2(Math.max(r,a)));t.A.assert(void 0!==St.kg[i]),o.copyComponents.outputs(r,a,s[2]),o.scanMinMax2D.outputs(r,a,s[0],s[1]);let c=o.copyComponents(n,n,St.kQ.ALL,St.kg[i]);for(let e=0;e<A;e++)c=o.scanMinMax2D(c,e);return c}}class Yn extends J.Q{static Greyscale(e=void 0){return new Mn(e)}static GaussianBlur(e=void 0){return new zn(e)}static SimpleBlur(e=void 0){return new Xn(e)}static MedianBlur(e=void 0){return new On(e)}static Convolution(e=void 0){return new Gn(e)}static Nightvision(e=void 0){return new qn(e)}static Normalize(e=void 0){return new Hn(e)}}const Jn=[0,0,0,0,0,0,0,0,1];class Wn extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Image),sn().expects(Gt.Image)]),this._transform=Ut.SpeedyMatrix.Create(3,3,[1,0,0,0,1,0,0,0,1])}get transform(){return this._transform}set transform(e){if(3!=e.rows||3!=e.columns)throw new l.qw(`Not a 3x3 transformation matrix: ${e}`);this._transform=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._tex[0],r=this._transform.read(),a=this._inverse3(r),A=!Number.isNaN(a[0]);e.programs.transforms.warpPerspective.outputs(i,s,o),e.programs.transforms.warpPerspective(t,A?a:Jn),this.output().swrite(o,n)}_inverse3(e,t=1e-6){const n=e[0],i=e[1],s=e[2],o=e[3],r=e[4],a=e[5],A=e[6],c=e[7],l=e[8],d=l*r-a*c,h=l*o-a*A,p=c*o-r*A,g=n*d-i*h+s*p;if(Math.abs(g)<t)e.fill(Number.NaN,0,9);else{const t=1/g;e[0]=d*t,e[1]=-(l*i-s*c)*t,e[2]=(a*i-s*r)*t,e[3]=-h*t,e[4]=(l*n-s*A)*t,e[5]=-(a*n-s*o)*t,e[6]=p*t,e[7]=-(c*n-i*A)*t,e[8]=(r*n-i*o)*t}return e}}class Zn extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Image),sn().expects(Gt.Image)]),this._size=new Lt(0,0),this._scale=new Xt(1,1),this._method="bilinear"}get size(){return this._size}set size(e){this._size=e}get scale(){return this._scale}set scale(e){this._scale=e}get method(){return this._method}set method(e){if("nearest"!==e&&"bilinear"!==e)throw new l.qw(`Invalid method method: "${e}"`);this._method=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._tex[0],r=this._method,a=this._size.width||Math.max(1,this._scale.x*i),A=this._size.height||Math.max(1,this._scale.y*s);"bilinear"==r?e.programs.transforms.resizeBilinear.outputs(a,A,o)(t):"nearest"==r&&e.programs.transforms.resizeNearest.outputs(a,A,o)(t),this.output().swrite(o,n)}}class jn extends J.Q{static Resize(e=void 0){return new Zn(e)}static PerspectiveWarp(e=void 0){return new Wn(e)}}const $n=p.MAX_ENCODER_CAPACITY,Vn=p.DEFAULT_ENCODER_CAPACITY;class ei extends An{constructor(e=void 0,t=0,n=void 0){super(e,t+0,n),this._capacity=Vn,this._oldWrapS=0,this._tex16=new Array(2).fill(null)}init(e){super.init(e),this._oldWrapS=this._setupSpecialTexture(e.gl.TEXTURE_WRAP_S,e.gl.REPEAT),this._allocateTex16(e),e.subscribe(this._allocateTex16,this,e)}release(e){e.unsubscribe(this._allocateTex16,this),this._deallocateTex16(e),this._setupSpecialTexture(e.gl.TEXTURE_WRAP_S,this._oldWrapS),super.release(e)}_setupSpecialTexture(e,t){}get capacity(){return this._capacity}set capacity(e){this._capacity=Math.min(Math.max(0,0|e),$n)}_encodeKeypoints(e,t,n,i=0,s=0){const o=this._capacity,r=ei.encoderLength(o,i,s),a=1<<(Math.ceil(Math.log2(t.width*t.height))>>>1),A=Math.ceil(t.width*t.height/a),c=Math.max(a,A),l=e.programs.keypoints;l.initLookupTable.outputs(a,A,this._tex16[1]),l.sortLookupTable.outputs(a,A,this._tex16[0],this._tex16[1]),l.encodeKeypoints.outputs(r,r,n);let d=l.initLookupTable(t);for(let e=1;e<c;e*=2)d=l.sortLookupTable(d,e,a,A);return l.encodeKeypoints(t,d,a,i,s,r,o)}_encodeKeypointsOLD(e,t,n,i=0,s=0){const o=this._capacity,r=ei.encoderLength(o,i,s),a=t.width,A=t.height,c=[a,A],l=this._tex.slice(this._tex.length-0),d=e.programs.keypoints,h=l.pop();d.encodeKeypointSkipOffsets.outputs(a,A,l[0]),d.encodeKeypointLongSkipOffsets.outputs(a,A,l[1],l[0]),d.encodeKeypointPositions.outputs(r,r,l[2],l[3]),d.encodeKeypointProperties.outputs(r,r,n),t=e.programs.utils.copy.outputs(a,A,h)(t);let p=d.encodeKeypointSkipOffsets(t,c);for(let e=0;e<2;e++)p=d.encodeKeypointLongSkipOffsets(p,c);let g=l[3].clear();for(let e=0;e<4;e++)g=d.encodeKeypointPositions(p,c,e,4,o,g,i,s,r);return d.encodeKeypointProperties(t,g,i,s,r)}_encodeZeroKeypoints(e,t,n=0,i=0){const s=ei.encoderLength(0,n,i),o=e.programs.keypoints;return o.encodeNullKeypoints.outputs(s,s,t),o.encodeNullKeypoints()}_allocateTex16(e){const t=e.gl;for(let e=0;e<this._tex16.length;e++)this._tex16[e]=new u(t,1,1,t.RGBA_INTEGER,t.RGBA16UI,t.UNSIGNED_SHORT,t.NEAREST,t.CLAMP_TO_EDGE)}_deallocateTex16(e){for(let e=0;e<this._tex16.length;e++)this._tex16[e]=this._tex16[e].release()}static encoderLength(e,t,n){const i=e*Math.ceil((p.MIN_KEYPOINT_SIZE+t+n)/4);return Math.max(p.MIN_ENCODER_LENGTH,Math.ceil(Math.sqrt(i)))}static encoderCapacity(e,t,n){const i=Math.ceil((p.MIN_KEYPOINT_SIZE+e+t)/4),s=n*n;return Math.floor(s/i)}}class ti extends ei{constructor(e=void 0,t=void 0,n=void 0){super(e,t,n),this._levels=1,this._scaleFactor=1.4142135623730951}get levels(){return this._levels}set levels(e){this._levels=Math.max(1,0|e)}get scaleFactor(){return this._scaleFactor}set scaleFactor(e){this._scaleFactor=Math.max(1,Math.min(+e,2))}}const ni=1024,ii=4*Float32Array.BYTES_PER_ELEMENT;class si extends cn{constructor(e=void 0){super(e,2,[sn().expects(Gt.Keypoints)]),this._keypoints=[],this._buffer=si._createUploadBuffer(ni),this._capacity=p.DEFAULT_ENCODER_CAPACITY}get keypoints(){return this._keypoints}set keypoints(e){if(!Array.isArray(e))throw new l.qw("Not an array of keypoints");this._keypoints=e}get capacity(){return this._capacity}set capacity(e){this._capacity=Math.min(Math.max(0,0|e),p.MAX_ENCODER_CAPACITY)}_run(e){const t=this._keypoints,n=this._capacity,i=Math.min(t.length,n),s=Math.max(1,Math.ceil(i/ni)),o=this._buffer,r=e.programs.keypoints.uploadKeypoints,a=ei.encoderLength(n,0,0);r.outputs(a,a,this._tex[0],this._tex[1]);let A=0,c=r.clear();for(let e=0;e<s;e++){const e=A+Math.min(ni,i-A);r.setUBO("KeypointBuffer",si._fillUploadBuffer(o,t,A,e)),c=r(c,A,e,0,0,a),A=e}this.output().swrite(c,0,0,a)}static _createUploadBuffer(e){const n=new ArrayBuffer(ii*e);return t.A.assert(n.byteLength<=16384),new Float32Array(n)}static _fillUploadBuffer(e,t,n,i){const s=i-n;for(let i=0;i<s;i++){const s=t[n+i],o=void 0!==s.position,r=4*i;e[r]=+(o?s.position.x:s.x)||0,e[r+1]=+(o?s.position.y:s.y)||0,e[r+2]=+s.lod||0,e[r+3]=+s.score||0}return e}}class oi{constructor(e){return this._data=e,Object.freeze(this)}get data(){return this._data}get size(){return this._data.byteLength}toString(){return`SpeedyKeypointDescriptor(${this._data.join(",")})`}}const ri=new Uint8Array([]);class ai extends ln{constructor(e="keypoints",t=0,n=[]){super(e,t+2,n),this._keypoints=[],this._textureReader=new h,this._page=0,this._turbo=!1,this._includeDiscarded=!1}get turbo(){return this._turbo}set turbo(e){this._turbo=Boolean(e)}get includeDiscarded(){return this._includeDiscarded}set includeDiscarded(e){this._includeDiscarded=Boolean(e)}init(e){super.init(e),this._textureReader.init(e)}release(e){this._textureReader.release(e),super.release(e)}export(){return o.i.resolve(this._keypoints)}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read();return this._download(e,t,n,i,s)}_download(e,t,n,i,s){const o=this._turbo,r=(a=s)>1?1<<Math.ceil(Math.log2(a)):1;var a;const A=Math.ceil(s*s/r),c=this._tex[this._tex.length-1-this._page];return e.programs.utils.copyKeypoints.outputs(r,A,c)(t),this._page=1-this._page,this._textureReader.readPixelsAsync(c,0,0,c.width,c.height,o).then((e=>{this._keypoints=this._decode(e,n,i,r,A)}))}_decode(e,n,i,s,o){const r=p.MIN_KEYPOINT_SIZE+n+i,a=p.LOG2_PYRAMID_MAX_SCALE,A=p.PYRAMID_MAX_LEVELS,c=Math.PI/255,d=[],h=this._includeDiscarded;let g,u,f,I,m,_,y,x,C=ri,E=ri;if(n%4!=0||i%4!=0)throw new l.qw(`Invalid descriptorSize (${n}) / extraSize (${i})`);const S=s*o*4,P=e.byteLength;P!=S&&t.A.warning(`Expected ${S} bytes when decoding a set of keypoints, found ${P}`),n+i>0&&(e=new Uint8Array(e));for(let s=0;s<P&&(g=e[s+1]<<8|e[s],u=e[s+3]<<8|e[s+2],f=e[s+5]<<8|e[s+4],I=e[s+7]<<8|e[s+6],65535!=g||65535!=u);s+=r)g+u+f+I!=0?i>0&&(E=e.subarray(8+s,8+s+i),E.byteLength<i)?t.A.warning(`KeypointSink: expected ${i} extra bytes when decoding the ${s/r}-th keypoint, found ${E.byteLength} instead`):n>0&&(C=e.subarray(8+s+i,8+s+i+n),C.byteLength<n)?t.A.warning(`KeypointSink: expected ${n} descriptor bytes when decoding the ${s/r}-th keypoint, found ${C.byteLength} instead`):(g/=p.FIX_RESOLUTION,u/=p.FIX_RESOLUTION,m=e[s+4]<255?-a+(a+A)*e[s+4]/255:0,_=(2*e[s+5]-255)*c,y=t.A.decodeFloat16(I),x=this._createKeypoint(g,u,m,_,y,C,E),d.push(x)):h&&d.push(null);return d}_createKeypoint(e,t,n,i,s,o,r){throw new l.aQ}_allocateExtra(e,n,i,s,o,r,a){t.A.assert(0===o),t.A.assert(r===s&&a>0&&a%4==0);const A=i.width,c=ei.encoderCapacity(s,o,A),l=ei.encoderLength(c,r,a);return e.programs.keypoints.allocateExtra.outputs(l,l,n)(i,s,o,A,r,a,l)}}class Ai extends ai{constructor(e="keypoints"){super(e,0,[nn().expects(Gt.Keypoints)])}_createKeypoint(e,t,n,i,s,o,r){const a=o.byteLength>0?new oi(o):null;return new hn(e,t,n,i,s,a)}}class ci extends ai{constructor(e="keypoints"){super(e,2,[nn().expects(Gt.Keypoints).satisfying((e=>0==e.extraSize)),nn("flow").expects(Gt.Vector2)])}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),{vectors:o}=this.input("flow").read(),r=n,a=this._allocateExtra(e,this._tex[0],t,n,i,r,4),A=a.width,c=e.programs.keypoints.transferToExtra.outputs(A,A,this._tex[1])(o,o.width,a,r,4,A);return this._download(e,c,r,4,A)}_createKeypoint(e,n,i,s,o,r,a){const A=r.byteLength,c=(a.byteLength,A>0?new oi(r):null),l=t.A.decodeFloat16(a[1]<<8|a[0]),d=t.A.decodeFloat16(a[3]<<8|a[2]),h=new Xt(l,d);return new pn(e,n,i,s,o,c,h)}}class li extends ai{constructor(e="keypoints"){super(e,2,[nn().expects(Gt.Keypoints).satisfying((e=>0==e.extraSize)),nn("matches").expects(Gt.KeypointMatches)])}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),{encodedMatches:o,matchesPerKeypoint:r}=this.input("matches").read(),a=n,A=4*r,c=this._allocateExtra(e,this._tex[0],t,n,i,a,A),l=c.width,d=e.programs.keypoints.transferToExtra.outputs(l,l,this._tex[1])(o,o.width,c,a,A,l);return this._download(e,d,a,A,l)}_createKeypoint(e,t,n,i,s,o,r){const a=o.byteLength,A=r.byteLength,c=a>0?new oi(o):null,l=A/4,d=new Array(l);for(let e=0;e<l;e++){const t=4*e,n=r[t]|r[t+1]<<8|r[t+2]<<16|r[t+3]<<24,i=new dn(n&p.MATCH_INDEX_MASK,n>>>p.MATCH_INDEX_BITS);d[e]=i}return new gn(e,t,n,i,s,c,d)}}const di=p.MAX_ENCODER_CAPACITY;class hi extends An{constructor(e=void 0){super(e,4,[nn().expects(Gt.Keypoints),sn().expects(Gt.Keypoints)]),this._size=di}get size(){return this._size}set size(e){this._size=Math.max(0,Math.min(0|e,di))}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),o=e.programs.keypoints,r=this._size,a=this._tex,A=this._tex[3],c=ei.encoderCapacity(n,i,s),l=Math.ceil(c/32),d=32*l,h=Math.min(c,r),p=ei.encoderLength(h,n,i);o.sortCreatePermutation.outputs(32,l,a[0]);let g=o.sortCreatePermutation(t,n,i,s);const u=Math.ceil(Math.log2(d));o.sortMergePermutation.outputs(32,l,a[1],a[2]);for(let e=1;e<=u;e++){const t=1<<e,n=e<<1;g=o.sortMergePermutation(g,t,n)}o.sortApplyPermutation.outputs(p,p,A),o.sortApplyPermutation(g,h,t,n,i),this.output().swrite(A,n,i,p)}}class pi extends An{constructor(e=void 0){super(e,5,[nn().expects(Gt.Keypoints),sn().expects(Gt.Keypoints)]),this._imageSize=new Lt(0,0),this._borderSize=new Xt(0,0)}get imageSize(){return this._imageSize}set imageSize(e){this._imageSize=e}get borderSize(){return this._borderSize}set borderSize(e){this._borderSize=e}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),o=e.programs.keypoints,r=this._imageSize,a=this._borderSize,A=r.width,c=r.height,d=a.x,h=a.x,p=a.y,g=a.y,u=this._tex;if(0==A||0==c)throw new l.Er("BorderClipper: did you forget to set the image size?");const f=ei.encoderCapacity(n,i,s),I=Math.max(1,Math.ceil(Math.sqrt(f)));o.clipBorder.outputs(s,s,u[0]),o.mixKeypointsInit.outputs(I,I,u[1]),o.mixKeypointsSort.outputs(I,I,u[2],u[3]),o.mixKeypointsApply.outputs(s,s,u[4]);let m=o.clipBorder(A,c,p,h,g,d,t,n,i,s),_=o.mixKeypointsInit(m,n,i,s,f);for(let e=1;e<f;e*=2)_=o.mixKeypointsSort(_,e);m=o.mixKeypointsApply(_,m,n,i,s),this.output().swrite(m,n,i,s)}}class gi extends An{constructor(e=void 0){super(e,2,[nn().expects(Gt.Keypoints),sn().expects(Gt.Keypoints)]),this._pageIndex=0,this._initialized=!1,this._previousDescriptorSize=0,this._previousExtraSize=0,this._previousEncoderLength=0,this._frozen=!1}get frozen(){return this._frozen}set frozen(e){this._frozen=Boolean(e)}release(e){this._initialized=!1,super.release(e)}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),o=this._previousDescriptorSize,r=this._previousExtraSize,a=this._previousEncoderLength,A=this._tex,c=A[1-this._pageIndex],l=A[this._pageIndex];if(this._frozen&&this._initialized||(this._previousDescriptorSize=n,this._previousExtraSize=i,this._previousEncoderLength=s,c.resize(s,s),t.copyTo(c),this._pageIndex=1-this._pageIndex),!this._initialized)return this._initialized=!0,void this.output().swrite(c,n,i,s);this.output().swrite(l,o,r,a)}}class ui extends An{constructor(e=void 0){super(e,5,[nn("in0").expects(Gt.Keypoints),nn("in1").expects(Gt.Keypoints),sn().expects(Gt.Keypoints)])}_run(e){const t=this.input("in0").read(),n=this.input("in1").read(),i=t.descriptorSize,s=t.extraSize,o=e.programs.keypoints,r=this._tex;if(t.descriptorSize!==n.descriptorSize||t.extraSize!=t.extraSize)throw new l.Er("Can't merge two sets of keypoints that have different formats");const a=ei.encoderCapacity(t.descriptorSize,t.extraSize,t.encoderLength),A=ei.encoderCapacity(n.descriptorSize,n.extraSize,n.encoderLength),c=a+A,d=ei.encoderLength(c,i,s),h=Math.max(1,Math.ceil(Math.sqrt(c)));o.mixKeypointsPreInit.outputs(d,d,r[0]),o.mixKeypointsInit.outputs(h,h,r[1]),o.mixKeypointsSort.outputs(h,h,r[2],r[3]),o.mixKeypointsApply.outputs(d,d,r[4]);let p=o.mixKeypointsPreInit(t.encodedKeypoints,n.encodedKeypoints,t.encoderLength,n.encoderLength,a,A,i,s,d),g=o.mixKeypointsInit(p,i,s,d,c);for(let e=1;e<c;e*=2)g=o.mixKeypointsSort(g,e);p=o.mixKeypointsApply(g,p,i,s,d),this.output().swrite(p,i,s,d)}}class fi extends An{constructor(e=void 0){super(e,6,[nn().expects(Gt.Keypoints),sn().expects(Gt.Keypoints)]),this._maxKeypoints=Number.NaN}get maxKeypoints(){return this._maxKeypoints}set maxKeypoints(e){Number.isNaN(e)?this._maxKeypoints=Number.NaN:this._maxKeypoints=Math.max(0,0|e)}_run(e){let{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read();const o=ei.encoderCapacity(n,i,s),r=this._maxKeypoints,a=e.programs.keypoints.shuffle.definedConstant("PERMUTATION_MAXLEN"),A=Math.min(a,o),c=this._generatePermutation(A,a);t=e.programs.keypoints.shuffle.setUBO("Permutation",c).outputs(s,s,this._tex[0])(t,n,i,s),e.programs.keypoints.mixKeypointsInit.outputs(s,s,this._tex[1]),e.programs.keypoints.mixKeypointsSort.outputs(s,s,this._tex[2],this._tex[3]),e.programs.keypoints.mixKeypointsApply.outputs(s,s,this._tex[4]);let l=e.programs.keypoints.mixKeypointsInit(t,n,i,s,o);for(let t=1;t<o;t*=2)l=e.programs.keypoints.mixKeypointsSort(l,t);if(t=e.programs.keypoints.mixKeypointsApply(l,t,n,i,s),!Number.isNaN(r)&&r<o){const o=ei.encoderLength(r,n,i);t=e.programs.keypoints.clip.outputs(o,o,this._tex[5])(t,n,i,s,r),s=o}this.output().swrite(t,n,i,s)}_generatePermutation(e,n=e){const i=new Int32Array(n),s=i.subarray(0,e).fill(-1),o=t.A.shuffle(t.A.range(e));for(let t=0,n=0;t<e;t++)if(s[t]<0){do{s[t]=o[n++]}while(s[t]<t);s[s[t]]=t}return i}}const Ii=["in0","in1"];class mi extends An{constructor(e=void 0){super(e,0,[...Ii.map((e=>nn(e).expects(Gt.Keypoints))),sn().expects(Gt.Keypoints)]),this._port=0}get port(){return this._port}set port(e){if(e<0||e>=Ii.length)throw new l.qw(`Invalid port: ${e}`);this._port=0|e}_run(e){const t=this.input(Ii[this._port]).read();this.output().write(t)}}class _i extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Keypoints),sn().expects(Gt.Keypoints)]),this._transform=Ut.SpeedyMatrix.Create(3,3,[1,0,0,0,1,0,0,0,1])}get transform(){return this._transform}set transform(e){if(3!=e.rows||3!=e.columns)throw new l.qw(`Not a 3x3 transformation matrix: ${e}`);this._transform=e}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),o=this._tex[0],r=this._transform.read();e.programs.keypoints.applyHomography.outputs(t.width,t.height,o)(r,t,n,i,s),this.output().swrite(o,n,i,s)}}const yi=Object.freeze({quadratic1d:"subpixelQuadratic1d",taylor2d:"subpixelTaylor2d","bicubic-upsample":"subpixelBicubic","bilinear-upsample":"subpixelBilinear"});class xi extends An{constructor(e=void 0){super(e,2,[nn("image").expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),nn("keypoints").expects(Gt.Keypoints),sn().expects(Gt.Keypoints),sn("displacements").expects(Gt.Vector2)]),this._method="quadratic1d",this._maxIterations=6,this._epsilon=.1}get method(){return this._method}set method(e){if(!Object.prototype.hasOwnProperty.call(yi,e))throw new l.qw(`Invalid method: "${e}"`);this._method=e}get maxIterations(){return this._maxIterations}set maxIterations(e){this._maxIterations=Math.max(0,+e)}get epsilon(){return this._epsilon}set epsilon(e){this._epsilon=Math.max(0,+e)}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input("keypoints").read(),{image:o,format:r}=this.input("image").read(),a=this._tex,A=yi[this._method],c=this._maxIterations,l=this._epsilon,d=ei.encoderCapacity(n,i,s),h=Math.max(1,Math.ceil(Math.sqrt(d))),p=e.programs.keypoints[A].outputs(h,h,a[0])(o,t,n,i,s,c,l),g=e.programs.keypoints.transferFlow.outputs(s,s,a[1])(p,t,n,i,s);this.output().swrite(g,n,i,s),this.output("displacements").swrite(p)}}class Ci extends ti{constructor(e=void 0){super(e,5,[nn().expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),sn().expects(Gt.Keypoints)]),this._threshold=20}get threshold(){return this._threshold}set threshold(e){this._threshold=Math.max(0,Math.min(0|e,255))}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,s=t.height,o=this._tex,r=this._capacity,a=this._threshold,A=Math.log2(this.scaleFactor),c=this.levels;if(1!=c&&!t.hasMipmaps())throw new l.Er(`Expected a pyramid in ${this.fullName}`);if(0==r){const t=this._encodeZeroKeypoints(e,o[4]),n=t.width;return void this.output().swrite(t,0,0,n)}e.programs.keypoints.fast9_16.outputs(i,s,o[0],o[1]),e.programs.keypoints.nonmaxSpace.outputs(i,s,o[2]);let d=o[1].clear(),h=Math.max(1,Math.min(c,p.PYRAMID_MAX_LEVELS/A|0));for(let n=A*(h-1);h-- >0;n-=A)d=e.programs.keypoints.fast9_16(d,t,n,a);d=e.programs.keypoints.nonmaxSpace(d),c>1&&(d=e.programs.keypoints.nonmaxScaleSimple.outputs(i,s,o[1])(d,t,A));let g=this._encodeKeypoints(e,d,o[3]);const u=g.width;c>1&&(g=e.programs.keypoints.refineScaleFAST916.outputs(u,u,o[4])(t,A,g,0,0,u,a)),this.output().swrite(g,0,0,u)}}const Ei=Object.freeze({1:"harris1",3:"harris3",5:"harris5",7:"harris7"});class Si extends ti{constructor(e=void 0){super(e,6,[nn().expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),sn().expects(Gt.Keypoints)]),this._windowSize=new Lt(3,3),this._quality=.1}get quality(){return this._quality}set quality(e){this._quality=Math.max(0,Math.min(+e,1))}get windowSize(){return this._windowSize}set windowSize(e){const t=e.width;if(t!=e.height||1!=t&&3!=t&&5!=t&&7!=t)throw new l.qw(`Invalid window: ${e}. Acceptable sizes: 1x1, 3x3, 5x5, 7x7`);this._windowSize=e}_run(e){const{image:n,format:i}=this.input().read(),s=n.width,o=n.height,r=this._capacity,a=this._quality,A=this._windowSize.width,c=this.levels,d=Math.log2(this.scaleFactor),h=c>1?this.scaleFactor:1,g=e.programs.keypoints[Ei[A]],u=this._tex;if(1!=c&&!n.hasMipmaps())throw new l.Er(`Expected a pyramid in ${this.fullName}`);if(0==r){const t=this._encodeZeroKeypoints(e,u[5]),n=t.width;return void this.output().swrite(t,0,0,n)}g.outputs(s,o,u[0],u[1]),e.programs.utils.sobelDerivatives.outputs(s,o,u[2]),e.programs.keypoints.nonmaxSpace.outputs(s,o,u[3]);let f=u[1].clear(),I=Math.max(1,Math.min(c,p.PYRAMID_MAX_LEVELS/d|0));for(let i=d*(I-1);I-- >0;i-=d){const s=t.A.gaussianKernel(h*(1+i),A);f=g(f,n,e.programs.utils.sobelDerivatives(n,i),i,d,s),f=e.programs.keypoints.nonmaxSpace(f)}if(c>1){const t=e.programs.keypoints.laplacian.outputs(s,o,u[0])(f,n,d,0);f=e.programs.keypoints.nonmaxScale.outputs(s,o,u[2])(f,n,t,d)}e.programs.keypoints.harrisScoreFindMax.outputs(s,o,u[0],u[1]),I=Math.ceil(Math.log2(Math.max(s,o)));let m=f;for(let t=0;t<I;t++)m=e.programs.keypoints.harrisScoreFindMax(m,t);f=e.programs.keypoints.harrisScoreCutoff.outputs(s,o,m==u[0]?u[1]:u[0])(f,m,a);let _=this._encodeKeypoints(e,f,u[4]);const y=_.width;c>1&&(_=e.programs.keypoints.refineScaleLoG.outputs(y,y,u[5])(n,d,_,0,0,y)),this.output().swrite(_,0,0,y)}}class Pi extends An{constructor(e=void 0,t=0,n=void 0){super(e,t+1,n)}_allocateDescriptors(e,n,i,s,o,r){t.A.assert(n>=0&&i>=0),t.A.assert(s>=0&&s%4==0&&o===i);const a=r.width,A=ei.encoderCapacity(n,i,a),c=ei.encoderLength(A,s,o),l=this._tex[this._tex.length-1];return e.programs.keypoints.allocateDescriptors.outputs(c,c,l)(r,n,i,a,s,o,c)}}class vi extends Pi{constructor(e=void 0){super(e,3,[nn("image").expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),nn("keypoints").expects(Gt.Keypoints),sn().expects(Gt.Keypoints)])}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input("keypoints").read(),o=this.input("image").read().image,r=this._tex,a=this._tex[2],A=ei.encoderCapacity(n,i,s),c=Math.max(1,Math.ceil(Math.sqrt(A))),l=e.programs.keypoints.orbOrientation.outputs(c,c,r[0])(o,t,n,i,s),d=e.programs.keypoints.transferOrientation.outputs(s,s,r[1])(l,t,n,i,s),h=this._allocateDescriptors(e,n,i,32,i,d),p=h.width,g=e.programs.keypoints.orbDescriptor.outputs(p,p,a)(o,h,i,p);this.output().swrite(g,32,i,p)}}const wi=new Lt(11,11),Bi=Math.min(3,p.PYRAMID_MAX_LEVELS),bi={3:"lk3",5:"lk5",7:"lk7",9:"lk9",11:"lk11",13:"lk13",15:"lk15",17:"lk17",19:"lk19",21:"lk21"};class Qi extends An{constructor(e=void 0){super(e,3,[nn("previousImage").expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),nn("nextImage").expects(Gt.Image).satisfying((e=>e.format===St.f5.GREY)),nn("previousKeypoints").expects(Gt.Keypoints),sn().expects(Gt.Keypoints),sn("flow").expects(Gt.Vector2)]),this._windowSize=wi,this._levels=Bi,this._discardThreshold=1e-4,this._numberOfIterations=30,this._epsilon=.01}get windowSize(){return this._windowSize}set windowSize(e){if(e.width!=e.height)throw new l.EM(`LK: window ${this._windowSize.toString()} is not square!`);if(!Object.prototype.hasOwnProperty.call(bi,e.width)){const e=Object.keys(bi).sort(((e,t)=>e-t)).map((e=>e+"x"+e)).join(", ");throw new l.EM(`LK: window of size ${this._windowSize.toString()} is not supported! Supported sizes: ${e}`)}this._windowSize=e}get levels(){return this._levels}set levels(e){t.A.assert(e>=1&&e<=p.PYRAMID_MAX_LEVELS),this._levels=0|e}get discardThreshold(){return this._discardThreshold}set discardThreshold(e){t.A.assert(e>=0),this._discardThreshold=+e}get numberOfIterations(){return this._numberOfIterations}set numberOfIterations(e){t.A.assert(e>=1),this._numberOfIterations=0|e}get epsilon(){return this._epsilon}set epsilon(e){t.A.assert(e>=0),this._epsilon=+e}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input("previousKeypoints").read(),o=this.input("previousImage").read().image,r=this.input("nextImage").read().image,a=t,A=this._levels,c=this._windowSize.width,d=this._numberOfIterations,h=this._discardThreshold,p=this._epsilon,g=e.programs.keypoints,u=this._tex;if(!(1==A||o.hasMipmaps()&&r.hasMipmaps()))throw new l.Er("LK: a pyramid is required if levels > 1");if(o.width!==r.width||o.height!==r.height)throw new l.Er("LK: can't use input images of different size");const f=g[bi[c]],I=ei.encoderCapacity(n,i,s),m=Math.max(1,Math.ceil(Math.sqrt(I)));f.outputs(m,m,u[0],u[1]);let _=f.clear();for(let e=A-1;e>=0;e--)_=f(_,a,r,o,e,A,d,h,p,n,i,s);g.transferFlow.outputs(s,s,u[2]);const y=g.transferFlow(_,a,n,i,s);this.output().swrite(y,n,i,s),this.output("flow").swrite(_)}}class Mi extends cn{constructor(e=void 0){super(e,2,[sn().expects(Gt.LSHTables)]),this._keypoints=[],this._keypointsCopy=[],this._numberOfTables=8,this._hashSize=15,this._lsh=null}get keypoints(){return this._keypoints}set keypoints(e){if(!Array.isArray(e)||e.find((e=>!(e instanceof hn))))throw new l.qw("Static LSH tables: an invalid set of keypoints has been provided");this._keypoints!==e&&(this._keypoints=e,this._keypointsCopy=e.slice(0),this._lsh=null)}get numberOfTables(){return this._numberOfTables}set numberOfTables(e){if(!Z.includes(e))throw new l.qw(`Invalid number of tables: ${e}. Acceptable values: ${Z.join(", ")}`);e!==this._numberOfTables&&(this._numberOfTables=0|e,this._lsh=null)}get hashSize(){return this._hashSize}set hashSize(e){if(!j.includes(e))throw new l.qw(`Invalid hash size: ${e}. Acceptable values: ${j.join(", ")}`);e!==this._hashSize&&(this._hashSize=0|e,this._lsh=null)}_run(e){null==this._lsh&&(this._lsh=this._train()),this.output().swrite(this._lsh)}_train(){const e=this._keypointsCopy,t=this._numberOfTables,n=this._hashSize;if(e.find((e=>null==e.descriptor)))throw new l.Er("Static LSH tables: can't train the model with no keypoint descriptors!");const i=e.map((e=>e.descriptor.data)),s=this._tex[0],o=this._tex[1];return new se(s,o,i,t,n)}}const Di={fastest:0,default:1,demanding:2},ki=$.reduce(((e,t)=>(e[t]=(e=>{return t=t=>{return n=n=>`lshKnn${e}h${t}lv${n}`,[0,1,2].reduce(((e,t)=>(e[t]=n(t),e)),{});var n},j.reduce(((e,n)=>(e[n]=t(n),e)),{});var t})(t),e)),{});class Ki extends An{constructor(e=void 0){super(e,6,[nn("keypoints").expects(Gt.Keypoints).satisfying((e=>e.descriptorSize>0)),nn("lsh").expects(Gt.LSHTables),sn().expects(Gt.KeypointMatches)]),this._k=1,this._quality="default"}get k(){return this._k}set k(e){this._k=Math.max(1,0|e)}get quality(){return this._quality}set quality(e){if(!Object.prototype.hasOwnProperty.call(Di,e))throw new l.qw(`Invalid quality level: "${e}"`);this._quality=e}_run(e){const{encodedKeypoints:n,descriptorSize:i,extraSize:s,encoderLength:o}=this.input("keypoints").read(),r=this.input("lsh").read().lsh,a=e.programs.keypoints,A=r.tables,c=r.descriptorDB,d=A.width,h=c.width,p=r.tableCount,g=r.hashSize,u=r.bucketCapacity,f=r.bucketsPerTable,I=r.sequences,m=this._tex[0],_=this._tex[1],y=this._tex[2],x=this._tex[3],C=this._tex[4],E=this._tex[5],S=Di[this._quality],P=this._k;if(i!==r.descriptorSize)throw new l.qw(`Can't match different types of descriptors in ${this.fullName}`);t.A.assert(null!=ki[i]),t.A.assert(null!=ki[i][g]),t.A.assert(null!=ki[i][g][S]);const v=ei.encoderCapacity(i,s,o),w=Math.max(1,Math.ceil(Math.sqrt(v*P)));let B=E;a.lshKnnTransfer.outputs(w,w,C,E);const b=Math.max(1,Math.ceil(Math.sqrt(v)));a.lshKnnInitCandidates.outputs(b,b,m),a.lshKnnInitFilters.outputs(b,b,x);const Q=a[ki[i][g][S]];Q.outputs(b,b,_,y),Q.setUBO("LSHSequences",I),B.clear(),a.lshKnnInitFilters();for(let t=0;t<P;t++){let r=a.lshKnnInitCandidates();for(let t=0;t<p;t++)r=Q(r,x,b,A,c,t,u,f,d,h,n,i,s,o),e.gl.flush();r.copyTo(x),B=a.lshKnnTransfer(B,r,P,t)}this.output().swrite(B,P)}}const Li={32:"bfMatcher32",64:"bfMatcher64"};class zi extends An{constructor(e=void 0){super(e,6,[nn("keypoints").expects(Gt.Keypoints).satisfying((e=>e.descriptorSize>0)),nn("database").expects(Gt.Keypoints).satisfying((e=>e.descriptorSize>0)),sn().expects(Gt.KeypointMatches)]),this._matchesPerKeypoint=1}get k(){return this._matchesPerKeypoint}set k(e){this._matchesPerKeypoint=Math.max(1,0|e)}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input("keypoints").read(),o=this.input("database").read(),r=this._tex[0],a=this._tex[1],A=this._tex[2],c=this._tex[3],d=this._tex[4],h=this._tex[5],p=this._matchesPerKeypoint,g=e.programs.keypoints;if(n!==o.descriptorSize)throw new l.qw(`Incompatible descriptors in ${this.fullName}`);if(!Object.prototype.hasOwnProperty.call(Li,n))throw new l.EM(`Unsupported descriptor size (${n}) in ${this.fullName}`);const u=g[Li[n]],f=ei.encoderCapacity(n,i,s),I=ei.encoderCapacity(o.descriptorSize,o.extraSize,o.encoderLength),m=u.definedConstant("NUMBER_OF_KEYPOINTS_PER_PASS"),_=Math.ceil(I/m),y=Math.max(1,Math.ceil(Math.sqrt(f))),x=Math.max(1,Math.ceil(Math.sqrt(f*p)));g.bfMatcherTransfer.outputs(x,x,d,h),g.bfMatcherInitCandidates.outputs(y,y,A),g.bfMatcherInitFilters.outputs(y,y,c),u.outputs(y,y,r,a);let C=h.clear(),E=g.bfMatcherInitFilters();for(let r=0;r<p;r++){let a=g.bfMatcherInitCandidates();for(let r=0;r<_;r++)a=u(a,E,y,o.encodedKeypoints,o.descriptorSize,o.extraSize,o.encoderLength,t,n,i,s,r),e.gl.flush();p>1&&a.copyTo(E),C=g.bfMatcherTransfer(C,a,p,r)}this.output().swrite(C,p)}}class Ti extends An{constructor(e=void 0){super(e,1,[nn("in").expects(Gt.Keypoints),nn("reference").expects(Gt.Keypoints),sn().expects(Gt.Keypoints)]),this._threshold=p.MAX_TEXTURE_LENGTH+1}get threshold(){return this._threshold}set threshold(e){this._threshold=Math.max(0,+e)}_run(e){const t=this.input("in").read(),n=this.input("reference").read(),i=this._threshold;if(t.descriptorSize!=n.descriptorSize||t.extraSize!=n.extraSize)throw new l.Er("The distance filter requires two compatible shapes of keypoint streams");const s=this._tex[0],o=Math.max(t.encoderLength,n.encoderLength),r=t.descriptorSize,a=t.extraSize;e.programs.keypoints.distanceFilter.outputs(o,o,s)(t.encodedKeypoints,t.encoderLength,n.encodedKeypoints,n.encoderLength,r,a,o,i),this.output().swrite(s,r,a,o)}}const Ri={32:"hammingDistanceFilter32",64:"hammingDistanceFilter64"};class Ni extends An{constructor(e=void 0){super(e,1,[nn("in").expects(Gt.Keypoints).satisfying((e=>e.descriptorSize>0)),nn("reference").expects(Gt.Keypoints).satisfying((e=>e.descriptorSize>0)),sn().expects(Gt.Keypoints)]),this._threshold=8*p.MAX_DESCRIPTOR_SIZE}get threshold(){return this._threshold}set threshold(e){this._threshold=Math.max(0,0|e)}_run(e){const t=this.input("in").read(),n=this.input("reference").read(),i=this._threshold;if(t.descriptorSize!=n.descriptorSize||t.extraSize!=n.extraSize)throw new l.Er("The Hamming distance filter requires two compatible shapes of keypoint streams");if(!Object.prototype.hasOwnProperty.call(Ri,t.descriptorSize))throw new l.EM(`Hamming distance filter - invalid descriptor size: ${t.descriptorSize}`);const s=this._tex[0],o=Math.max(t.encoderLength,n.encoderLength),r=t.descriptorSize,a=t.extraSize,A=Ri[t.descriptorSize];e.programs.keypoints[A].outputs(o,o,s)(t.encodedKeypoints,t.encoderLength,n.encodedKeypoints,n.encoderLength,r,a,o,i),this.output().swrite(s,r,a,o)}}class Xi extends An{constructor(e=void 0){super(e,1,[nn().expects(Gt.Keypoints)]),this._descriptorSize=0,this._extraSize=0,this._encoderLength=0,this._initialized=!1}get encodedKeypoints(){if(!this._initialized)throw new l.Er(`Portal error: ${this.fullName} holds no data`);return this._tex[0]}get descriptorSize(){if(!this._initialized)throw new l.Er(`Portal error: ${this.fullName} holds no data`);return this._descriptorSize}get extraSize(){if(!this._initialized)throw new l.Er(`Portal error: ${this.fullName} holds no data`);return this._extraSize}get encoderLength(){if(!this._initialized)throw new l.Er(`Portal error: ${this.fullName} holds no data`);return this._encoderLength}init(e){super.init(e);const t=ei.encoderLength(0,0,0);this._tex[0].resize(t,t).clearToColor(1,1,1,1),this._descriptorSize=this._extraSize=0,this._encoderLength=t,this._initialized=!0}release(e){this._initialized=!1,super.release(e)}_run(e){const{encodedKeypoints:t,descriptorSize:n,extraSize:i,encoderLength:s}=this.input().read(),o=this._tex[0];o.resize(t.width,t.height),t.copyTo(o),this._descriptorSize=n,this._extraSize=i,this._encoderLength=s}}class Fi extends cn{constructor(e=void 0){super(e,0,[sn().expects(Gt.Keypoints)]),this._source=null}get source(){return this._source}set source(e){if(null!==e&&!(e instanceof Xi))throw new l.qw(`Incompatible source for ${this.fullName}`);this._source=e}_run(e){if(null==this._source)throw new l.Er(`${this.fullName} has no source`);this.output().swrite(this._source.encodedKeypoints,this._source.descriptorSize,this._source.extraSize,this._source.encoderLength)}}class Oi extends J.Q{static FAST(e=void 0){return new Ci(e)}static Harris(e=void 0){return new Si(e)}}class Ui extends J.Q{static ORB(e=void 0){return new vi(e)}}class Gi extends J.Q{static LK(e=void 0){return new Qi(e)}}class qi extends J.Q{static StaticLSHTables(e=void 0){return new Mi(e)}static LSHKNN(e=void 0){return new Ki(e)}static BFKNN(e=void 0){return new zi(e)}}class Hi extends J.Q{static Source(e=void 0){return new Fi(e)}static Sink(e=void 0){return new Xi(e)}}class Yi extends J.Q{static get Detector(){return Oi}static get Descriptor(){return Ui}static get Tracker(){return Gi}static get Matcher(){return qi}static get Portal(){return Hi}static Source(e=void 0){return new si(e)}static Sink(e=void 0){return new Ai(e)}static SinkOfTrackedKeypoints(e=void 0){return new ci(e)}static SinkOfMatchedKeypoints(e=void 0){return new li(e)}static Clipper(e=void 0){return new hi(e)}static BorderClipper(e=void 0){return new pi(e)}static Buffer(e=void 0){return new gi(e)}static Mixer(e=void 0){return new ui(e)}static Shuffler(e=void 0){return new fi(e)}static Multiplexer(e=void 0){return new mi(e)}static Transformer(e=void 0){return new _i(e)}static SubpixelRefiner(e=void 0){return new xi(e)}static DistanceFilter(e=void 0){return new Ti(e)}static HammingDistanceFilter(e=void 0){return new Ni(e)}}const Ji=e=>e>1?1<<Math.ceil(Math.log2(e)):1;class Wi extends ln{constructor(e="vec2"){super(e,2,[nn().expects(Gt.Vector2)]),this._vectors=[],this._textureReader=new h,this._page=0,this._turbo=!1}get turbo(){return this._turbo}set turbo(e){this._turbo=Boolean(e)}init(e){super.init(e),this._textureReader.init(e)}release(e){this._textureReader.release(e),super.release(e)}export(){return o.i.resolve(this._vectors)}_run(e){const{vectors:t}=this.input().read(),n=this._turbo,i=t.width,s=Ji(i),o=Ji(Math.ceil(i*i/s)),r=this._tex[this._page];return e.programs.utils.copy2DVectors.outputs(s,o,r)(t),this._page=1-this._page,this._textureReader.readPixelsAsync(r,0,0,r.width,r.height,n).then((e=>{this._vectors=Wi._decode(e,s,o)}))}static _decode(e,n,i){const s=[];let o=0,r=0,a=0,A=0;const c=n*i*4,l=Math.min(e.length,c);for(let n=0;n<l&&(r=e[n+1]<<8|e[n],o=e[n+3]<<8|e[n+2],65535!=r||65535!=o);n+=4)65280==r&&65280==o||(a=t.A.decodeFloat16(r),A=t.A.decodeFloat16(o),s.push(new Xt(a,A)));return s}}const Zi=new class extends Function{constructor(){return super("...args","return args.length > 1 ? this._create(...args) : this._from(args[0])"),this.bind(this)}_create(e,t=e,n=[]){return Ut.SpeedyMatrix.Create(e,t,n)}_from(e){return Ut.SpeedyMatrix.From(e)}Zeros(e,t=e){return Ut.SpeedyMatrix.Zeros(e,t)}Ones(e,t=e){return Ut.SpeedyMatrix.Ones(e,t)}Eye(e,t=e){return Ut.SpeedyMatrix.Eye(e,t)}ready(){return Ut.SpeedyMatrix.ready()}qr(e,t,n,{mode:i="reduced"}={}){const s=n,o=n.rows,r=n.columns;if("reduced"==i){if(e.rows!=o||e.columns!=r||t.rows!=r||t.columns!=r)throw new l.qw("Invalid shape for reduced QR")}else{if("full"!=i)throw new l.qw(`Invalid mode for QR: "${i}"`);if(e.rows!=o||e.columns!=o||t.rows!=o||t.columns!=r)throw new l.qw("Invalid shape for full QR")}return Ot.U.ready().then((({wasm:n,memory:o})=>{const r=Ot.U.allocateMat32(n,o,e),a=Ot.U.allocateMat32(n,o,t),A=Ot.U.allocateMat32(n,o,s);return Ot.U.copyToMat32(n,o,A,s),"reduced"==i?n.exports.Mat32_qr_reduced(r,a,A):n.exports.Mat32_qr_full(r,a,A),Ot.U.copyFromMat32(n,o,r,e),Ot.U.copyFromMat32(n,o,a,t),Ot.U.deallocateMat32(n,o,A),Ot.U.deallocateMat32(n,o,a),Ot.U.deallocateMat32(n,o,r),[e,t]}))}ols(e,t,n,{method:i="qr"}={}){const s=t.rows,o=t.columns,r=e;if(s<o||0==o)throw new l.qw("Can't solve an underdetermined system of equations");if(n.rows!=s||1!=n.columns||r.rows!=o||1!=r.columns)throw new l.qw("Invalid shapes");return Ot.U.ready().then((({wasm:s,memory:o})=>{const a=Ot.U.allocateMat32(s,o,t),A=Ot.U.allocateMat32(s,o,n),c=Ot.U.allocateMat32(s,o,r);if(Ot.U.copyToMat32(s,o,a,t),Ot.U.copyToMat32(s,o,A,n),"qr"!==i)throw new l.qw(`Invalid method: "${i}"`);return s.exports.Mat32_qr_ols(c,a,A,2),Ot.U.copyFromMat32(s,o,c,r),Ot.U.deallocateMat32(s,o,c),Ot.U.deallocateMat32(s,o,A),Ot.U.deallocateMat32(s,o,a),e}))}solve(e,t,n,{method:i="qr"}={}){const s=t.rows,o=t.columns,r=e;if(s!=o)throw new l.qw("Can't solve an over or underdetermined system of equations");if(n.rows!=s||1!=n.columns||r.rows!=s||1!=r.columns)throw new l.qw("Invalid shapes");return Ot.U.ready().then((({wasm:e,memory:s})=>{if("qr"===i)return this.ols(r,t,n,{method:i});throw new l.qw(`Invalid method: "${i}"`)}))}perspective(e,t,n){if(2!=t.rows||4!=t.columns||2!=n.rows||4!=n.columns)throw new l.qw("You need two 2x4 input matrices to compute a perspective transformation");if(3!=e.rows||3!=e.columns)throw new l.qw("The output of perspective() is a 3x3 homography");return Ot.U.ready().then((({wasm:i,memory:s})=>{const o=Ot.U.allocateMat32(i,s,e),r=Ot.U.allocateMat32(i,s,t),a=Ot.U.allocateMat32(i,s,n);return Ot.U.copyToMat32(i,s,r,t),Ot.U.copyToMat32(i,s,a,n),i.exports.Mat32_homography_ndlt4(o,r,a),Ot.U.copyFromMat32(i,s,o,e),Ot.U.deallocateMat32(i,s,a),Ot.U.deallocateMat32(i,s,r),Ot.U.deallocateMat32(i,s,o),e}))}findHomography(e,n,i,{method:s="default",mask:o=null,reprojectionError:r=3,numberOfHypotheses:a=512,bundleSize:A=128}={}){if(2!=n.rows||n.columns<4||2!=i.rows||i.columns!=n.columns)throw new l.qw("You need two 2 x n (n >= 4) input matrices to compute a homography");if(3!=e.rows||3!=e.columns)throw new l.qw("The output of findHomography() is a 3x3 homography");if(null!=o&&(1!=o.rows||o.columns!=n.columns))throw new l.qw("Invalid shape of the inliers mask");return Ot.U.ready().then((({wasm:c,memory:d})=>{const h=Ot.U.allocateMat32(c,d,e),p=Ot.U.allocateMat32(c,d,n),g=Ot.U.allocateMat32(c,d,i),u=null!=o?Ot.U.allocateMat32(c,d,o):0;switch(Ot.U.copyToMat32(c,d,p,n),Ot.U.copyToMat32(c,d,g,i),s){case"pransac":t.A.assert(r>=0&&a>0&&A>0),c.exports.Mat32_pransac_homography(h,u,p,g,a,A,r);break;case"default":case"dlt":c.exports.Mat32_homography_ndlt(h,p,g);break;default:throw new l.qw(`Illegal method for findHomography(): "${s}"`)}return Ot.U.copyFromMat32(c,d,h,e),null!=o&&Ot.U.copyFromMat32(c,d,u,o),null!=o&&Ot.U.deallocateMat32(c,d,u),Ot.U.deallocateMat32(c,d,g),Ot.U.deallocateMat32(c,d,p),Ot.U.deallocateMat32(c,d,h),e}))}applyPerspectiveTransform(e,t,n){if(2!=t.rows||2!=e.rows||t.columns!=e.columns)throw new l.qw("Invalid shapes");if(3!=n.rows||3!=n.columns)throw new l.qw("The perspective transformation must be a 3x3 matrix");return Ot.U.ready().then((({wasm:i,memory:s})=>{const o=Ot.U.allocateMat32(i,s,n),r=Ot.U.allocateMat32(i,s,t),a=Ot.U.allocateMat32(i,s,e);return Ot.U.copyToMat32(i,s,r,t),Ot.U.copyToMat32(i,s,o,n),i.exports.Mat32_transform_perspective(a,r,o),Ot.U.copyFromMat32(i,s,a,e),Ot.U.deallocateMat32(i,s,a),Ot.U.deallocateMat32(i,s,r),Ot.U.deallocateMat32(i,s,o),e}))}affine(e,t,n){if(2!=t.rows||3!=t.columns||2!=n.rows||3!=n.columns)throw new l.qw("You need two 2x3 input matrices to compute an affine transform");if(2!=e.rows||3!=e.columns)throw new l.qw("The output of affine() is a 2x3 matrix");return Ot.U.ready().then((({wasm:i,memory:s})=>{const o=Ot.U.allocateMat32(i,s,e),r=Ot.U.allocateMat32(i,s,t),a=Ot.U.allocateMat32(i,s,n);return Ot.U.copyToMat32(i,s,r,t),Ot.U.copyToMat32(i,s,a,n),i.exports.Mat32_affine_direct3(o,r,a),Ot.U.copyFromMat32(i,s,o,e),Ot.U.deallocateMat32(i,s,a),Ot.U.deallocateMat32(i,s,r),Ot.U.deallocateMat32(i,s,o),e}))}findAffineTransform(e,n,i,{method:s="default",mask:o=null,reprojectionError:r=3,numberOfHypotheses:a=512,bundleSize:A=128}={}){if(2!=n.rows||n.columns<3||2!=i.rows||i.columns!=n.columns)throw new l.qw("You need two 2 x n (n >= 3) input matrices to compute an affine transform");if(2!=e.rows||3!=e.columns)throw new l.qw("The output of findAffineTransform() is a 2x3 matrix");if(null!=o&&(1!=o.rows||o.columns!=n.columns))throw new l.qw("Invalid shape of the inliers mask");return Ot.U.ready().then((({wasm:c,memory:d})=>{const h=Ot.U.allocateMat32(c,d,e),p=Ot.U.allocateMat32(c,d,n),g=Ot.U.allocateMat32(c,d,i),u=null!=o?Ot.U.allocateMat32(c,d,o):0;switch(Ot.U.copyToMat32(c,d,p,n),Ot.U.copyToMat32(c,d,g,i),s){case"pransac":t.A.assert(r>=0&&a>0&&A>0),c.exports.Mat32_pransac_affine(h,u,p,g,a,A,r);break;case"default":c.exports.Mat32_affine_direct(h,p,g);break;default:throw new l.qw(`Illegal method for findAffineTransform(): "${s}"`)}return Ot.U.copyFromMat32(c,d,h,e),null!=o&&Ot.U.copyFromMat32(c,d,u,o),null!=o&&Ot.U.deallocateMat32(c,d,u),Ot.U.deallocateMat32(c,d,g),Ot.U.deallocateMat32(c,d,p),Ot.U.deallocateMat32(c,d,h),e}))}applyAffineTransform(e,t,n){if(2!=t.rows||2!=e.rows||t.columns!=e.columns)throw new l.qw("Invalid shapes");if(2!=n.rows||3!=n.columns)throw new l.qw("The affine transformation must be a 2x3 matrix");return Ot.U.ready().then((({wasm:i,memory:s})=>{const o=Ot.U.allocateMat32(i,s,n),r=Ot.U.allocateMat32(i,s,t),a=Ot.U.allocateMat32(i,s,e);return Ot.U.copyToMat32(i,s,r,t),Ot.U.copyToMat32(i,s,o,n),i.exports.Mat32_transform_affine(a,r,o),Ot.U.copyFromMat32(i,s,a,e),Ot.U.deallocateMat32(i,s,a),Ot.U.deallocateMat32(i,s,r),Ot.U.deallocateMat32(i,s,o),e}))}},ji=new class extends Function{constructor(){return super("...args","return this._create(...args)"),this.bind(this)}_create(e,t){return new Xt(e,t)}Sink(e=void 0){return new Wi(e)}};class $i{static load(e,t={}){return Tt.load(e,t)}static camera(e=640,n=360){const i="object"==typeof e?e:{audio:!1,video:{width:0|e,height:0|n}};return t.A.requestCameraStream(i).then((e=>Tt.load(e)))}static isSupported(){return"undefined"!=typeof WebAssembly&&"undefined"!=typeof WebGL2RenderingContext&&null!=e.c.instance.gl}static get Vector2(){return ji}static Point2(e,t){return new Ft(e,t)}static Size(e,t){return new Lt(e,t)}static get Matrix(){return Zi}static get Promise(){return o.i}static Pipeline(){return new In}static get Image(){return Qn}static get Filter(){return Yn}static get Transform(){return jn}static get Keypoint(){return Yi}static get version(){return"0.9.1"}static get fps(){return Nt.instance.fps}static get Settings(){return s.w}}Object.freeze($i),t.A.log(`Speedy Vision version ${$i.version}. GPU-accelerated Computer Vision for JavaScript by Alexandre Martins. https://github.com/alemart/speedy-vision`),p.LITTLE_ENDIAN||t.A.warning("Running on a big-endian machine")})(),i=i.default})(),e.exports=t()}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var i={};return(()=>{"use strict";n.d(i,{default:()=>xe});var e=n(774),t=n.n(e);class s extends Error{constructor(e="",t=null){super(`${e}\n${t?t.toString():""}`),this.cause=t}get name(){return this.constructor.name}}class o extends s{}class r extends s{}class a extends s{}class A extends s{}class c extends s{}class l extends s{}class d extends s{}class h extends s{}class p extends s{}const g={xs:120,"xs+":160,sm:200,"sm+":240,md:320,"md+":360,lg:480,"lg+":600};class u{static log(e,...t){console.log("[martins-js]",e,...t)}static warning(e,...t){console.warn("[martins-js]",e,...t)}static error(e,...t){console.error("[martins-js]",e,...t)}static assert(e,t=""){if(!e)throw new l(t)}static range(e){if((e|=0)<0)throw new o;return Array.from({length:e},((e,t)=>t))}static resolution(e,n){return function(e,n){const i=g[e];let s=0,o=0;return n>=1?(o=i,s=Math.round(o*n),s-=s%2):(s=i,o=Math.round(s/n),o-=o%2),t().Size(s,o)}(e,n)}static platformString(){return(e=>"object"==typeof e.userAgentData?e.userAgentData.platform:e.platform)(navigator)}static isIOS(){const e=u.platformString();return!!/(iOS|iPhone|iPad|iPod)/i.test(e)||!(!/Mac/i.test(e)||void 0===navigator.maxTouchPoints)&&navigator.maxTouchPoints>2}static isWebKit(){return!!/Apple/.test(navigator.vendor)||(!!/AppleWebKit\/.* Version\//.test(navigator.userAgent)||!!/(CriOS\/|FxiOS\/|EdgiOS\/)/.test(navigator.userAgent))}}class f extends Event{constructor(e){super(e)}get type(){return super.type}}class I{constructor(){this._delegate=new EventTarget}addEventListener(e,t){this._delegate.addEventListener(e,t)}removeEventListener(e,t){this._delegate.removeEventListener(e,t)}dispatchEvent(e){return this._delegate.dispatchEvent(e)}}class m{constructor(e,t){if(this._container=t||this._createContainer(e),this._ownContainer=null==t,this._container.parentElement!==e)throw new o("The container of the HUD must be a direct child of the container of the viewport");this._container.hidden||u.warning("The container of the HUD should have the hidden attribute")}get container(){return this._container}get visible(){return!this._container.hidden}set visible(e){this._container.hidden=!e}_init(e){const t=this._container;t.style.position="absolute",t.style.left=t.style.top="0px",t.style.right=t.style.bottom="0px",t.style.padding=t.style.margin="0px",t.style.zIndex=String(e),t.style.userSelect="none"}_release(){this._ownContainer&&(this._ownContainer=!1,this._container.remove())}_createContainer(e){const t=document.createElement("div");return t.hidden=!0,e.appendChild(t),t}}class _ extends f{}const y={container:null,hudContainer:null,resolution:"lg",canvas:null};class x extends I{constructor(e){super();const n=Object.assign({},y,e);if(null==n.container)throw new o("Unspecified viewport container");this._resolution=n.resolution,this._container=n.container,this._hud=new m(n.container,n.hudContainer),this._parentOfImportedForegroundCanvas=n.canvas?n.canvas.parentNode:null;const i=t().Size(300,150);this._backgroundCanvas=this._createBackgroundCanvas(this._container,i),this._foregroundCanvas=null==n.canvas?this._createForegroundCanvas(this._container,i):this._foregroundCanvas=this._importForegroundCanvas(n.canvas,this._container,i)}get container(){return this._container}get hud(){return this._hud}get resolution(){return this._resolution}get virtualSize(){const e=this._backgroundCanvas.width/this._backgroundCanvas.height;return u.resolution(this._resolution,e)}get canvas(){return this._foregroundCanvas}get _background(){return this._backgroundCanvas}get _size(){throw new r}_init(){this._container.style.touchAction="none",this._hud._init(2),this._hud.visible=!0}_release(){this._hud._release(),this._restoreImportedForegroundCanvas(),this._container.style.touchAction="auto"}_onResize(){const e=this.virtualSize;this._foregroundCanvas.width=e.width,this._foregroundCanvas.height=e.height,this._styleCanvas(this._foregroundCanvas,"foreground");const t=new _("resize");this.dispatchEvent(t)}_createBackgroundCanvas(e,t){const n=this._createCanvas(e,t);return this._styleCanvas(n,"background")}_createForegroundCanvas(e,t){const n=this._createCanvas(e,t);return this._styleCanvas(n,"foreground")}_createCanvas(e,t){const n=document.createElement("canvas");return n.width=t.width,n.height=t.height,e.appendChild(n),n}_styleCanvas(e,t){const n=0+("foreground"==t?1:0);return e.setAttribute("style",["position: absolute","left: 0px","top: 0px","z-index: "+String(n),"width: 100% !important","height: 100% !important"].join("; ")),e}_importForegroundCanvas(e,t,n){if(!(e instanceof HTMLCanvasElement))throw new o(`Not a <canvas>: ${e}`);return e.remove(),t.appendChild(e),e.width=n.width,e.height=n.height,e.dataset.cssText=e.style.cssText,e.style.cssText="",this._styleCanvas(e,"foreground"),e}_restoreImportedForegroundCanvas(){if(null==this._parentOfImportedForegroundCanvas)return;const e=this._foregroundCanvas;e.style.cssText=e.dataset.cssText||"",e.remove(),this._parentOfImportedForegroundCanvas.appendChild(e)}}class C extends I{constructor(e,t){super(),this._base=e,this._getSize=t}get container(){return this._base.container}get hud(){return this._base.hud}get resolution(){return this._base.resolution}get virtualSize(){return this._base.virtualSize}get canvas(){return this._base.canvas}get _background(){return this._base._background}get _size(){return this._getSize()}_init(){this._base._init()}_release(){this._base._release()}_onResize(){this._base._onResize()}addEventListener(e,t){this._base.addEventListener(e,t)}removeEventListener(e,t){this._base.removeEventListener(e,t)}dispatchEvent(e){return this._base.dispatchEvent(e)}}class E extends C{constructor(e,t){super(e,t),this._active=!1}_init(){super._init(),this._active=!0;let e=null;const t=()=>{this._active?(null!==e&&clearTimeout(e),e=setTimeout((()=>{e=null,this._resize.call(this),this._onResize.call(this)}),100)):window.removeEventListener("resize",t)};window.addEventListener("resize",t),this._resize(),this._onResize()}_release(){this._active=!1,super._release()}}class S extends E{_release(){this.canvas.remove(),this._background.remove(),this.hud.visible=!1,this.container.style.cssText="",super._release()}_resize(){const{width:e,height:n}=this._size,i=t().Size(0,0),s=e/n,o=t().Size(window.innerWidth,window.innerHeight);s<=o.width/o.height?(i.height=o.height,i.width=i.height*s|0):(i.width=o.width,i.height=i.width/s|0);const r=this.container;r.style.position="fixed",r.style.left=`calc(50% - ${i.width>>>1}px)`,r.style.top=`calc(50% - ${i.height>>>1}px)`,r.style.zIndex="1000000000",r.style.width=i.width+"px",r.style.height=i.height+"px",r.style.backgroundColor="#000";const a=this._background,A=s,c=n;a.height=c,a.width=a.height*A|0}}class P extends E{_resize(){const{width:e,height:t}=this._size;this.container.style.position="relative",this.container.style.width=e+"px",this.container.style.height=t+"px",this._background.width=e,this._background.height=t}}class v{constructor(){this._timeOfLastUpdate=this._now(),this._partialCycleCount=0,this._cyclesPerSecond=0}update(){const e=this._now();++this._partialCycleCount,e>=this._timeOfLastUpdate+500&&(this._cyclesPerSecond=this._partialCycleCount/.5,this._partialCycleCount=0,this._timeOfLastUpdate=e)}reset(){this._timeOfLastUpdate=this._now(),this._partialCycleCount=0,this._cyclesPerSecond=0}get cyclesPerSecond(){return this._cyclesPerSecond}_now(){return performance.now()}}const w=Object.freeze({default:"","low-power":'<span style="color:#0f0">&#x1F50B</span>',"high-performance":'<span style="color:#ff0">&#x26A1</span>'});class B{constructor(e){this._container=this._createContainer(e),this._lastUpdate=0}release(){this._container.remove()}update(e,t,n,i,s){e>=this._lastUpdate+500&&(this._lastUpdate=e,this._update(t,n,s,i))}get visible(){return!this._container.hidden}set visible(e){this._container.hidden=!e}_update(e,t,n,i){const s=e.map((e=>e._stats)).join(", "),o=t.map((e=>e._stats)).join(", "),r={fps:this._colorize(n),gpu:this._colorize(i),powerIcon:w[N.powerPreference]};this._container.textContent=`MARTINS.js v${xe.version}\n            FPS: [fps] | GPU: [gpu] [powerIcon]\n            IN : ${o}\n            OUT: ${s}`;this._container.innerHTML=this._container.innerHTML.replace(/\[(\w+)\]/g,((e,t)=>r[t]))}_colorize(e){const t="#0f0",n="#f33",i=e>=50?t:e>=30?"#ff0":n,s=e>=30?t:n;return`<span style="color:${"low-power"!=N.powerPreference?i:s}">${Number(e)}</span>`}_createContainer(e){const t=document.createElement("div");return t.style.position="absolute",t.style.left=t.style.top="0px",t.style.zIndex="1000000",t.style.padding="4px",t.style.whiteSpace="pre-line",t.style.backgroundColor="rgba(0,0,0,0.5)",t.style.color="#fff",t.style.fontFamily="monospace",t.style.fontSize="14px",e.appendChild(t),t}}class b{constructor(e){this._results=e,this._index=0}next(){const e=this._index++;return e<this._results.length?{done:!1,value:this._results[e]}:{done:!0,value:void 0}}[Symbol.iterator](){return this}}class Q{constructor(e,t){this._session=e,this._results=new b(t)}get session(){return this._session}get results(){return this._results}}class M{constructor(){this._scale=1,this._time=0,this._unscaledTime=0,this._delta=0,this._firstUpdate=0,this._lastUpdate=Number.POSITIVE_INFINITY}_update(e){e<this._lastUpdate?this._firstUpdate=this._lastUpdate=e:(this._delta=(e-this._lastUpdate)*this._scale,this._time+=this._delta,this._unscaledTime=e-this._firstUpdate,this._lastUpdate=e)}get elapsed(){return.001*this._time}get delta(){return.001*this._delta}get scale(){return this._scale}set scale(e){this._scale=Math.max(0,+e)}get unscaled(){return.001*this._unscaledTime}}class D{constructor(){this._visible=!1}get visible(){return this._visible}set visible(e){this._visible=e}_render(e,t){if(!this._visible)return;const n=e._size,i=e._background.getContext("2d",{alpha:!1});if(!i)throw new r;for(let e=0;e<t.length;e++){if("image-tracker"!=t[e].type)continue;const s=t[e]._output,o=s.keypoints,r=s.screenSize;void 0!==o&&void 0!==r&&this._splitAndRenderKeypoints(i,o,r,n)}for(let e=0;e<t.length;e++){if("image-tracker"!=t[e].type)continue;const s=t[e]._output,o=s.polyline,r=s.screenSize;void 0!==o&&void 0!==r&&this._renderPolyline(i,o,r,n)}for(let e=0;e<t.length;e++){if("image-tracker"!=t[e].type)continue;const s=t[e]._output,o=s.cameraMatrix,r=s.screenSize;void 0!==o&&void 0!==r&&this._renderAxes(i,o,r,n)}}_splitAndRenderKeypoints(e,t,n,i,s=1){if(0==t.length)return;if(!Object.prototype.hasOwnProperty.call(t[0],"_matches"))return void this._renderKeypoints(e,t,n,i,"#f00",s);const o=e=>1==e.matches.length&&e.matches[0].index>=0||e.matches.length>1&&e.matches[0].index>=0&&e.matches[1].index>=0&&e.matches[0].distance<=.7*e.matches[1].distance,r=t,a=r.filter((e=>o(e))),A=r.filter((e=>!o(e)));this._renderKeypoints(e,A,n,i,"#f00",s),this._renderKeypoints(e,a,n,i,"#0f0",s)}_renderKeypoints(e,t,n,i,s="red",o=1){const r=i.width/n.width,a=i.height/n.height;e.beginPath();for(let n=t.length-1;n>=0;n--){const i=t[n],s=i.x*r+.5|0,A=i.y*a+.5|0,c=o*i.scale+.5|0;e.rect(s-c,A-c,2*c,2*c)}e.strokeStyle=s,e.lineWidth=1,e.stroke()}_renderPolyline(e,t,n,i,s="#0f0",o=2){if(0==t.length)return;const r=t.length,a=i.width/n.width,A=i.height/n.height;e.beginPath(),e.moveTo(t[r-1].x*a,t[r-1].y*A);for(let n=0;n<r;n++)e.lineTo(t[n].x*a,t[n].y*A);e.strokeStyle=s,e.lineWidth=o,e.stroke()}_renderAxes(e,t,n,i,s=4){const o=["#f00","#0f0","#00f"],r=i.width/n.width,a=i.height/n.height,A=t.read(),c=[A[9],A[10],A[11]],l=[[1*A[0]+A[9],1*A[1]+A[10],1*A[2]+A[11]],[1*A[3]+A[9],1*A[4]+A[10],1*A[5]+A[11]],[1*A[6]+A[9],1*A[7]+A[10],1*A[8]+A[11]]],d=c[0]/c[2],h=c[1]/c[2];for(let t=0;t<3;t++){const n=l[t],i=n[0]/n[2],A=n[1]/n[2];e.beginPath(),e.moveTo(d*r,h*a),e.lineTo(i*r,A*a),e.strokeStyle=o[t],e.lineWidth=s,e.stroke()}}}const k=[],K=[],L="asap"+Math.random().toString(36).substr(1);window.addEventListener("message",(e=>{if(e.source!==window||e.data!==L)return;if(e.stopPropagation(),0==k.length)return;const t=k.pop(),n=K.pop();t.apply(void 0,n)}),!0);class z extends f{}const T={mode:"immersive",trackers:[],sources:[],viewport:null,stats:!1,gizmos:!1};class R extends I{constructor(e,t,n,i,s){super(),this._mode=t,this._trackers=[],this._sources=e,this._updateStats=new v,this._renderStats=new v,this._active=!0,this._frameReady=!0,this._rafQueue=[],this._time=new M,this._gizmos=new D,this._gizmos.visible=s;const r=this.media;if("immersive"==t)this._viewport=new S(n,(()=>r.size));else{if("inline"!=t)throw new o(`Invalid session mode "${t}"`);this._viewport=new P(n,(()=>r.size))}this._viewport._init(),this._setupUpdateLoop(),this._setupRenderLoop(),this._statsPanel=new B(this._viewport.hud.container),this._statsPanel.visible=i,R._count++,u.log(`The ${t} session is now active!`)}static isSupported(){if(/(Mac|iOS|iPhone|iPad|iPod)/i.test(u.platformString())){const e=/(iPhone|iPad|iPod).* (CPU[\s\w]* OS|CPU iPhone|iOS) ([\d\._]+)/.exec(navigator.userAgent),t=/(AppleWebKit)\/.* (Version)\/([\d\.]+)/.exec(navigator.userAgent),n=t||e;if(null!==n){const e=n[3]||"0.0",[i,s]=e.split(/[\._]/).map((e=>parseInt(e)));if(i<15||15==i&&s<2)return u.error(`${n===t?"Safari":"iOS"} version ${e} is not supported! User agent: ${navigator.userAgent}`),!1}else u.warning(`Unrecognized user agent: ${navigator.userAgent}`)}return t().isSupported()}static instantiate(e=T){const{mode:n=T.mode,sources:i=T.sources,trackers:s=T.trackers,viewport:A=T.viewport,stats:c=T.stats,gizmos:l=T.gizmos}=e;return u.log(`Starting a new ${n} session...`),t().Promise.resolve().then((()=>{if(!R.isSupported())throw new a("You need a browser/device compatible with WebGL2 and WebAssembly in order to experience Augmented Reality with the MARTINS.js engine");if("inline"!==n&&R.count>0)throw new r("Can't start more than one immersive session");return t().Matrix.ready()})).then((()=>{if(1!=i.filter((e=>"video"==e._type)).length)throw new o("One video source of data must be provided");for(let e=i.length-1;e>=0;e--)if(i.indexOf(i[e])<e)throw new o("Found repeated sources of data");return t().Promise.all(i.map((e=>e._init())))})).then((()=>{if(!A)throw new o("Can't create a session without a viewport");return new R(i,n,A,c,l)})).then((e=>{0==s.length&&u.warning("No trackers have been attached to the session!");for(let e=s.length-1;e>=0;e--)if(s.indexOf(s[e])<e)throw new o("Found repeated trackers");return t().Promise.all(s.map((t=>e._attachTracker(t)))).then((()=>e))})).catch((e=>{throw u.error(`Can't start session: ${e.message}`),e}))}static get count(){return this._count}end(){if(!this._active)return t().Promise.resolve();u.log("Shutting down the session..."),this._active=!1;return(e=100,new(t().Promise)((t=>{setTimeout(t,e)}))).then((()=>t().Promise.all(this._trackers.map((e=>e._release()))))).then((()=>t().Promise.all(this._sources.map((e=>e._release()))))).then((()=>{this._sources.length=0,this._trackers.length=0,this._updateStats.reset(),this._renderStats.reset(),this._statsPanel.release(),this._viewport._release(),R._count--;const e=new z("end");this.dispatchEvent(e),u.log("Session ended.")}));var e}requestAnimationFrame(e){const t=Symbol("raf-handle");if(!this._active)throw new r("Can't requestAnimationFrame(): session ended.");return this._rafQueue.push([t,e]),t}cancelAnimationFrame(e){for(let t=this._rafQueue.length-1;t>=0;t--)if(this._rafQueue[t][0]===e){this._rafQueue.splice(t,1);break}}get media(){for(let e=this._sources.length-1;e>=0;e--)if("video"==this._sources[e]._type)return this._sources[e]._data;throw new r("Invalid input source")}get mode(){return this._mode}get viewport(){return this._viewport}get time(){return this._time}get gizmos(){return this._gizmos}_attachTracker(e){if(this._trackers.indexOf(e)>=0)throw new o("Duplicate tracker attached to the session");if(!this._active)throw new r("Inactive session");return this._trackers.push(e),e._init(this)}_renderUserMedia(){const e=this._viewport._background,t=e.getContext("2d",{alpha:!1});if(t){t.imageSmoothingEnabled=!1;const n=this.media.source;t.drawImage(n,0,0,e.width,e.height);for(let n=0;n<this._trackers.length;n++){const i=this._trackers[n]._output.image;void 0!==i&&t.drawImage(i.source,0,0,e.width,e.height)}this._gizmos._render(this._viewport,this._trackers)}}_setupUpdateLoop(){const e=()=>{this._active&&("high-performance"==N.powerPreference?function(e,...t){k.unshift(e),K.unshift(t),window.postMessage(L,"*")}(n):window.requestAnimationFrame(n))},t=()=>{this._update().then(e).turbocharge()};function n(){"low-power"==N.powerPreference?window.requestAnimationFrame(t):t()}window.requestAnimationFrame(t)}_update(){return this._active?t().Promise.all(this._trackers.map((e=>e._update().turbocharge()))).then((()=>{this._updateStats.update(),this._frameReady=!0})).catch((e=>{u.warning("Tracking error: "+e.toString())})):(this._updateStats.reset(),t().Promise.resolve())}_setupRenderLoop(){let e=!1;const t=n=>{const i="low-power"==N.powerPreference;N.powerPreference;this._time._update(n),i&&(e=!e)||this._render(n,!1),this._active&&window.requestAnimationFrame(t)};window.requestAnimationFrame(t)}_render(e,t){if(this._active)if(this._frameReady){const n=this._trackers.map((e=>e._output.exports||{tracker:e,trackables:[]})),i=new Q(this,n),s=this._rafQueue.slice(0);this._rafQueue.length=0,t||this._renderUserMedia();for(let t=0;t<s.length;t++)s[t][1].call(void 0,e,i);this._renderStats.update(),this._statsPanel.update(e,this._trackers,this._sources,this._updateStats.cyclesPerSecond,this._renderStats.cyclesPerSecond),this._frameReady=!1}else this._renderStats.update();else this._renderStats.reset()}}R._count=0;class N{static get powerPreference(){return this._powerPreference}static set powerPreference(e){if(R.count>0)throw new r("Can't change the powerPreference while there are active sessions going on");if("low-power"!=e&&"default"!=e&&"high-performance"!=e)throw new o(`Invalid powerPreference: "${e}"`);t().Settings.gpuPollingMode="high-performance"==e?"asap":"raf",this._powerPreference=e,u.log(`Changed the powerPreference to "${this._powerPreference}"`)}}N._powerPreference="default";class X{constructor(){this._capacity=100,this._database=[],this._locked=!1}get count(){return this._database.length}get capacity(){return this._capacity}*[Symbol.iterator](){const e=this._database.map((e=>e.referenceImage));yield*e}add(e){if(0==e.length)return t().Promise.resolve();if(e.length>1){const n=e.map((e=>this.add([e])));return t().Promise.all(n).then((()=>{}))}const n=e[0];if(this._locked)throw new r("Can't add reference image to the database: it's locked");if(this.count>=this.capacity)throw new r(`Can't add reference image to the database: the capacity of ${this.capacity} images has been exceeded.`);if(void 0!==this._database.find((e=>e.referenceImage.name===n.name)))throw new o(`Can't add reference image to the database: found duplicated name "${n.name}"`);return t().load(n.image).then((e=>{this._database.push({referenceImage:Object.freeze(Object.assign(Object.assign({},n),{name:n.name||"target-"+Math.random().toString(16).substr(2)})),media:e})}))}_lock(){this._locked=!0}_findMedia(e){for(let t=0;t<this._database.length;t++)if(this._database[t].referenceImage.name===e)return this._database[t].media;throw new o(`Can't find reference image "${e}"`)}}const F=1024,O=.3,U=.5,G="low",q="bilinear-upsample",H=.18;class Y{constructor(e,t){this._name=e,this._imageTracker=t,this._pipeline=this._createPipeline()}get name(){return this._name}get screenSize(){const e=this._pipeline.node("screen");if(!e)throw new r;return e.size}init(){}release(){return this._pipeline.release()}update(e,t){const n=this._pipeline.node("source"),i=this._pipeline.node("screen");if(!n||!i)throw new r;return n.media=e,i.size=t,this._beforeUpdate().then((()=>this._gpuUpdate())).then((e=>this._afterUpdate(e)))}onEnterState(e){}onLeaveState(){}_beforeUpdate(){return t().Promise.resolve()}_gpuUpdate(){return this._pipeline.run()}_findPolylineCoordinates(e,n){const i=n.width,s=n.height,o=t().Matrix(2,4,[0,0,i,0,i,s,0,s]),r=t().Matrix.Zeros(2,4);return t().Matrix.applyPerspectiveTransform(r,o,e)}_findPolyline(e,n){return this._findPolylineCoordinates(e,n).then((e=>{const n=e.read();return Array.from({length:4},((e,i)=>t().Point2(n[2*i],n[2*i+1])))}))}_mustRotateWarpedImage(e,t){const n=t.width/t.height,i=e.width/e.height;return i>=1.1&&n<.9||i<.9&&n>=1.1}_findRectificationMatrixOfFullscreenImage(e,n){const i=.15,s=n.width,o=n.height,r=e.width/e.height,a=this._mustRotateWarpedImage(e,n),A=a?1/r:r,c=s>=o?i*o:(o-.7*s/A)/2,l=s>=o?(s-.7*o*A)/2:i*s,d=s-l,h=o-c,p=t().Matrix(2,4,[l,c,d,c,d,h,l,h]),g=t().Matrix(2,4,[0,0,s,0,s,o,0,o]),u=t().Matrix.Eye(3),f=t().Matrix.Zeros(3),I=t().Matrix.Zeros(3);return(a?t().Matrix.perspective(u,g,t().Matrix(2,4,[0,o,0,0,s,0,s,o])):t().Promise.resolve(u)).then((e=>t().Matrix.perspective(f,g,p))).then((e=>I.setTo(f.times(u))))}_findRectificationMatrixOfCameraImage(e,n,i,s){const o=s.width,r=s.height,a=t().Matrix(2,4,[0,0,o,0,o,r,0,r]),A=t().Matrix.Zeros(3);return this._findPolylineCoordinates(e,n).then((e=>t().Matrix.perspective(A,e,a))).then((e=>this._findRectificationMatrixOfFullscreenImage(i,s))).then((e=>A.setTo(e.times(A))))}}class J extends Y{constructor(e){super("initial",e)}_beforeUpdate(){return this._pipeline.node("source").media.size.area()<this.screenSize.area()&&u.warning("The resolution of the tracker is larger than the resolution of the video. This is inefficient."),t().Promise.resolve()}_afterUpdate(e){return t().Promise.resolve({nextState:"training",trackerOutput:{}})}_createPipeline(){const e=t().Pipeline(),n=t().Image.Source("source"),i=t().Transform.Resize("screen"),s=t().Filter.Greyscale(),o=t().Transform.PerspectiveWarp(),r=t().Filter.Nightvision(),a=t().Image.Multiplexer(),A=t().Keypoint.Detector.Harris(),c=t().Keypoint.Descriptor.ORB(),l=t().Filter.GaussianBlur(),d=t().Keypoint.Clipper(),h=t().Keypoint.BorderClipper(),p=t().Filter.GaussianBlur(),g=t().Keypoint.SubpixelRefiner(),u=t().Keypoint.Matcher.BFKNN(),f=t().Keypoint.Transformer(),I=t().Keypoint.Portal.Sink(),m=t().Keypoint.Portal.Source(),_=t().Keypoint.Multiplexer(),y=t().Keypoint.Buffer(),x=t().Keypoint.Multiplexer(),C=t().Keypoint.SinkOfMatchedKeypoints();return n.media=null,i.size=t().Size(0,0),o.transform=t().Matrix.Eye(3),r.quality=G,g.method=q,h.imageSize=t().Size(100,100),h.borderSize=t().Vector2(0,0),u.k=1,f.transform=t().Matrix.Eye(3),m.source=I,_.port=0,x.port=0,y.frozen=!1,C.turbo=!1,n.output().connectTo(i.input()),i.output().connectTo(s.input()),s.output().connectTo(o.input()),o.output().connectTo(a.input("in0")),o.output().connectTo(r.input()),r.output().connectTo(a.input("in1")),a.output().connectTo(l.input()),a.output().connectTo(A.input()),A.output().connectTo(h.input()),h.output().connectTo(d.input()),o.output().connectTo(p.input()),p.output().connectTo(g.input("image")),d.output().connectTo(g.input("keypoints")),l.output().connectTo(c.input("image")),g.output().connectTo(c.input("keypoints")),c.output().connectTo(_.input("in0")),x.output().connectTo(_.input("in1")),_.output().connectTo(u.input("database")),c.output().connectTo(u.input("keypoints")),m.output().connectTo(x.input("in0")),y.output().connectTo(x.input("in1")),m.output().connectTo(y.input()),c.output().connectTo(I.input()),c.output().connectTo(f.input()),f.output().connectTo(C.input()),u.output().connectTo(C.input("matches")),e.init(n,i,s,o,r,a,l,A,g,d,h,p,c,m,_,u,y,x,f,C,I),e}}class W extends Y{constructor(e){super("training",e),this._currentImageIndex=0,this._image=[],this._trainingMap={referenceImageIndex:[],referenceImage:[],keypoints:[]}}onEnterState(e){const t=this._imageTracker.database;if(0==t.count)throw new p("Can't train the Image Tracker: the Reference Image Database is empty");this._currentImageIndex=0,this._image.length=0,this._trainingMap.referenceImageIndex.length=0,this._trainingMap.referenceImage.length=0,this._trainingMap.keypoints.length=0,u.log(`Image Tracker: training using ${t.count} reference image${1!=t.count?"s":""}`),t._lock();for(const e of t)this._image.push(e)}_beforeUpdate(){this.screenSize;const e=this._pipeline.node("source"),n=this._pipeline.node("screen"),i=this._pipeline.node("keypointScaler");if(this._currentImageIndex>=this._image.length)return t().Promise.reject(new r);const s=this._imageTracker.database,o=this._image[this._currentImageIndex],a=s._findMedia(o.name);e.media=a;const A=this._imageTracker.resolution,c=a.width/a.height;n.size=u.resolution(A,c),n.size.width=Math.round(.8*n.size.width),n.size.height=Math.round(.8*n.size.height);const l=F/n.size.width,d=F/n.size.height;return i.transform=t().Matrix(3,3,[l,0,0,0,d,0,0,0,1]),u.log(`Image Tracker: training using reference image "${o.name}" at ${n.size.width}x${n.size.height}...`),t().Promise.resolve()}_afterUpdate(e){const n=this._image[this._currentImageIndex],i=e.keypoints;e.image;u.log(`Image Tracker: found ${i.length} keypoints in reference image "${n.name}"`),this._trainingMap.referenceImage.push(n);for(let e=0;e<i.length;e++)this._trainingMap.keypoints.push(i[e]),this._trainingMap.referenceImageIndex.push(this._currentImageIndex);return++this._currentImageIndex,this._currentImageIndex>=this._image.length?t().Promise.resolve({nextState:"scanning",nextStateSettings:{keypoints:this._trainingMap.keypoints},trackerOutput:{}}):t().Promise.resolve({nextState:"training",trackerOutput:{}})}_createPipeline(){const e=t().Pipeline(),n=t().Image.Source("source"),i=t().Transform.Resize("screen"),s=t().Filter.Greyscale(),o=t().Filter.GaussianBlur(),r=t().Filter.Nightvision(),a=t().Image.Multiplexer("nightvisionMux"),A=t().Image.Pyramid(),c=t().Keypoint.Detector.FAST("fast"),l=t().Keypoint.Descriptor.ORB(),d=t().Keypoint.SubpixelRefiner(),h=t().Image.Pyramid(),p=t().Filter.GaussianBlur(),g=t().Keypoint.Clipper(),u=t().Keypoint.Transformer("keypointScaler"),f=t().Keypoint.Sink("keypoints"),I=t().Image.Sink("image");return n.media=null,i.size=t().Size(0,0),o.kernelSize=t().Size(9,9),o.sigma=t().Vector2(2,2),r.gain=O,r.offset=U,r.decay=0,r.quality=G,a.port=1,c.levels=4,c.scaleFactor=1.19,c.threshold=60,c.capacity=8192,d.method=q,p.kernelSize=t().Size(5,5),p.sigma=t().Vector2(1,1),g.size=1024,u.transform=t().Matrix.Eye(3),f.turbo=!1,n.output().connectTo(i.input()),i.output().connectTo(s.input()),s.output().connectTo(a.input("in0")),s.output().connectTo(r.input()),r.output().connectTo(a.input("in1")),a.output().connectTo(A.input()),A.output().connectTo(c.input()),c.output().connectTo(g.input()),s.output().connectTo(p.input()),p.output().connectTo(h.input()),g.output().connectTo(d.input("keypoints")),h.output().connectTo(d.input("image")),s.output().connectTo(o.input()),o.output().connectTo(l.input("image")),g.output().connectTo(l.input("keypoints")),l.output().connectTo(u.input()),u.output().connectTo(f.input()),a.output().connectTo(I.input()),e.init(n,i,s,r,a,A,c,o,l,g,p,h,d,u,f,I),e}referenceImageOfKeypoint(e){const t=this.referenceImageIndexOfKeypoint(e);return t<0?null:this._trainingMap.referenceImage[t]}referenceImageIndexOfKeypoint(e){const t=this._trainingMap.referenceImageIndex.length;if(e<0||e>=t)return-1;const n=this._trainingMap.referenceImageIndex[e];return n<0||n>=this._trainingMap.referenceImage.length?-1:n}referenceKeypoint(e){return e<0||e>=this._trainingMap.keypoints.length?null:this._trainingMap.keypoints[e]}}const Z=t().Size(F,F);class j extends Y{constructor(e){super("scanning",e),this._counter=0,this._bestScore=0,this._bestHomography=t().Matrix.Eye(3)}onEnterState(e){const t=this._pipeline.node("imagePortalMux"),n=this._pipeline.node("lshTables"),i=e.keypoints;this._counter=0,this._bestScore=0,t.port=0,void 0!==i&&(n.keypoints=i)}_afterUpdate(e){const n=this._pipeline.node("imagePortalMux"),i=e.keypoints,s=this._goodMatches(i),o={keypoints:i,screenSize:this.screenSize};return n.port=1,s.length>=20?this._findHomography(s).then((([e,t])=>(t>=this._bestScore&&this._counter<29&&(this._bestScore=t,this._bestHomography=e,n.port=0),this._findPolyline(e,Z)))).then((e=>{if(++this._counter<30)return{nextState:this.name,trackerOutput:Object.assign({polyline:e},o)};const t=this._pipeline.node("imagePortalSink"),n=this._imageTracker._referenceImageOfKeypoint(s[0].matches[0].index);return{nextState:"pre-tracking",nextStateSettings:{homography:this._bestHomography,snapshot:t,referenceImage:n},trackerOutput:Object.assign({polyline:e},o)}})).catch((()=>({nextState:this.name,trackerOutput:o}))):(this._counter=0,this._bestScore=0,t().Promise.resolve({nextState:this.name,trackerOutput:o}))}_goodMatches(e){const t=Object.create(null);for(let n=e.length-1;n>=0;n--){const i=e[n];if(i.matches[0].index>=0&&i.matches[1].index>=0){if(i.matches[0].distance<=.7*i.matches[1].distance){const e=this._imageTracker._referenceImageIndexOfKeypoint(i.matches[0].index);e>=0&&(Object.prototype.hasOwnProperty.call(t,e)||(t[e]=[]),t[e].push(i))}}}let n=[];for(const e in t)t[e].length>n.length&&(n=t[e]);return n}_findHomography(e){const n=[],i=[];for(let s=e.length-1;s>=0;s--){const o=e[s],r=this._imageTracker._referenceKeypoint(o.matches[0].index);if(null==r)return t().Promise.reject(new h(`Invalid keypoint match index: ${o.matches[0].index} from ${o.toString()}`));n.push(r.x),n.push(r.y),i.push(o.x),i.push(o.y)}const s=n.length/2;if(s<4)return t().Promise.reject(new h("Too few points to compute a homography"));const o=t().Matrix(2,s,n),r=t().Matrix(2,s,i),a=t().Matrix.Zeros(1,s),A=t().Matrix.Zeros(3);return t().Matrix.findHomography(A,o,r,{method:"pransac",reprojectionError:5,numberOfHypotheses:512,bundleSize:128,mask:a}).then((e=>{const t=e.at(0,0);if(Number.isNaN(t))throw new h("Can't compute homography");const n=a.read();let i=0;for(let e=n.length-1;e>=0;e--)i+=n[e];return[e,i/n.length]}))}_createPipeline(){const e=t().Pipeline(),n=t().Image.Source("source"),i=t().Transform.Resize("screen"),s=t().Filter.Greyscale(),o=t().Filter.GaussianBlur(),r=t().Filter.Nightvision(),a=t().Image.Multiplexer("nightvisionMux"),A=t().Image.Pyramid(),c=t().Keypoint.Detector.FAST(),l=t().Keypoint.Descriptor.ORB(),d=t().Keypoint.Clipper(),h=t().Keypoint.Matcher.StaticLSHTables("lshTables"),p=t().Keypoint.Matcher.LSHKNN(),g=t().Keypoint.SinkOfMatchedKeypoints("keypoints"),u=t().Image.Portal.Sink("imagePortalSink"),f=t().Image.Portal.Source("imagePortalSource"),I=t().Image.Multiplexer("imagePortalMux"),m=t().Image.Buffer(),_=t().Transform.Resize();return n.media=null,i.size=t().Size(0,0),o.kernelSize=t().Size(9,9),o.sigma=t().Vector2(2,2),r.gain=O,r.offset=U,r.decay=0,r.quality=G,a.port=1,c.levels=4,c.scaleFactor=1.19,c.threshold=60,c.capacity=2048,d.size=512,h.keypoints=[],h.numberOfTables=8,h.hashSize=15,p.k=2,p.quality="default",f.source=u,I.port=0,_.size=t().Size(0,0),_.scale=t().Vector2(1,1),g.turbo=!0,n.output().connectTo(i.input()),i.output().connectTo(s.input()),s.output().connectTo(o.input()),s.output().connectTo(a.input("in0")),s.output().connectTo(r.input()),r.output().connectTo(a.input("in1")),a.output().connectTo(A.input()),A.output().connectTo(c.input()),c.output().connectTo(d.input()),o.output().connectTo(l.input("image")),d.output().connectTo(l.input("keypoints")),l.output().connectTo(p.input("keypoints")),h.output().connectTo(p.input("lsh")),d.output().connectTo(g.input()),p.output().connectTo(g.input("matches")),n.output().connectTo(m.input()),m.output().connectTo(I.input("in0")),f.output().connectTo(_.input()),_.output().connectTo(I.input("in1")),I.output().connectTo(u.input()),e.init(n,i,s,o,r,a,A,c,l,d,h,p,g,u,f,I,m,_),e}}const $=t().Size(F,F);class V extends Y{constructor(e){super("pre-tracking",e),this._homography=t().Matrix.Eye(3),this._referenceImage=null,this._step="read-reference-image",this._referenceKeypoints=[],this._iterations=0}onEnterState(e){const t=this._pipeline.node("imagePortalSource"),n=this._pipeline.node("muxOfReferenceKeypoints"),i=this._pipeline.node("muxOfBufferOfReferenceKeypoints"),s=this._pipeline.node("bufferOfReferenceKeypoints"),o=e.homography,r=e.referenceImage,a=e.snapshot;if(!r)throw new d("Can't track a null reference image");this._homography=o,this._referenceImage=r,this._step="read-reference-image",this._referenceKeypoints=[],this._iterations=0,t.source=a,n.port=0,i.port=0,s.frozen=!1}_beforeUpdate(){const e=this._referenceImage,n=this._pipeline.node("source"),i=this._pipeline.node("sourceMux"),s=this._pipeline.node("imageRectifier"),o=(this._pipeline.node("keypointRectifier"),this._pipeline.node("borderClipper")),r=this.screenSize,a=this._imageTracker.database._findMedia(e.name);n.media=a,"read-reference-image"==this._step?i.port=0:i.port=1,o.imageSize=r,o.borderSize=t().Vector2(r.width*H,r.height*H);return("read-reference-image"==this._step?this._findRectificationMatrixOfFullscreenImage(a,r):this._findRectificationMatrixOfCameraImage(this._homography,$,a,r)).then((e=>{s.transform=e}))}_afterUpdate(e){const n=this._referenceImage,i=this._pipeline.node("imagePortal"),s=this._pipeline.node("keypointPortalSink"),o=this._pipeline.node("muxOfReferenceKeypoints"),r=this._pipeline.node("muxOfBufferOfReferenceKeypoints"),a=this._pipeline.node("bufferOfReferenceKeypoints"),A=e.keypoints,c=e.image,l={keypoints:void 0!==c?A:void 0,image:c,screenSize:this.screenSize};switch(this._step){case"read-reference-image":return o.port=1,this._referenceKeypoints=A,this._step="warp-camera-image",t().Promise.resolve({nextState:"pre-tracking",trackerOutput:l});case"warp-camera-image":return a.frozen=!0,r.port=1,++this._iterations<3?this._step="warp-camera-image":this._step="train-camera-image",this._findWarp(A,this._referenceKeypoints).then((e=>this._homography.setTo(this._homography.times(e)))).then((e=>({nextState:"pre-tracking",trackerOutput:l}))).catch((e=>(u.warning(`Can't pre-track target image "${n.name}". ${e.toString()}`),{nextState:"scanning",trackerOutput:l})));case"train-camera-image":return u.log(`Took a snapshot of target image "${n.name}". Found ${A.length} keypoints.`),this._changeSpace(this._homography,this.screenSize).then((e=>t().Promise.resolve({nextState:"tracking",trackerOutput:l,nextStateSettings:{homography:e,referenceImage:n,templateKeypoints:A,keypointPortalSink:s,imagePortalSink:i,screenSize:this.screenSize}})))}}_findWarp(e,n){const i=[],s=[];for(let t=0;t<e.length;t++){const o=e[t];if(o.matches[0].index>=0&&o.matches[1].index>=0){if(o.matches[0].distance<=.75*o.matches[1].distance){const e=n[o.matches[0].index];i.push(e.x),i.push(e.y),s.push(o.x),s.push(o.y)}}}const o=i.length/2;if(o<4)return t().Promise.reject(new d("Too few points to compute a warp"));const r=t().Matrix.Eye(3);return this._findKeypointWarp().then((e=>t().Matrix.applyAffineTransform(t().Matrix.Zeros(2,2*o),t().Matrix(2,2*o,i.concat(s)),e.block(0,1,0,2)))).then((e=>t().Matrix.findAffineTransform(r.block(0,1,0,2),e.block(0,1,0,o-1),e.block(0,1,o,2*o-1),{method:"pransac",reprojectionError:3,numberOfHypotheses:2048,bundleSize:128}))).then((e=>{const t=r.at(0,0);if(Number.isNaN(t))throw new d("Can't compute warp: bad keypoints");return r}))}_findKeypointWarp(){const e=this._referenceImage,n=this._imageTracker.database._findMedia(e.name),i=this.screenSize;if(!this._mustRotateWarpedImage(n,i))return t().Promise.resolve(t().Matrix.Eye(3));const s=i.width/2,o=i.height/2;return t().Promise.resolve(t().Matrix(3,3,[0,1,0,-1,0,0,o+s,o-s,1]))}_changeSpace(e,n){const i=n.width,s=n.height,o=t().Matrix(2,4,[0,0,i,0,i,s,0,s]),r=t().Matrix.Zeros(3);return this._findPolylineCoordinates(e,$).then((e=>t().Matrix.perspective(r,o,e)))}_createPipeline(){const e=t().Pipeline(),n=t().Image.Source("source"),i=t().Image.Portal.Source("imagePortalSource"),s=t().Image.Multiplexer("sourceMux"),o=t().Transform.Resize("screen"),r=t().Filter.Greyscale(),a=t().Transform.PerspectiveWarp("imageRectifier"),A=t().Filter.Nightvision(),c=t().Image.Multiplexer(),l=t().Keypoint.Detector.Harris(),d=t().Keypoint.Descriptor.ORB(),h=t().Filter.GaussianBlur(),p=t().Keypoint.Clipper(),g=t().Keypoint.BorderClipper("borderClipper"),u=t().Filter.GaussianBlur(),f=t().Keypoint.SubpixelRefiner(),I=t().Keypoint.Matcher.BFKNN(),m=t().Keypoint.Transformer("keypointRectifier"),_=t().Keypoint.Portal.Sink("keypointPortalSink"),y=t().Keypoint.Portal.Source("keypointPortalSource"),x=t().Keypoint.Multiplexer("muxOfReferenceKeypoints"),C=t().Keypoint.Buffer("bufferOfReferenceKeypoints"),E=t().Keypoint.Multiplexer("muxOfBufferOfReferenceKeypoints"),S=t().Keypoint.SinkOfMatchedKeypoints("keypoints");t().Image.Sink("image");return n.media=null,o.size=t().Size(0,0),i.source=null,a.transform=t().Matrix.Eye(3),s.port=0,A.gain=O,A.offset=U,A.decay=0,A.quality=G,c.port=0,h.kernelSize=t().Size(9,9),h.sigma=t().Vector2(2,2),u.kernelSize=t().Size(5,5),u.sigma=t().Vector2(1,1),l.quality=.005,l.capacity=2048,f.method=q,p.size=200,g.imageSize=o.size,g.borderSize=t().Vector2(0,0),I.k=2,m.transform=t().Matrix.Eye(3),y.source=_,x.port=0,E.port=0,C.frozen=!1,S.turbo=!1,n.output().connectTo(s.input("in0")),i.output().connectTo(s.input("in1")),s.output().connectTo(o.input()),o.output().connectTo(r.input()),r.output().connectTo(a.input()),a.output().connectTo(c.input("in0")),a.output().connectTo(A.input()),A.output().connectTo(c.input("in1")),c.output().connectTo(h.input()),c.output().connectTo(l.input()),l.output().connectTo(g.input()),g.output().connectTo(p.input()),a.output().connectTo(u.input()),u.output().connectTo(f.input("image")),p.output().connectTo(f.input("keypoints")),h.output().connectTo(d.input("image")),f.output().connectTo(d.input("keypoints")),d.output().connectTo(x.input("in0")),E.output().connectTo(x.input("in1")),x.output().connectTo(I.input("database")),d.output().connectTo(I.input("keypoints")),y.output().connectTo(E.input("in0")),C.output().connectTo(E.input("in1")),y.output().connectTo(C.input()),d.output().connectTo(_.input()),d.output().connectTo(m.input()),m.output().connectTo(S.input()),I.output().connectTo(S.input("matches")),e.init(n,i,s,o,r,a,A,c,h,l,f,p,g,u,d,y,x,I,C,E,m,S,_),e}}class ee extends f{constructor(e,t){super(e),this._referenceImage=t}get referenceImage(){return this._referenceImage}}const te=(()=>{const e=[0,1,0,-1,0],t=[-1,0,1,0,0],n=e.length;return Object.freeze({x:e,y:t,a1:new Array(n),a2:new Array(n),a3:new Array(n),m:new Array(3*n*3),v:new Array(3*n),t:new Array(3),r:new Array(3*n),c:new Array(3),Mc:new Array(3*n)})})();class ne{constructor(){this._screenSize=t().Size(0,0),this._matrix=t().Matrix.Eye(3,4),this._intrinsics=[1,0,0,0,1,0,0,0,1],this._extrinsics=[1,0,0,0,1,0,0,0,1,0,0,0],this._f=new Array(401).fill(this._intrinsics[4]),this._fp=0,this._partialRotationBuffer=[],this._translationBuffer=[]}init(e){if(0==e.area())throw new o(`Can't initialize the camera model with screenSize = ${e.toString()}`);this._screenSize.width=e.width,this._screenSize.height=e.height,this._resetIntrinsics(),this._resetExtrinsics(),u.log("Initializing the camera model...")}release(){return this.reset(),null}update(e,n){if(3!=e.rows||3!=e.columns)throw new o("Camera model: provide a homography matrix");if(0==n.area())throw new o(`Camera model: invalid screenSize = ${n.toString()}`);this._screenSize.equals(n)||(u.log("Camera model: detected a change in screen size..."),this._screenSize.width=n.width,this._screenSize.height=n.height,this.reset());const i=e.read(),s=i[0],r=i[3],a=i[6],A=i[1],c=i[4],l=i[7],d=i[2],h=i[5],p=a*(A*h-c*d)-l*(s*h-r*d)+i[8]*(s*c-r*A);if(Math.abs(p)<1e-6)return u.warning("Can't update the camera model using an invalid homography matrix"),t().Promise.resolve(this._matrix);const g=this._estimateFocal(e);g>0&&this._storeFocal(g);const f=this._estimatePose(e);this._storePose(f);const I=this.denormalizer(),m=t().Matrix(3,3,this._intrinsics),_=t().Matrix(3,4,this._extrinsics);return this._matrix.setToSync(m.times(_).times(I)),t().Promise.resolve(this._matrix)}reset(){this._resetIntrinsics(),this._resetExtrinsics()}get matrix(){return this._matrix}get intrinsics(){return this._intrinsics}get extrinsics(){return this._extrinsics}denormalizer(){const e=this._screenSize.width/2,n=this._screenSize.height/2,i=Math.min(e,n);return t().Matrix(4,4,[i,0,0,0,0,-i,0,0,0,0,-i,0,e,n,0,1])}get screenSize(){return this._screenSize}get focalLength(){return this._intrinsics[4]}get fovx(){return 2*Math.atan(this._intrinsics[6]/this._intrinsics[0])}get fovy(){return 2*Math.atan(this._intrinsics[7]/this._intrinsics[4])}principalPoint(){return t().Point2(this._intrinsics[6],this._intrinsics[7])}_resetExtrinsics(){this._extrinsics.fill(0),this._extrinsics[0]=this._extrinsics[4]=this._extrinsics[8]=1,this._partialRotationBuffer.length=0,this._translationBuffer.length=0}_resetIntrinsics(){const e=this._screenSize.width/2,t=this._screenSize.height/2,n=t/Math.tan(.39269908169872414);this._intrinsics[0]=n,this._intrinsics[4]=n,this._intrinsics[6]=e,this._intrinsics[7]=t,this._f.fill(this._intrinsics[4]),this._fp=0}_estimateFocal(e){return 0}_storeFocal(e){this._f[this._fp]=e,this._fp=(this._fp+1)%401;const t=this._f.concat([]).sort(((e,t)=>e-t)),n=t[t.length>>>1];this._intrinsics[0]=this._intrinsics[4]=n}_normalizeHomography(e,n=this._intrinsics[4]){const i=e.read(),s=this._intrinsics[6],o=this._intrinsics[7],r=i[0]-s*i[2],a=i[3]-s*i[5],A=i[6]-s*i[8],c=i[1]-o*i[2],l=i[4]-o*i[5],d=i[7]-o*i[8],h=i[2]*n,p=i[5]*n,g=i[8]*n;return t().Matrix(3,3,[r,c,h,a,l,p,A,d,g])}_estimatePartialPose(e){const n=e.read(),i=n[0],s=n[3],o=n[6],r=n[1],a=n[4],A=n[7],c=n[2],l=n[5],d=n[8],h=d>=0?1:-1,p=Math.sqrt(i*i+r*r+c*c),g=Math.sqrt(s*s+a*a+l*l),u=h/Math.max(p,g);if(Number.isNaN(u))return t().Matrix(3,3,new Array(9).fill(Number.NaN));const f=u*o,I=u*A,m=u*d,_=u*i,y=u*r,x=u*c,C=u*s,E=u*a,S=u*l,P=this._refineRotation(_,y,x,C,E,S),v=this._refineTranslation(e,P,[f,I,m]);return t().Matrix(3,3,P.concat(v))}_refineRotation(e,n,i,s,o,r){const a=e*e+n*n+i*i,A=s*s+o*o+r*r,c=e*s+n*o+i*r,l=(a-A)*(a-A)+4*c*c,d=Math.sqrt(l),h=(a+A+d)/2,p=(a+A-d)/2,g=A-h-c*(1+c)/(a-h),u=Math.sqrt(g*g/(1+g*g)),f=u/g,I=A-p-c*(1+c)/(a-p),m=Math.sqrt(I*I/(1+I*I)),_=m/I,y=Math.sqrt(h),x=Math.sqrt(p),C=t().Matrix(2,2,[1/y,0,0,1/x]),E=t().Matrix(2,2,[u,f,m,_]),S=t().Matrix(2,2,[u,m,f,_]),P=E.times(C).times(S),v=t().Matrix(3,2,[e,n,i,s,o,r]);return t().Matrix(v.times(P)).read()}_refineTranslation(e,t,n){const i=te,s=15;u.assert(5===i.x.length);const o=e.read(),r=o[0],a=o[3],A=o[6],c=o[1],l=o[4],d=o[7],h=o[2],p=o[5],g=o[8],f=t[0],I=t[3],m=t[1],_=t[4],y=t[2],x=t[5],C=i.x,E=i.y,S=i.a1,P=i.a2,v=i.a3;for(let e=0;e<5;e++)S[e]=C[e]*r+E[e]*a+A,P[e]=C[e]*c+E[e]*l+d,v[e]=C[e]*h+E[e]*p+g;const w=i.m,B=i.v;for(let e=0,t=0;t<5;e+=3,t++)w[e]=w[e+s+1]=w[e+s+s+2]=0,w[e+s]=-(w[e+1]=v[t]),w[e+2]=-(w[e+s+s]=P[t]),w[e+s+s+1]=-(w[e+s+2]=S[t]),B[e]=v[t]*(C[t]*m+E[t]*_)-P[t]*(C[t]*y+E[t]*x),B[e+1]=-v[t]*(C[t]*f+E[t]*I)+S[t]*(C[t]*y+E[t]*x),B[e+2]=P[t]*(C[t]*f+E[t]*I)-S[t]*(C[t]*m+E[t]*_);const b=i.t;b[0]=n[0],b[1]=n[1],b[2]=n[2];const Q=i.r,M=i.c,D=i.Mc;for(let e=0;e<3;e++){for(let e=0;e<s;e++){Q[e]=0;for(let t=0;t<3;t++)Q[e]+=w[t*s+e]*b[t];Q[e]-=B[e]}for(let e=0;e<3;e++){M[e]=0;for(let t=0;t<s;t++)M[e]+=w[e*s+t]*Q[t]}for(let e=0;e<s;e++){D[e]=0;for(let t=0;t<3;t++)D[e]+=w[t*s+e]*M[t]}let e=0,t=0;for(let t=0;t<3;t++)e+=M[t]*M[t];for(let e=0;e<s;e++)t+=D[e]*D[e];const n=e/t;if(Number.isNaN(n))break;for(let e=0;e<3;e++)b[e]-=n*M[e]}return b}_filterPartialPose(e){const n=new Array(9).fill(0),i=e.read(),s=i.slice(0,6),o=i.slice(6,9),r="low-power"==N.powerPreference?1.5:1,a=Math.ceil(10/r),A=Math.ceil(10/r);if(Number.isNaN(i[0])){if(0==this._partialRotationBuffer.length)return t().Matrix.Eye(3)}else this._partialRotationBuffer.unshift(s),this._partialRotationBuffer.length>a&&(this._partialRotationBuffer.length=a),this._translationBuffer.unshift(o),this._translationBuffer.length>A&&(this._translationBuffer.length=A);const c=this._partialRotationBuffer.length;for(let e=0;e<c;e++){const t=this._partialRotationBuffer[e];for(let e=0;e<6;e++)n[e]+=t[e]/c}const l=this._refineRotation(n[0],n[1],n[2],n[3],n[4],n[5]),d=this._translationBuffer.length;for(let e=0;e<d;e++){const t=this._translationBuffer[e];for(let i=0;i<3;i++)n[6+i]+=(d-e)*t[i]/((d*d+d)/2)}const h=[n[6],n[7],n[8]];return t().Matrix(3,3,l.concat(h))}_estimateFullPose(e){const n=e.read(),i=n[0],s=n[3],o=n[6],r=n[1],a=n[4],A=n[7],c=n[2],l=n[5],d=n[8];let h=r*l-c*a,p=c*s-i*l,g=i*a-r*s;return i*(a*g-p*l)-r*(s*g-h*l)+c*(s*p-h*a)<0&&(h=-h,p=-p,g=-g),t().Matrix(3,4,[i,r,c,s,a,l,h,p,g,o,A,d])}_estimatePose(e,n=this._intrinsics[4]){const i=this._normalizeHomography(e,n),s=t().Matrix.Eye(3),o=t().Matrix(i);for(let e=0;e<30;e++){const e=this._estimatePartialPose(o);s.setToSync(e.times(s)),o.setToSync(o.times(e.inverse()))}const r=this._filterPartialPose(s);return this._estimateFullPose(r)}_storePose(e){this._extrinsics=e.read()}}class ie{constructor(e){this._transform=e}get transform(){return this._transform}}class se{constructor(e){if(4!=e.rows||4!=e.columns)throw new o("A 3D transform expects a 4x4 matrix");this._matrix=e}get matrix(){return this._matrix}}class oe extends se{constructor(e){super(e)}get inverse(){const e=t().Matrix(this._matrix.inverse());return new oe(e)}}class re extends oe{constructor(e){super(e)}get inverse(){return super.inverse}}class ae extends re{constructor(e){super(e)}get inverse(){const e=this._matrix.read();if(0==e[15])throw new r("Not a rigid transform");const n=1/e[15],i=e[0]*n,s=e[4]*n,o=e[8]*n,a=e[1]*n,A=e[5]*n,c=e[9]*n,l=e[2]*n,d=e[6]*n,h=e[10]*n,p=e[12]*n,g=e[13]*n,u=e[14]*n,f=i*p+a*g+l*u,I=s*p+A*g+d*u,m=o*p+c*g+h*u,_=t().Matrix(4,4,[i,s,o,0,a,A,c,0,l,d,h,0,-f,-I,-m,1]);return new ae(_)}}class Ae extends ie{constructor(e){const t=Ae._computeViewMatrix(e);super(new ae(t).inverse),this._viewMatrix=t}get viewMatrix(){return this._viewMatrix}static _computeViewMatrix(e){const n=e.extrinsics;return t().Matrix(4,4,[n[0],-n[1],-n[2],0,n[3],-n[4],-n[5],0,n[6],-n[7],-n[8],0,n[9],-n[10],-n[11],1])}}class ce{constructor(e,t=1,n=2e4){const i=e.intrinsics,s=e.screenSize;if(this._near=Math.max(0,+t),this._far=Math.max(0,+n),this._near>=this._far)throw new o(`View expects near < far (found near = ${this._near} and far = ${this._far})`);this._aspect=s.width/s.height,this._tanOfHalfFovy=i[7]/i[4],this._projectionMatrix=ce._computeProjectionMatrix(i,this._near,this._far)}get projectionMatrix(){return this._projectionMatrix}get aspect(){return this._aspect}get fovy(){return 2*Math.atan(this._tanOfHalfFovy)}get near(){return this._near}get far(){return this._far}static _computeProjectionMatrix(e,n,i){const s=n*(e[7]/e[4]),o=n*(e[6]/e[0]),r=-s,a=-o;return t().Matrix(4,4,[2*n/(o-a),0,0,0,0,2*n/(s-r),0,0,(o+a)/(o-a),(s+r)/(s-r),-(i+n)/(i-n),-1,0,0,-2*i*n/(i-n),0])}}class le{constructor(e){this._pose=new Ae(e),this._views=[new ce(e)]}get pose(){return this._pose}get view(){return this._views[0]}convertToViewerSpace(e){const n=e.transform.matrix,i=this._pose.viewMatrix,s=t().Matrix(i.times(n)),o=new re(s);return new ie(o)}}const de=!0;class he extends Y{constructor(e){super("tracking",e),this._referenceImage=null,this._warpHomography=t().Matrix.Eye(3),this._poseHomography=t().Matrix.Eye(3),this._initialHomography=t().Matrix.Eye(3),this._initialKeypoints=[],this._counter=0,this._camera=new ne,this._predictedKeypoints=[],this._lastPipelineOutput={keypoints:[]},this._pipelineCounter=0,this._lastOutput={},this._lostCounter=0,u.assert(!0)}onEnterState(e){const n=e.homography,i=e.referenceImage,s=e.templateKeypoints,o=e.keypointPortalSink,a=e.screenSize,A=this._pipeline.node("keypointPortalSource");if(!i)throw new r("Can't track a null reference image");this._referenceImage=i,this._warpHomography=t().Matrix(n),this._poseHomography=t().Matrix(n),this._initialHomography=t().Matrix(n),this._initialKeypoints=s,this._counter=0,this._predictedKeypoints=[],this._lastPipelineOutput={keypoints:[]},this._pipelineCounter=0,this._lastOutput={},this._lostCounter=0,A.source=o,this._camera.init(a);const c=new ee("targetfound",i);this._imageTracker.dispatchEvent(c),u.log(`Tracking image "${i.name}"...`)}onLeaveState(){const e=this._referenceImage;this._camera.release();const t=new ee("targetlost",e);this._imageTracker.dispatchEvent(t)}_beforeUpdate(){const e=this._pipeline.node("imageRectifier"),n=this._pipeline.node("borderClipper"),i=(this._pipeline.node("keypointRectifier"),this.screenSize);return n.imageSize=i,n.borderSize=t().Vector2(i.width*H,i.height*H),this._findImageWarp(this._warpHomography,i).then((t=>{e.transform=t}))}_gpuUpdate(){if("low-power"==N.powerPreference)return super._gpuUpdate();const e=this._pipelineCounter;return this._pipelineCounter=(this._pipelineCounter+1)%2,0!=e?(void 0!==this._lastPipelineOutput.keypoints?this._predictedKeypoints=this._predictKeypoints(this._lastPipelineOutput.keypoints,this._initialKeypoints):this._predictedKeypoints.length=0,this._lastPipelineOutput.keypoints=this._predictedKeypoints,t().Promise.resolve(this._lastPipelineOutput)):super._gpuUpdate().then((e=>(this._lastPipelineOutput=e,e)))}_afterUpdate(e){const n=this._pipeline.node("imageRectifier"),i=e.keypoints,s=e.image,o=this._referenceImage;return this._preprocessMatches(i,this._initialKeypoints).then((e=>t().Promise.all([this._findAffineMotion(e),this._findPerspectiveMotion(e)]))).then((([e,t])=>{const n="low-power"==N.powerPreference,i=!(n||this._counter%2==0),s=2*(n?1:2),o=s>>>1;return this._counter%s==o&&this._warpHomography.setToSync(this._warpHomography.times(e)),i||this._poseHomography.setToSync(this._warpHomography.times(t)),this._counter=(this._counter+1)%s,i?this._camera.matrix:this._camera.update(this._poseHomography,this.screenSize)})).then((e=>{const s=n.transform,o=t().Matrix(s.inverse()),r=i.length,a=new Array(2*r);for(let e=0,t=0;e<r;e++,t+=2)a[t]=i[e].position.x,a[t+1]=i[e].position.y;return t().Matrix.applyPerspectiveTransform(t().Matrix.Zeros(2,r),t().Matrix(2,r,a),o)})).then((e=>this._findPolyline(this._poseHomography,this.screenSize))).then((e=>{const t=this._camera.denormalizer(),n=new re(t),i=new ie(n),r=new le(this._camera),a={pose:i,referenceImage:o},A={tracker:this._imageTracker,trackables:[a],viewer:r};return this._lastOutput={exports:A,cameraMatrix:this._camera.matrix,homography:this._warpHomography,screenSize:this.screenSize,image:s,polyline:e},this._lostCounter=0,{nextState:"tracking",trackerOutput:this._lastOutput}})).catch((e=>e instanceof d&&++this._lostCounter<=10?{nextState:"tracking",trackerOutput:this._lastOutput}:(u.warning(`The target has been lost! ${e.toString()}`),this._camera.reset(),{nextState:"scanning",trackerOutput:{image:s,screenSize:this.screenSize}})))}_findQualityMatches(e,t){const n=[[],[]],i=e.length;for(let s=0;s<i;s++){const i=e[s];if(i.matches[0].index>=0&&i.matches[1].index>=0){if(i.matches[0].distance<=.75*i.matches[1].distance){const e=t[i.matches[0].index];n[0].push(i),n[1].push(e)}}}return n}_refineQualityMatches(e){const t=e[0],n=e[1],i=this._distributeKeypoints(t,10),s=i.length,o=[new Array(s),new Array(s)];for(let e=0;e<s;e++)o[0][e]=t[i[e]],o[1][e]=n[i[e]];return o}_distributeKeypoints(e,t){const n=e.length,i=new Array(2*n);for(let t=0,s=0;t<n;t++,s+=2)i[s]=e[t].x,i[s+1]=e[t].y;this._normalizePoints(i);const s=t*t,o=new Array(s).fill(-1);for(let e=0,s=0;e<n;e++,s+=2){const n=Math.floor(i[s]*t);o[Math.floor(i[s+1]*t)*t+n]=e}const r=[];for(let e=0;e<s;e++)if(o[e]>=0){const t=o[e];r.push(t)}return r}_normalizePoints(e){u.assert(e.length%2==0);const t=e.length/2;if(0==t)return e;let n=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY,s=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY;for(let r=0,a=0;r<t;r++,a+=2){const t=e[a],r=e[a+1];n=t<n?t:n,s=r<s?r:s,i=t>i?t:i,o=r>o?r:o}const r=i-n+1,a=o-s+1;for(let i=0,o=0;i<t;i++,o+=2)e[o]=(e[o]-n)/r,e[o+1]=(e[o+1]-s)/a;return e}_findMatrixOfMatches(e){const n=e[0].length;u.assert(n>0);const i=e[0],s=e[1],o=new Array(2*n),r=new Array(2*n);for(let e=0,t=0;e<n;e++,t+=2)o[t]=s[e].x,o[t+1]=s[e].y,r[t]=i[e].x,r[t+1]=i[e].y;return t().Matrix(2,2*n,o.concat(r))}_preprocessMatches(e,n){const i=this._findQualityMatches(e,n),s=this._refineQualityMatches(i),o=s[0].length;if(o<4)return t().Promise.reject(new d("Not enough data to compute a motion model"));const r=this._findMatrixOfMatches(s),a=t().Matrix.Zeros(2,2*o);return this._findKeypointWarp().then((e=>t().Matrix.applyAffineTransform(a,r,e.block(0,1,0,2))))}_findAffineMotion(e){const n=t().Matrix.Eye(3),i=e.columns/2;return t().Matrix.findAffineTransform(n.block(0,1,0,2),e.block(0,1,0,i-1),e.block(0,1,i,2*i-1),{method:"pransac",reprojectionError:3,numberOfHypotheses:512,bundleSize:128}).then((e=>{const t=n.at(0,0);if(Number.isNaN(t))throw new d("Can't compute affine motion model: bad keypoints");return n}))}_findPerspectiveMotion(e){const n=t().Matrix.Zeros(3),i=e.columns/2;return t().Matrix.findHomography(n,e.block(0,1,0,i-1),e.block(0,1,i,2*i-1),{method:"pransac",reprojectionError:3,numberOfHypotheses:1024,bundleSize:512}).then((e=>{const t=n.at(0,0);if(Number.isNaN(t))throw new d("Can't compute perspective motion model: bad keypoints");return n}))}_findImageWarp(e,n){const i=this._referenceImage,s=this._imageTracker.database._findMedia(i.name),o=t().Matrix.Zeros(3);return this._findRectificationMatrixOfFullscreenImage(s,n).then((t=>o.setTo(t.times(e.inverse()))))}_findKeypointWarp(){const e=this._referenceImage,n=this._imageTracker.database._findMedia(e.name),i=this.screenSize,s=i.width,o=i.height,r=t().Matrix.Eye(3,3);return this._mustRotateWarpedImage(n,i)?t().Matrix.affine(r.block(0,1,0,2),t().Matrix(2,3,[0,o,0,0,s,0]),t().Matrix(2,3,[0,0,s,0,s,o])).then((e=>r)):t().Promise.resolve(r)}_predictKeypoints(e,t){const n=[],i=e.length;for(let s=0;s<i;s++){const i=e[s];if(i.matches[0].index<0||i.matches[1].index<0)continue;const o=t[i.matches[0].index],r=i.position.x-o.position.x,a=i.position.y-o.position.y,A=.8;i.position.x=o.position.x+A*r,i.position.y=o.position.y+A*a,n.push(i)}return n}_createPipeline(){const e=t().Pipeline(),n=t().Image.Source("source"),i=t().Transform.Resize("screen"),s=t().Filter.Greyscale(),o=t().Transform.PerspectiveWarp("imageRectifier"),r=t().Filter.Nightvision(),a=t().Image.Multiplexer(),A=t().Filter.GaussianBlur(),c=t().Keypoint.Detector.Harris(),l=t().Keypoint.Descriptor.ORB(),d=t().Keypoint.Matcher.BFKNN(),h=t().Keypoint.SubpixelRefiner(),p=t().Filter.GaussianBlur(),g=t().Keypoint.BorderClipper("borderClipper"),u=t().Keypoint.Clipper(),f=t().Keypoint.Transformer("keypointRectifier"),I=t().Keypoint.Portal.Source("keypointPortalSource"),m=t().Keypoint.SinkOfMatchedKeypoints("keypoints");t().Image.Sink("image");return n.media=null,i.size=t().Size(0,0),o.transform=t().Matrix.Eye(3),r.gain=O,r.offset=U,r.decay=0,r.quality=G,a.port=0,A.kernelSize=t().Size(9,9),A.sigma=t().Vector2(2,2),p.kernelSize=t().Size(5,5),p.sigma=t().Vector2(1,1),c.quality=.005,c.capacity=2048,h.method=q,u.size=200,g.imageSize=i.size,g.borderSize=t().Vector2(0,0),f.transform=t().Matrix.Eye(3),d.k=2,I.source=null,m.turbo=de,n.output().connectTo(i.input()),i.output().connectTo(s.input()),s.output().connectTo(o.input()),o.output().connectTo(a.input("in0")),o.output().connectTo(r.input()),r.output().connectTo(a.input("in1")),a.output().connectTo(c.input()),c.output().connectTo(g.input()),g.output().connectTo(u.input()),o.output().connectTo(p.input()),p.output().connectTo(h.input("image")),u.output().connectTo(h.input("keypoints")),o.output().connectTo(A.input()),A.output().connectTo(l.input("image")),h.output().connectTo(l.input("keypoints")),I.output().connectTo(d.input("database")),l.output().connectTo(d.input("keypoints")),l.output().connectTo(f.input()),f.output().connectTo(m.input()),d.output().connectTo(m.input("matches")),e.init(n,i,s,o,r,a,A,c,h,g,u,p,l,d,I,f,m),e}}class pe extends I{constructor(){super(),this._state={initial:new J(this),training:new W(this),scanning:new j(this),"pre-tracking":new V(this),tracking:new he(this)},this._session=null,this._activeStateName="initial",this._lastOutput={},this._database=new X,this._resolution="sm+"}get type(){return"image-tracker"}get state(){return this._activeStateName}get database(){return this._database}get resolution(){return this._resolution}set resolution(e){this._resolution=e}get screenSize(){return this._state[this._activeStateName].screenSize}get _output(){return this._lastOutput}get _stats(){return`${e=this.screenSize,`${e.width}x${e.height}`} ${this.state}`;var e}_init(e){this._session=e;for(const e of Object.values(this._state))e.init();return t().Promise.resolve()}_release(){for(const e of Object.values(this._state))e.release();return this._session=null,t().Promise.resolve()}_update(){if(null==this._session)return t().Promise.reject(new r("Uninitialized tracker"));const e=this._session.media,n=e.width/e.height,i=u.resolution(this._resolution,n),s=this._state[this._activeStateName];return s.update(e,i).then((({trackerOutput:e,nextState:t,nextStateSettings:n})=>{this._lastOutput=e,this._activeStateName!=t&&(s.onLeaveState(),this._activeStateName=t,this._state[t].onEnterState(n||{}))}))}_referenceImageOfKeypoint(e){return this._state.training.referenceImageOfKeypoint(e)}_referenceImageIndexOfKeypoint(e){return this._state.training.referenceImageIndexOfKeypoint(e)}_referenceKeypoint(e){return this._state.training.referenceKeypoint(e)}}class ge{static ImageTracker(){return new pe}}let ue=!1;class fe{constructor(e){u.assert(e instanceof HTMLVideoElement,"Expected a video element"),this._video=e,this._media=null}get _type(){return"video"}get _data(){if(null==this._media)throw new r("The media of the source of data isn't loaded");return this._media}get _stats(){const e=this._media;return null!=e?`${e.width}x${e.height} video`:"uninitialized video"}_init(){return u.log(`Initializing ${this._type} source...`),this._prepareVideo(this._video).then((e=>(u.log("The video is prepared"),t().load(e).then((e=>{u.log(`Source of data is a ${e.width}x${e.height} ${this._type}`),this._media=e})))))}_release(){return this._media&&this._media.release(),this._media=null,t().Promise.resolve()}_prepareVideo(e){return e.setAttribute("playsinline",""),this._handleAutoPlay(e).then((e=>(u.isWebKit()&&e.hidden&&(e.hidden=!1,e.style.setProperty("opacity","0"),e.style.setProperty("position","absolute")),e)))}_handleAutoPlay(e){return e.autoplay?(e.muted||(u.warning("Videos marked with autoplay should be muted",e),e.muted=!0),this._waitUntilPlayable(e).then((e=>{const n=e.play();return void 0===n?e:new(t().Promise)(((t,i)=>{n.then((()=>t(e)),(n=>{if(u.error("Can't autoplay video!",n,e),"NotAllowedError"==n.name)u.warning("Tip: allow manual playback"),u.isIOS()&&u.warning("Is low power mode on?"),!e.hidden&&e.controls&&null!==e.parentNode||(document.body.addEventListener("pointerdown",(()=>e.play())),ue||(alert("Tap on the screen to start"),ue=!0));else if("NotSupportedError"==n.name)return void i(new a("Unsupported video format",n));t(e)}))}))}))):t().Promise.resolve(e)}_waitUntilPlayable(e){return e.readyState>=4?t().Promise.resolve(e):new(t().Promise)(((t,n)=>{let i=0,s=setInterval((()=>{e.readyState>=4?(clearInterval(s),t(e)):(i+=500)>=15e3&&(clearInterval(s),n(new c("The video took too long to load")))}),500)}))}}class Ie{constructor(e){u.assert(e instanceof HTMLCanvasElement,"Expected a canvas element"),this._canvas=e,this._media=null}get _type(){return"canvas"}get _data(){if(null==this._media)throw new r("The media of the source of data isn't loaded");return this._media}get _stats(){const e=this._media;return null!=e?`${e.width}x${e.height} canvas`:"uninitialized canvas"}_init(){return t().load(this._canvas).then((e=>{u.log(`Source of data is a ${e.width}x${e.height} ${this._type}`),this._media=e}))}_release(){return this._media&&this._media.release(),this._media=null,t().Promise.resolve()}}const me={resolution:"md",aspectRatio:16/9,constraints:{facingMode:"environment"}};class _e extends fe{constructor(e){const t=document.createElement("video");super(t),this._cameraVideo=t,this._options=Object.assign({},me,e)}get resolution(){return this._options.resolution}_init(){if(u.log("Accessing the webcam..."),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new a("Unsupported browser: no navigator.mediaDevices.getUserMedia()");const e=this._options,n=u.resolution(e.resolution,e.aspectRatio),i={audio:!1,video:Object.assign({width:n.width,height:n.height},e.constraints)};return new(t().Promise)(((e,t)=>{navigator.mediaDevices.getUserMedia(i).then((n=>{const i=this._cameraVideo;i.onloadedmetadata=()=>{const n=i.play(),s="Access to the webcam has been granted.";if(void 0===n)return u.log(s),void e(i);n.then((()=>{u.log(s),e(i)})).catch((e=>{t(new r("Webcam error!",e))}))},i.setAttribute("playsinline",""),i.setAttribute("autoplay",""),i.setAttribute("muted",""),i.srcObject=n})).catch((e=>{t(new A("Please give access to the webcam and reload the page.",e))}))})).then((e=>super._init()))}_release(){return this._cameraVideo.srcObject.getTracks().forEach((e=>e.stop())),this._cameraVideo.onloadedmetadata=null,this._cameraVideo.srcObject=null,super._release()}}class ye{static Video(e){return new fe(e)}static Canvas(e){return new Ie(e)}static Camera(e={}){return new _e(e)}}class xe{static startSession(e){return R.instantiate(e)}static get Tracker(){return ge}static get Source(){return ye}static Viewport(e){return new x(e)}static get Settings(){return N}static get version(){return"0.2.0"}static get Speedy(){return t()}static isSupported(){return R.isSupported()}}Object.freeze(xe),(e=>{e.Speedy=e.Speedy||t()})(window),u.log(`MARTINS.js version ${xe.version}. GPU-accelerated Augmented Reality for the web by Alexandre Martins. https://github.com/alemart/martins-js`)})(),i=i.default})()));