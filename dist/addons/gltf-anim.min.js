/*!
 * A minimalistic A-Frame component for animating 3D models
 * @author Alexandre Martins <alemartf(at)gmail.com> (https://github.com/alemart)
 * @license MIT
 */AFRAME.registerComponent("gltf-anim",{schema:{clip:{type:"string",default:""},loop:{type:"boolean",default:!0},speed:{type:"number",default:1},transitionDuration:{type:"number",default:0}},init(){const t=this.el;this._model=null,this._action=null,t.addEventListener("model-loaded",i=>{i.target===t&&(this._model=i.detail.model,this._refresh())}),t.addEventListener("model-error",i=>{i.target===t&&(this._model=null,this._refresh())})},update(t){this._model&&(this.data.clip!=t.clip&&this._switchClip(),this._action&&(Math.abs(this.data.speed-t.speed)>1e-5&&(this._action.timeScale=this.data.speed),this.data.loop!=t.loop&&(this._action.loop=this.data.loop?THREE.LoopRepeat:THREE.LoopOnce)))},remove(){this._action&&this._action.getMixer().stopAllAction(),this._action=null,this._model=null},tick(t,i){this._action&&this._action.getMixer().update(i*.001)},_refresh(){this._action&&(this._action.getMixer().stopAllAction(),this._action=null),this._model&&(this._action=this._clipAction(null))&&this._action.play()},_switchClip(){const t=this._action;if(!t){this._refresh();return}const i=this._clipAction(t.getMixer());if(!i){this._refresh();return}this._action=i,this._action.reset().play().crossFadeFrom(t,Math.max(0,this.data.transitionDuration))},_clipAction(t){if(!this._model)return null;const i=t&&t.getRoot()===this._model?t:new THREE.AnimationMixer(this._model),e=this._model.animations;if(!e||e.length==0)return null;const n=this.data.clip!=""?this.data.clip:this._defaultClipName(e),s=THREE.AnimationClip.findByName(e,n);if(!s)return null;const o=i.clipAction(s);return o.loop=this.data.loop?THREE.LoopRepeat:THREE.LoopOnce,o.timeScale=this.data.speed,o},_defaultClipName(t){return t.map(e=>e.name).sort()[0]}});
